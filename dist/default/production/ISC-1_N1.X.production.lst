

Microchip Technology PIC18 LITE Macro Assembler V1.36 build -262312587 
                                                                                               Fri May 26 10:53:22 2017

Microchip Technology Omniscient Code Generator v1.36 (Free mode) build 201601150325
     1                           	processor	18F46J13
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
     9                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    10                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    11                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    12                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    13                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    16                           	psect	text0,global,reloc=2,class=CODE,delta=1
    17                           	psect	text1,global,reloc=2,class=CODE,delta=1
    18                           	psect	text2,global,reloc=2,class=CODE,delta=1
    19                           	psect	text3,global,reloc=2,class=CODE,delta=1
    20                           	psect	text4,global,reloc=2,class=CODE,delta=1
    21                           	psect	text5,global,reloc=2,class=CODE,delta=1
    22                           	psect	text6,global,reloc=2,class=CODE,delta=1
    23                           	psect	text7,global,reloc=2,class=CODE,delta=1
    24                           	psect	text8,global,reloc=2,class=CODE,delta=1
    25                           	psect	text9,global,reloc=2,class=CODE,delta=1
    26                           	psect	text10,global,reloc=2,class=CODE,delta=1
    27                           	psect	text11,global,reloc=2,class=CODE,delta=1
    28                           	psect	text12,global,reloc=2,class=CODE,delta=1
    29                           	psect	text13,global,reloc=2,class=CODE,delta=1
    30                           	psect	text14,global,reloc=2,class=CODE,delta=1
    31                           	psect	text15,global,reloc=2,class=CODE,delta=1
    32                           	psect	text16,global,reloc=2,class=CODE,delta=1
    33                           	psect	text17,global,reloc=2,class=CODE,delta=1
    34                           	psect	text18,global,reloc=2,class=CODE,delta=1
    35                           	psect	text19,global,reloc=2,class=CODE,delta=1
    36                           	psect	text20,global,reloc=2,class=CODE,delta=1
    37                           	psect	text21,global,reloc=2,class=CODE,delta=1
    38                           	psect	text22,global,reloc=2,class=CODE,delta=1
    39                           	psect	text23,global,reloc=2,class=CODE,delta=1
    40                           	psect	text24,global,reloc=2,class=CODE,delta=1
    41                           	psect	text25,global,reloc=2,class=CODE,delta=1
    42                           	psect	text26,global,reloc=2,class=CODE,delta=1
    43                           	psect	text27,global,reloc=2,class=CODE,delta=1
    44                           	psect	text28,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	text67,global,reloc=2,class=CODE,delta=1
    84                           	psect	text68,global,reloc=2,class=CODE,delta=1
    85                           	psect	text69,global,reloc=2,class=CODE,delta=1
    86                           	psect	text70,global,reloc=2,class=CODE,delta=1
    87                           	psect	text71,global,reloc=2,class=CODE,delta=1
    88                           	psect	text72,global,reloc=2,class=CODE,delta=1
    89                           	psect	text73,global,reloc=2,class=CODE,delta=1
    90                           	psect	text74,global,reloc=2,class=CODE,delta=1
    91                           	psect	text75,global,reloc=2,class=CODE,delta=1
    92                           	psect	text76,global,reloc=2,class=CODE,delta=1
    93                           	psect	text77,global,reloc=2,class=CODE,delta=1
    94                           	psect	text78,global,reloc=2,class=CODE,delta=1
    95                           	psect	text79,global,reloc=2,class=CODE,delta=1
    96                           	psect	text80,global,reloc=2,class=CODE,delta=1
    97                           	psect	text81,global,reloc=2,class=CODE,delta=1
    98                           	psect	text82,global,reloc=2,class=CODE,delta=1
    99                           	psect	text83,global,reloc=2,class=CODE,delta=1
   100                           	psect	text84,global,reloc=2,class=CODE,delta=1
   101                           	psect	text85,global,reloc=2,class=CODE,delta=1
   102                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
   103                           	psect	rparam,global,class=COMRAM,space=1,delta=1
   104                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   105  0000                     _PPSCONbits	set	3775
   106  0000                     _RPINR21	set	3836
   107  0000                     _RPINR22	set	3837
   108  0000                     _RPOR21	set	3797
   109  0000                     _ANCON0bits	set	3912
   110  0000                     _ANCON1bits	set	3913
   111  0000                     _ADRES	set	4035
   112  0000                     _ADCON0bits	set	4034
   113  0000                     _ADCON1bits	set	4033
   114  0000                     _EECON1bits	set	4006
   115  0000                     _EECON2	set	4007
   116  0000                     _INTCONbits	set	4082
   117  0000                     _LATAbits	set	3977
   118  0000                     _LATBbits	set	3978
   119  0000                     _LATCbits	set	3979
   120  0000                     _LATDbits	set	3980
   121  0000                     _LATEbits	set	3981
   122  0000                     _OSCCONbits	set	4051
   123  0000                     _OSCTUNEbits	set	3995
   124  0000                     _PIE1bits	set	3997
   125  0000                     _PIE3bits	set	4003
   126  0000                     _PIR1bits	set	3998
   127  0000                     _PIR3bits	set	4004
   128  0000                     _PORTBbits	set	3969
   129  0000                     _PORTCbits	set	3970
   130  0000                     _PORTDbits	set	3971
   131  0000                     _PR2	set	4043
   132  0000                     _SSP2BUF	set	3957
   133  0000                     _SSP2CON1bits	set	3954
   134  0000                     _SSP2STATbits	set	3955
   135  0000                     _T2CONbits	set	4042
   136  0000                     _TABLAT	set	4085
   137  0000                     _TBLPTRH	set	4087
   138  0000                     _TBLPTRL	set	4086
   139  0000                     _TBLPTRU	set	4088
   140  0000                     _TRISAbits	set	3986
   141  0000                     _TRISBbits	set	3987
   142  0000                     _TRISCbits	set	3988
   143  0000                     _TRISDbits	set	3989
   144  0000                     _TRISEbits	set	3990
   145                           
   146                           ; #config settings
   147  0000                     
   148                           	psect	cinit
   149  0027EE                     __pcinit:
   150                           	opt stack 0
   151  0027EE                     start_initialization:
   152                           	opt stack 0
   153  0027EE                     __initialization:
   154                           	opt stack 0
   155                           
   156                           ; Clear objects allocated to BANK5 (248 bytes)
   157  0027EE  EE05  F000         	lfsr	0,__pbssBANK5
   158  0027F2  0EF8               	movlw	248
   159  0027F4                     clear_0:
   160  0027F4  6AEE               	clrf	postinc0,c
   161  0027F6  06E8               	decf	wreg,f,c
   162  0027F8  E1FD               	bnz	clear_0
   163                           
   164                           ; Clear objects allocated to BANK4 (124 bytes)
   165  0027FA  EE04  F000         	lfsr	0,__pbssBANK4
   166  0027FE  0E7C               	movlw	124
   167  002800                     clear_1:
   168  002800  6AEE               	clrf	postinc0,c
   169  002802  06E8               	decf	wreg,f,c
   170  002804  E1FD               	bnz	clear_1
   171                           
   172                           ; Clear objects allocated to BANK3 (240 bytes)
   173  002806  EE03  F000         	lfsr	0,__pbssBANK3
   174  00280A  0EF0               	movlw	240
   175  00280C                     clear_2:
   176  00280C  6AEE               	clrf	postinc0,c
   177  00280E  06E8               	decf	wreg,f,c
   178  002810  E1FD               	bnz	clear_2
   179                           
   180                           ; Clear objects allocated to BANK2 (154 bytes)
   181  002812  EE02  F000         	lfsr	0,__pbssBANK2
   182  002816  0E9A               	movlw	154
   183  002818                     clear_3:
   184  002818  6AEE               	clrf	postinc0,c
   185  00281A  06E8               	decf	wreg,f,c
   186  00281C  E1FD               	bnz	clear_3
   187                           
   188                           ; Clear objects allocated to BANK1 (60 bytes)
   189  00281E  EE01  F084         	lfsr	0,__pbssBANK1
   190  002822  0E3C               	movlw	60
   191  002824                     clear_4:
   192  002824  6AEE               	clrf	postinc0,c
   193  002826  06E8               	decf	wreg,f,c
   194  002828  E1FD               	bnz	clear_4
   195                           
   196                           ; Clear objects allocated to BANK0 (15 bytes)
   197  00282A  EE00  F0CF         	lfsr	0,__pbssBANK0
   198  00282E  0E0F               	movlw	15
   199  002830                     clear_5:
   200  002830  6AEE               	clrf	postinc0,c
   201  002832  06E8               	decf	wreg,f,c
   202  002834  E1FD               	bnz	clear_5
   203                           
   204                           ; Clear objects allocated to COMRAM (40 bytes)
   205  002836  EE00  F036         	lfsr	0,__pbssCOMRAM
   206  00283A  0E28               	movlw	40
   207  00283C                     clear_6:
   208  00283C  6AEE               	clrf	postinc0,c
   209  00283E  06E8               	decf	wreg,f,c
   210  002840  E1FD               	bnz	clear_6
   211  002842                     end_of_initialization:
   212                           	opt stack 0
   213  002842                     __end_of__initialization:
   214                           	opt stack 0
   215  002842  905E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   216  002844  925E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   217  002846  0E00               	movlw	low (__Lmediumconst shr (0+16))
   218  002848  6EF8               	movwf	tblptru,c
   219  00284A  0100               	movlb	0
   220  00284C  EF75  F017         	goto	_main	;jump to C main() function
   221                           tblptru	equ	0xFF8
   222                           postinc0	equ	0xFEE
   223                           wreg	equ	0xFE8
   224                           
   225                           	psect	bssCOMRAM
   226  000036                     __pbssCOMRAM:
   227                           	opt stack 0
   228  000036                     _statusFlagsUSLG:
   229                           	opt stack 0
   230  000036                     	ds	3
   231  000039                     BoosterDataCommandComms@counterCommsStatusUSS:
   232                           	opt stack 0
   233  000039                     	ds	2
   234  00003B                     BoosterDataCommandComms@counterSyncStatusUSS:
   235                           	opt stack 0
   236  00003B                     	ds	2
   237  00003D                     _commsOffsetADCValueUS:
   238                           	opt stack 0
   239  00003D                     	ds	2
   240  00003F                     _counterELTTests:
   241                           	opt stack 0
   242  00003F                     	ds	2
   243  000041                     _nextSerialUSG:
   244                           	opt stack 0
   245  000041                     	ds	2
   246  000043                     BoosterDataCommandComms@bitsReadUCS:
   247                           	opt stack 0
   248  000043                     	ds	1
   249  000044                     BoosterDataCommandComms@cableFaultModeUCS:
   250                           	opt stack 0
   251  000044                     	ds	1
   252  000045                     BoosterDataCommandComms@cableTestUCS:
   253                           	opt stack 0
   254  000045                     	ds	1
   255  000046                     BoosterDataCommandComms@commsBitsSentUCS:
   256                           	opt stack 0
   257  000046                     	ds	1
   258  000047                     BoosterDataCommandComms@framesReceivedPhaseUCS:
   259                           	opt stack 0
   260  000047                     	ds	1
   261  000048                     BoosterDataCommandComms@lvlCountUCS:
   262                           	opt stack 0
   263  000048                     	ds	1
   264  000049                     BoosterDataCommandComms@syncModeUCS:
   265                           	opt stack 0
   266  000049                     	ds	1
   267  00004A                     _ISO_COUNTER:
   268                           	opt stack 0
   269  00004A                     	ds	1
   270  00004B                     _QueryFailureCounter:
   271                           	opt stack 0
   272  00004B                     	ds	1
   273  00004C                     _boosterCountUC:
   274                           	opt stack 0
   275  00004C                     	ds	1
   276  00004D                     _bufferRXLenUCG:
   277                           	opt stack 0
   278  00004D                     	ds	1
   279  00004E                     _bufferRXNextUCG:
   280                           	opt stack 0
   281  00004E                     	ds	1
   282  00004F                     _bufferTXLenUCG:
   283                           	opt stack 0
   284  00004F                     	ds	1
   285  000050                     _bufferTXNextUCG:
   286                           	opt stack 0
   287  000050                     	ds	1
   288  000051                     _cableFaultCounter:
   289                           	opt stack 0
   290  000051                     	ds	1
   291  000052                     _commsDataModeUCG:
   292                           	opt stack 0
   293  000052                     	ds	1
   294  000053                     _commsStatusUCG:
   295                           	opt stack 0
   296  000053                     	ds	1
   297  000054                     _dispStatusUCS:
   298                           	opt stack 0
   299  000054                     	ds	1
   300  000055                     _flagST7540UCG:
   301                           	opt stack 0
   302  000055                     	ds	1
   303  000056                     _missingSerialWinUCS:
   304                           	opt stack 0
   305  000056                     	ds	1
   306  000057                     _statusGetSerialUCS:
   307                           	opt stack 0
   308  000057                     	ds	1
   309  000058                     SetWindowID@currentSerialUSS:
   310                           	opt stack 0
   311  000058                     	ds	2
   312  00005A                     _commandResponseUS:
   313                           	opt stack 0
   314  00005A                     	ds	2
   315  00005C                     SetWindowID@currentBitUCS:
   316                           	opt stack 0
   317  00005C                     	ds	1
   318  00005D                     SetWindowID@statusSetIDUCS:
   319                           	opt stack 0
   320  00005D                     	ds	1
   321                           tblptru	equ	0xFF8
   322                           postinc0	equ	0xFEE
   323                           wreg	equ	0xFE8
   324                           
   325                           	psect	bssBANK0
   326  0000CF                     __pbssBANK0:
   327                           	opt stack 0
   328  0000CF                     _commsTXBitsUSLG:
   329                           	opt stack 0
   330  0000CF                     	ds	3
   331  0000D2                     BoosterDataCommandComms@recvFrameUSS:
   332                           	opt stack 0
   333  0000D2                     	ds	2
   334  0000D4                     _commandBLCalibFlag:
   335                           	opt stack 0
   336  0000D4                     	ds	2
   337  0000D6                     _counterELTFailures:
   338                           	opt stack 0
   339  0000D6                     	ds	2
   340  0000D8                     _masterCommsTimeoutUSG:
   341                           	opt stack 0
   342  0000D8                     	ds	2
   343  0000DA                     _masterFlagsUCG:
   344                           	opt stack 0
   345  0000DA                     	ds	1
   346  0000DB                     _packetNumberUCG:
   347                           	opt stack 0
   348  0000DB                     	ds	1
   349  0000DC                     _iscSerialUSG:
   350                           	opt stack 0
   351  0000DC                     	ds	2
   352                           tblptru	equ	0xFF8
   353                           postinc0	equ	0xFEE
   354                           wreg	equ	0xFE8
   355                           
   356                           	psect	bssBANK1
   357  000184                     __pbssBANK1:
   358                           	opt stack 0
   359  000184                     _boosterCommsDataSerial:
   360                           	opt stack 0
   361  000184                     	ds	60
   362                           tblptru	equ	0xFF8
   363                           postinc0	equ	0xFEE
   364                           wreg	equ	0xFE8
   365                           
   366                           	psect	bssBANK2
   367  000200                     __pbssBANK2:
   368                           	opt stack 0
   369  000200                     _bufferTXST7540UCAG:
   370                           	opt stack 0
   371  000200                     	ds	79
   372  00024F                     _bufferRXST7540UCAG:
   373                           	opt stack 0
   374  00024F                     	ds	75
   375                           tblptru	equ	0xFF8
   376                           postinc0	equ	0xFEE
   377                           wreg	equ	0xFE8
   378                           
   379                           	psect	bssBANK3
   380  000300                     __pbssBANK3:
   381                           	opt stack 0
   382  000300                     _boosterCommsData:
   383                           	opt stack 0
   384  000300                     	ds	240
   385                           tblptru	equ	0xFF8
   386                           postinc0	equ	0xFEE
   387                           wreg	equ	0xFE8
   388                           
   389                           	psect	bssBANK4
   390  000400                     __pbssBANK4:
   391                           	opt stack 0
   392  000400                     _packetNumbersUSAG:
   393                           	opt stack 0
   394  000400                     	ds	124
   395                           tblptru	equ	0xFF8
   396                           postinc0	equ	0xFEE
   397                           wreg	equ	0xFE8
   398                           
   399                           	psect	bssBANK5
   400  000500                     __pbssBANK5:
   401                           	opt stack 0
   402  000500                     _pastBoosterValuesUSAG:
   403                           	opt stack 0
   404  000500                     	ds	248
   405                           tblptru	equ	0xFF8
   406                           postinc0	equ	0xFEE
   407                           wreg	equ	0xFE8
   408                           
   409                           	psect	cstackBANK1
   410  000100                     __pcstackBANK1:
   411                           	opt stack 0
   412  000100                     ReturnBoosterData@partRespUSA:
   413                           	opt stack 0
   414                           
   415                           ; 62 bytes @ 0x0
   416  000100                     	ds	62
   417  00013E                     ReturnBoosterData@allRespUSA:
   418                           	opt stack 0
   419                           
   420                           ; 62 bytes @ 0x3E
   421  00013E                     	ds	62
   422  00017C                     ReturnBoosterData@windowCompareUS:
   423                           	opt stack 0
   424                           
   425                           ; 2 bytes @ 0x7C
   426  00017C                     	ds	2
   427  00017E                     ReturnBoosterData@iscStatusUC:
   428                           	opt stack 0
   429                           
   430                           ; 1 bytes @ 0x7E
   431  00017E                     	ds	1
   432  00017F                     ReturnBoosterData@respCountUC:
   433                           	opt stack 0
   434                           
   435                           ; 1 bytes @ 0x7F
   436  00017F                     	ds	1
   437  000180                     ReturnBoosterData@commandValUC:
   438                           	opt stack 0
   439                           
   440                           ; 1 bytes @ 0x80
   441  000180                     	ds	1
   442  000181                     ReturnBoosterData@wordCountUC:
   443                           	opt stack 0
   444                           
   445                           ; 1 bytes @ 0x81
   446  000181                     	ds	1
   447  000182                     ReturnBoosterData@dataValUC:
   448                           	opt stack 0
   449                           
   450                           ; 1 bytes @ 0x82
   451  000182                     	ds	1
   452  000183                     ReturnBoosterData@boosterCountUC:
   453                           	opt stack 0
   454                           
   455                           ; 1 bytes @ 0x83
   456  000183                     	ds	1
   457                           tblptru	equ	0xFF8
   458                           postinc0	equ	0xFEE
   459                           wreg	equ	0xFE8
   460                           
   461                           	psect	cstackBANK0
   462  000060                     __pcstackBANK0:
   463                           	opt stack 0
   464  000060                     ?_PacketDataST7540:
   465                           	opt stack 0
   466  000060                     ?_CRC16:
   467                           	opt stack 0
   468  000060                     ?_GetLastPacketNumber:
   469                           	opt stack 0
   470  000060                     ?_MangleSerial:
   471                           	opt stack 0
   472  000060                     StartTransmitST7540@discardUC:
   473                           	opt stack 0
   474  000060                     ReceiveNewDataST7540@discardUC:
   475                           	opt stack 0
   476  000060                     ResetSingleBoosterState@boosterNumberUC:
   477                           	opt stack 0
   478  000060                     ClearPacketNumbers@iscCountUC:
   479                           	opt stack 0
   480  000060                     ClearPastValue@valuePosUC:
   481                           	opt stack 0
   482  000060                     SetIsolationRelay@relayStateUC:
   483                           	opt stack 0
   484  000060                     ReadConfigST7540@frameDataUS:
   485                           	opt stack 0
   486  000060                     CRC16@data_p:
   487                           	opt stack 0
   488  000060                     MangleSerial@mangleValueUS:
   489                           	opt stack 0
   490  000060                     GetPacketSlot@srcSerialUS:
   491                           	opt stack 0
   492  000060                     GetLastPacketNumber@srcSerialUS:
   493                           	opt stack 0
   494  000060                     WaitTickCount@tickCountUS:
   495                           	opt stack 0
   496  000060                     FlashReadAddress@flashAddressUS:
   497                           	opt stack 0
   498  000060                     FlashEraseBlock@flashAddressUS:
   499                           	opt stack 0
   500  000060                     FlashWriteWord@flashAddressUS:
   501                           	opt stack 0
   502                           
   503                           ; 2 bytes @ 0x0
   504  000060                     	ds	1
   505  000061                     ResetBoosterStates@boosterCountUC:
   506                           	opt stack 0
   507  000061                     ClearPastValues@boosterCountUC:
   508                           	opt stack 0
   509                           
   510                           ; 1 bytes @ 0x1
   511  000061                     	ds	1
   512  000062                     ??_MangleSerial:
   513  000062                     ForceFiringMode@forceModeUC:
   514                           	opt stack 0
   515  000062                     IdlePacketSlot@iscCountC:
   516                           	opt stack 0
   517  000062                     FlashEraseBlock@intStatusUC:
   518                           	opt stack 0
   519  000062                     FlashWriteWord@lsbUC:
   520                           	opt stack 0
   521  000062                     ReadConfigST7540@configDataUS:
   522                           	opt stack 0
   523  000062                     CRC16@length:
   524                           	opt stack 0
   525  000062                     WriteConfigST7540@frameDataUS:
   526                           	opt stack 0
   527                           
   528                           ; 3 bytes @ 0x2
   529  000062                     	ds	1
   530  000063                     FlashWriteWord@msbUC:
   531                           	opt stack 0
   532                           
   533                           ; 1 bytes @ 0x3
   534  000063                     	ds	1
   535  000064                     ??_ReadConfigST7540:
   536  000064                     ??_CRC16:
   537  000064                     GetPacketSlot@saveSlotC:
   538                           	opt stack 0
   539  000064                     GetLastPacketNumber@iscCountUC:
   540                           	opt stack 0
   541  000064                     FlashWriteWord@intStatusUC:
   542                           	opt stack 0
   543  000064                     _MangleSerial$2745:
   544                           	opt stack 0
   545                           
   546                           ; 2 bytes @ 0x4
   547  000064                     	ds	1
   548  000065                     ??_ReadFlashValues:
   549  000065                     SavePacketNumber@srcSerialUS:
   550                           	opt stack 0
   551  000065                     WriteConfigST7540@configDataUS:
   552                           	opt stack 0
   553                           
   554                           ; 3 bytes @ 0x5
   555  000065                     	ds	1
   556  000066                     MangleSerial@xorOutputUC:
   557                           	opt stack 0
   558                           
   559                           ; 1 bytes @ 0x6
   560  000066                     	ds	1
   561  000067                     ReadConfigST7540@discardUC:
   562                           	opt stack 0
   563  000067                     MangleSerial@b0UC:
   564                           	opt stack 0
   565  000067                     SavePacketNumber@packetNumberUC:
   566                           	opt stack 0
   567                           
   568                           ; 1 bytes @ 0x7
   569  000067                     	ds	1
   570  000068                     ??_WriteConfigST7540:
   571  000068                     ??_SavePacketNumber:
   572  000068                     ReadConfigST7540@bitsReceivedUC:
   573                           	opt stack 0
   574  000068                     MangleSerial@b1UC:
   575                           	opt stack 0
   576  000068                     CRC16@data:
   577                           	opt stack 0
   578                           
   579                           ; 2 bytes @ 0x8
   580  000068                     	ds	1
   581  000069                     MangleSerial@b2UC:
   582                           	opt stack 0
   583                           
   584                           ; 1 bytes @ 0x9
   585  000069                     	ds	1
   586  00006A                     CRC16@i:
   587                           	opt stack 0
   588  00006A                     MangleSerial@b4UC:
   589                           	opt stack 0
   590  00006A                     SavePacketNumber@saveSlotC:
   591                           	opt stack 0
   592                           
   593                           ; 1 bytes @ 0xA
   594  00006A                     	ds	1
   595  00006B                     WriteConfigST7540@discardUC:
   596                           	opt stack 0
   597  00006B                     MangleSerial@b6UC:
   598                           	opt stack 0
   599  00006B                     CRC16@crc:
   600                           	opt stack 0
   601  00006B                     UpdatePacketNumber@serialNumberUS:
   602                           	opt stack 0
   603                           
   604                           ; 2 bytes @ 0xB
   605  00006B                     	ds	1
   606  00006C                     WriteConfigST7540@bitsSentUC:
   607                           	opt stack 0
   608  00006C                     MangleSerial@b10UC:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0xC
   612  00006C                     	ds	1
   613  00006D                     ??_CheckCRCST7540:
   614  00006D                     MangleSerial@b12UC:
   615                           	opt stack 0
   616  00006D                     CreateMessageST7540@packetSourceUS:
   617                           	opt stack 0
   618  00006D                     UpdatePacketNumber@packetNumberS:
   619                           	opt stack 0
   620  00006D                     InitST7540@frameDataTXUS:
   621                           	opt stack 0
   622                           
   623                           ; 3 bytes @ 0xD
   624  00006D                     	ds	1
   625  00006E                     MangleSerial@cycleCountUC:
   626                           	opt stack 0
   627                           
   628                           ; 1 bytes @ 0xE
   629  00006E                     	ds	1
   630  00006F                     ??_UpdatePacketNumber:
   631  00006F                     CreateMessageST7540@packetDestUS:
   632                           	opt stack 0
   633  00006F                     CollisionCheck@delayValueUS:
   634                           	opt stack 0
   635                           
   636                           ; 2 bytes @ 0xF
   637  00006F                     	ds	1
   638  000070                     CheckCRCST7540@expectedCRCUS:
   639                           	opt stack 0
   640  000070                     InitST7540@configDataTXUS:
   641                           	opt stack 0
   642                           
   643                           ; 3 bytes @ 0x10
   644  000070                     	ds	1
   645  000071                     CreateMessageST7540@commandUC:
   646                           	opt stack 0
   647                           
   648                           ; 1 bytes @ 0x11
   649  000071                     	ds	1
   650  000072                     CreateMessageST7540@dataLenUC:
   651                           	opt stack 0
   652  000072                     CheckCRCST7540@receivedCRCUS:
   653                           	opt stack 0
   654                           
   655                           ; 2 bytes @ 0x12
   656  000072                     	ds	1
   657  000073                     CreateMessageST7540@dataBuf:
   658                           	opt stack 0
   659  000073                     InitST7540@frameDataRXUS:
   660                           	opt stack 0
   661                           
   662                           ; 3 bytes @ 0x13
   663  000073                     	ds	1
   664  000074                     CheckCRCST7540@packetLenUC:
   665                           	opt stack 0
   666  000074                     UpdatePacketNumber@pastPacketNumberS:
   667                           	opt stack 0
   668                           
   669                           ; 2 bytes @ 0x14
   670  000074                     	ds	1
   671  000075                     ??_CreateMessageST7540:
   672  000075                     ?_PacketReadParamST7540:
   673                           	opt stack 0
   674                           
   675                           ; 2 bytes @ 0x15
   676  000075                     	ds	1
   677  000076                     InitST7540@configDataRXUS:
   678                           	opt stack 0
   679                           
   680                           ; 3 bytes @ 0x16
   681  000076                     	ds	1
   682  000077                     ??_PacketReadParamST7540:
   683  000077                     CreateMessageST7540@packetCRCUS:
   684                           	opt stack 0
   685                           
   686                           ; 2 bytes @ 0x17
   687  000077                     	ds	2
   688  000079                     CreateMessageST7540@dataBufLocUC:
   689                           	opt stack 0
   690  000079                     PacketReadParamST7540@paramName:
   691                           	opt stack 0
   692  000079                     InitST7540Wrapper@initCountUC:
   693                           	opt stack 0
   694                           
   695                           ; 1 bytes @ 0x19
   696  000079                     	ds	1
   697  00007A                     PacketReadParamST7540@retValueUS:
   698                           	opt stack 0
   699                           
   700                           ; 2 bytes @ 0x1A
   701  00007A                     	ds	2
   702  00007C                     RetransmitMessageSt7540@packetSourceUS:
   703                           	opt stack 0
   704  00007C                     CreateAndSend@packetSourceUS:
   705                           	opt stack 0
   706                           
   707                           ; 2 bytes @ 0x1C
   708  00007C                     	ds	2
   709  00007E                     RetransmitMessageSt7540@packetDestUS:
   710                           	opt stack 0
   711  00007E                     CreateAndSend@packetDestUS:
   712                           	opt stack 0
   713                           
   714                           ; 2 bytes @ 0x1E
   715  00007E                     	ds	2
   716  000080                     CreateAndSend@commandUC:
   717                           	opt stack 0
   718  000080                     RetransmitMessageSt7540@dataBuf:
   719                           	opt stack 0
   720                           
   721                           ; 2 bytes @ 0x20
   722  000080                     	ds	1
   723  000081                     CreateAndSend@dataLenUC:
   724                           	opt stack 0
   725                           
   726                           ; 1 bytes @ 0x21
   727  000081                     	ds	1
   728  000082                     RetransmitMessageSt7540@commandUC:
   729                           	opt stack 0
   730  000082                     CreateAndSend@dataBuf:
   731                           	opt stack 0
   732                           
   733                           ; 2 bytes @ 0x22
   734  000082                     	ds	1
   735  000083                     RetransmitMessageSt7540@oldPacketNumberUC:
   736                           	opt stack 0
   737                           
   738                           ; 1 bytes @ 0x23
   739  000083                     	ds	1
   740  000084                     RetransmitMessageSt7540@packetDataLenUC:
   741                           	opt stack 0
   742  000084                     CreateAndSend@nextPacketNumberUS:
   743                           	opt stack 0
   744                           
   745                           ; 2 bytes @ 0x24
   746  000084                     	ds	2
   747  000086                     SetSerialNumber@respSerialUS:
   748                           	opt stack 0
   749  000086                     ReturnBoosterData@respSerialUS:
   750                           	opt stack 0
   751  000086                     ProcessSerialCMD@respSerialUS:
   752                           	opt stack 0
   753  000086                     ProcessPingCMD@respSerialUS:
   754                           	opt stack 0
   755                           
   756                           ; 2 bytes @ 0x26
   757  000086                     	ds	2
   758  000088                     ??_ReturnBoosterData:
   759  000088                     ??_SetSerialNumber:
   760  000088                     
   761                           ; 1 bytes @ 0x28
   762  000088                     	ds	2
   763  00008A                     ProcessSerialCMD@serialListUSA:
   764                           	opt stack 0
   765                           
   766                           ; 60 bytes @ 0x2A
   767  00008A                     	ds	2
   768  00008C                     SetSerialNumber@dataBufUSP:
   769                           	opt stack 0
   770                           
   771                           ; 2 bytes @ 0x2C
   772  00008C                     	ds	58
   773  0000C6                     ProcessSerialCMD@boosterIndexUC:
   774                           	opt stack 0
   775                           
   776                           ; 1 bytes @ 0x66
   777  0000C6                     	ds	1
   778  0000C7                     ProcessSerialCMD@boosterCountUC:
   779                           	opt stack 0
   780                           
   781                           ; 1 bytes @ 0x67
   782  0000C7                     	ds	1
   783  0000C8                     ProcessMasterComms@currentPacketNumberUS:
   784                           	opt stack 0
   785                           
   786                           ; 2 bytes @ 0x68
   787  0000C8                     	ds	2
   788  0000CA                     ProcessMasterComms@destSerialUS:
   789                           	opt stack 0
   790                           
   791                           ; 2 bytes @ 0x6A
   792  0000CA                     	ds	2
   793  0000CC                     ProcessMasterComms@respSerialUS:
   794                           	opt stack 0
   795                           
   796                           ; 2 bytes @ 0x6C
   797  0000CC                     	ds	2
   798  0000CE                     ProcessMasterComms@recvCmdUC:
   799                           	opt stack 0
   800                           
   801                           ; 1 bytes @ 0x6E
   802  0000CE                     	ds	1
   803  0000CF                     tblptru	equ	0xFF8
   804                           postinc0	equ	0xFEE
   805                           wreg	equ	0xFE8
   806                           
   807                           ; 1 bytes @ 0x6F
   808                           
   809                           	psect	cstackCOMRAM
   810  000001                     __pcstackCOMRAM:
   811                           	opt stack 0
   812  000001                     ?_ReadAnalogVoltage:
   813                           	opt stack 0
   814  000001                     ?___wmul:
   815                           	opt stack 0
   816  000001                     SPIISRHandlerST7540@dataReadUC:
   817                           	opt stack 0
   818  000001                     BoosterQueryStart@queryValUC:
   819                           	opt stack 0
   820  000001                     CheckDataCollision@boosterCountUC:
   821                           	opt stack 0
   822  000001                     i2ResetSingleBoosterState@boosterNumberUC:
   823                           	opt stack 0
   824  000001                     i2ClearPastValue@valuePosUC:
   825                           	opt stack 0
   826  000001                     CheckBoosterRXParity@recvFrameUS:
   827                           	opt stack 0
   828  000001                     ___wmul@multiplier:
   829                           	opt stack 0
   830  000001                     i2FlashEraseBlock@flashAddressUS:
   831                           	opt stack 0
   832  000001                     i2FlashWriteWord@flashAddressUS:
   833                           	opt stack 0
   834                           
   835                           ; 2 bytes @ 0x0
   836  000001                     	ds	1
   837  000002                     i2ResetBoosterStates@boosterCountUC:
   838                           	opt stack 0
   839  000002                     i2ClearPastValues@boosterCountUC:
   840                           	opt stack 0
   841                           
   842                           ; 1 bytes @ 0x1
   843  000002                     	ds	1
   844  000003                     LowestIdleWindow@boosterCountUC:
   845                           	opt stack 0
   846  000003                     ReadAnalogVoltage@channelC:
   847                           	opt stack 0
   848  000003                     i2ForceFiringMode@forceModeUC:
   849                           	opt stack 0
   850  000003                     i2FlashEraseBlock@intStatusUC:
   851                           	opt stack 0
   852  000003                     i2FlashWriteWord@lsbUC:
   853                           	opt stack 0
   854  000003                     CheckBoosterRXParity@tmpRecvFrameUS:
   855                           	opt stack 0
   856  000003                     ___wmul@multiplicand:
   857                           	opt stack 0
   858                           
   859                           ; 2 bytes @ 0x2
   860  000003                     	ds	1
   861  000004                     ??_NewBoosterAdded:
   862  000004                     i2FlashWriteWord@msbUC:
   863                           	opt stack 0
   864  000004                     ReadEarthLeakage@earthLeakageValueUS:
   865                           	opt stack 0
   866  000004                     ReadKeySwitch@keySwitchValueUS:
   867                           	opt stack 0
   868                           
   869                           ; 2 bytes @ 0x3
   870  000004                     	ds	1
   871  000005                     CheckBoosterRXParity@bitParityUC:
   872                           	opt stack 0
   873  000005                     i2FlashWriteWord@intStatusUC:
   874                           	opt stack 0
   875  000005                     ___wmul@product:
   876                           	opt stack 0
   877                           
   878                           ; 2 bytes @ 0x4
   879  000005                     	ds	1
   880  000006                     CheckBoosterRXParity@bitCountUC:
   881                           	opt stack 0
   882                           
   883                           ; 1 bytes @ 0x5
   884  000006                     	ds	1
   885  000007                     ??_CheckLineFault:
   886  000007                     BoosterCommandStart@destSerialUS:
   887                           	opt stack 0
   888  000007                     ProcessRXFrame@recvFrameUS:
   889                           	opt stack 0
   890                           
   891                           ; 2 bytes @ 0x6
   892  000007                     	ds	2
   893  000009                     BoosterCommandStart@destCommandUC:
   894                           	opt stack 0
   895  000009                     ProcessRXFrame@frameNumUC:
   896                           	opt stack 0
   897  000009                     CheckLineFault@activeWindowCounter:
   898                           	opt stack 0
   899                           
   900                           ; 2 bytes @ 0x8
   901  000009                     	ds	1
   902  00000A                     ??_ProcessRXFrame:
   903  00000A                     BoosterCommandStart@destPayloadUC:
   904                           	opt stack 0
   905                           
   906                           ; 1 bytes @ 0x9
   907  00000A                     	ds	1
   908  00000B                     ??_BoosterCommandStart:
   909  00000B                     CheckLineFault@lineVoltUS:
   910                           	opt stack 0
   911                           
   912                           ; 2 bytes @ 0xA
   913  00000B                     	ds	2
   914  00000D                     CheckLineFault@i_1610:
   915                           	opt stack 0
   916                           
   917                           ; 2 bytes @ 0xC
   918  00000D                     	ds	2
   919  00000F                     CheckLineFault@i:
   920                           	opt stack 0
   921                           
   922                           ; 2 bytes @ 0xE
   923  00000F                     	ds	2
   924  000011                     ProcessRXFrame@parityCheckUC:
   925                           	opt stack 0
   926                           
   927                           ; 1 bytes @ 0x10
   928  000011                     	ds	1
   929  000012                     ??_BoosterDataCommandComms:
   930                           
   931                           ; 1 bytes @ 0x11
   932  000012                     	ds	2
   933  000014                     BoosterDataCommandComms@commsADCValueUS:
   934                           	opt stack 0
   935                           
   936                           ; 2 bytes @ 0x13
   937  000014                     	ds	2
   938  000016                     WindowIDBacktrack@currentBitUC:
   939                           	opt stack 0
   940  000016                     AssignWindowID@serialNumberUS:
   941                           	opt stack 0
   942                           
   943                           ; 2 bytes @ 0x15
   944  000016                     	ds	2
   945  000018                     AssignWindowID@newWindowUC:
   946                           	opt stack 0
   947  000018                     WindowIDBacktrack@currentSerialUS:
   948                           	opt stack 0
   949                           
   950                           ; 2 bytes @ 0x17
   951  000018                     	ds	2
   952  00001A                     WindowIDBacktrack@statusSetIDUC:
   953                           	opt stack 0
   954  00001A                     QueryWinSerial@serialNumberUS:
   955                           	opt stack 0
   956                           
   957                           ; 2 bytes @ 0x19
   958  00001A                     	ds	2
   959  00001C                     ??_WindowIDBacktrack:
   960  00001C                     QueryWinSerial@j:
   961                           	opt stack 0
   962                           
   963                           ; 1 bytes @ 0x1B
   964  00001C                     	ds	1
   965  00001D                     QueryWinSerial@i:
   966                           	opt stack 0
   967                           
   968                           ; 1 bytes @ 0x1C
   969  00001D                     	ds	6
   970  000023                     ??_SetWindowID:
   971                           
   972                           ; 1 bytes @ 0x22
   973  000023                     	ds	3
   974  000026                     ??_BoosterCommsDispatcher:
   975                           
   976                           ; 1 bytes @ 0x25
   977  000026                     	ds	1
   978  000027                     ??_isr:
   979                           
   980                           ; 1 bytes @ 0x26
   981  000027                     	ds	14
   982  000035                     isr@discardUC:
   983                           	opt stack 0
   984                           
   985                           ; 1 bytes @ 0x34
   986  000035                     	ds	1
   987                           tblptru	equ	0xFF8
   988                           postinc0	equ	0xFEE
   989                           wreg	equ	0xFE8
   990                           
   991 ;;
   992 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   993 ;;
   994 ;; *************** function _main *****************
   995 ;; Defined at:
   996 ;;		line 68 in file "main.c"
   997 ;; Parameters:    Size  Location     Type
   998 ;;		None
   999 ;; Auto vars:     Size  Location     Type
  1000 ;;		None
  1001 ;; Return value:  Size  Location     Type
  1002 ;;                  1    wreg      void 
  1003 ;; Registers used:
  1004 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1005 ;; Tracked objects:
  1006 ;;		On entry : 0/0
  1007 ;;		On exit  : 0/0
  1008 ;;		Unchanged: 0/0
  1009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1014 ;;Total ram usage:        0 bytes
  1015 ;; Hardware stack levels required when called:   13
  1016 ;; This function calls:
  1017 ;;		_InitST7540Wrapper
  1018 ;;		_InitStates
  1019 ;;		_InitSystem
  1020 ;;		_ProcessMasterComms
  1021 ;;		_SetCommsHigh
  1022 ;; This function is called by:
  1023 ;;		Startup code after reset
  1024 ;; This function uses a non-reentrant model
  1025 ;;
  1026                           
  1027                           	psect	text0
  1028  002EEA                     __ptext0:
  1029                           	opt stack 0
  1030  002EEA                     _main:
  1031                           	opt stack 18
  1032                           
  1033                           ;main.c: 69: InitStates();
  1034                           
  1035                           ;incstack = 0
  1036  002EEA  ECDB  F017         	call	_InitStates	;wreg free
  1037                           
  1038                           ;main.c: 70: InitSystem();
  1039  002EEE  ECA3  F012         	call	_InitSystem	;wreg free
  1040                           
  1041                           ;main.c: 72: InitST7540Wrapper();
  1042  002EF2  EC07  F017         	call	_InitST7540Wrapper	;wreg free
  1043                           
  1044                           ;main.c: 74: SetCommsHigh();
  1045  002EF6  EC05  F018         	call	_SetCommsHigh	;wreg free
  1046                           
  1047                           ;main.c: 76: statusFlagsUSLG |= 0b000000001000000000000000;
  1048  002EFA  8E37               	bsf	_statusFlagsUSLG+1,7,c	;volatile
  1049  002EFC                     l6053:
  1050                           
  1051                           ;main.c: 79: ProcessMasterComms();
  1052  002EFC  EC7B  F007         	call	_ProcessMasterComms	;wreg free
  1053  002F00  D7FD               	goto	l6053
  1054  002F02                     __end_of_main:
  1055                           	opt stack 0
  1056                           tblptru	equ	0xFF8
  1057                           postinc0	equ	0xFEE
  1058                           wreg	equ	0xFE8
  1059                           
  1060 ;; *************** function _SetCommsHigh *****************
  1061 ;; Defined at:
  1062 ;;		line 488 in file "boostercomms.c"
  1063 ;; Parameters:    Size  Location     Type
  1064 ;;		None
  1065 ;; Auto vars:     Size  Location     Type
  1066 ;;		None
  1067 ;; Return value:  Size  Location     Type
  1068 ;;                  1    wreg      void 
  1069 ;; Registers used:
  1070 ;;		None
  1071 ;; Tracked objects:
  1072 ;;		On entry : 0/0
  1073 ;;		On exit  : 0/0
  1074 ;;		Unchanged: 0/0
  1075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1076 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1077 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1079 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1080 ;;Total ram usage:        0 bytes
  1081 ;; Hardware stack levels used:    1
  1082 ;; Hardware stack levels required when called:    7
  1083 ;; This function calls:
  1084 ;;		Nothing
  1085 ;; This function is called by:
  1086 ;;		_main
  1087 ;; This function uses a non-reentrant model
  1088 ;;
  1089                           
  1090                           	psect	text1
  1091  00300A                     __ptext1:
  1092                           	opt stack 0
  1093  00300A                     _SetCommsHigh:
  1094                           	opt stack 23
  1095                           
  1096                           ;boostercomms.c: 489: LATBbits.LATB2 = 0;
  1097                           
  1098                           ;incstack = 0
  1099  00300A  948A               	bcf	3978,2,c	;volatile
  1100                           
  1101                           ;boostercomms.c: 490: LATAbits.LATA2 = 1;
  1102  00300C  8489               	bsf	3977,2,c	;volatile
  1103  00300E  0012               	return		;funcret
  1104  003010                     __end_of_SetCommsHigh:
  1105                           	opt stack 0
  1106                           tblptru	equ	0xFF8
  1107                           postinc0	equ	0xFEE
  1108                           wreg	equ	0xFE8
  1109                           
  1110 ;; *************** function _ProcessMasterComms *****************
  1111 ;; Defined at:
  1112 ;;		line 37 in file "mastercomms.c"
  1113 ;; Parameters:    Size  Location     Type
  1114 ;;		None
  1115 ;; Auto vars:     Size  Location     Type
  1116 ;;  respSerialUS    2  108[BANK0 ] unsigned short 
  1117 ;;  destSerialUS    2  106[BANK0 ] unsigned short 
  1118 ;;  currentPacke    2  104[BANK0 ] unsigned short 
  1119 ;;  pastPacketNu    2    0        unsigned short 
  1120 ;;  recvCmdUC       1  110[BANK0 ] unsigned char 
  1121 ;; Return value:  Size  Location     Type
  1122 ;;                  1    wreg      void 
  1123 ;; Registers used:
  1124 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1125 ;; Tracked objects:
  1126 ;;		On entry : 0/0
  1127 ;;		On exit  : 0/0
  1128 ;;		Unchanged: 0/0
  1129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1131 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1133 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1134 ;;Total ram usage:        7 bytes
  1135 ;; Hardware stack levels used:    1
  1136 ;; Hardware stack levels required when called:   12
  1137 ;; This function calls:
  1138 ;;		_CollisionCheck
  1139 ;;		_CreateAndSend
  1140 ;;		_DataReadyST7540
  1141 ;;		_ForceFiringMode
  1142 ;;		_PacketReadParamST7540
  1143 ;;		_ProcessPingCMD
  1144 ;;		_ProcessSerialCMD
  1145 ;;		_ReceiveNewDataST7540
  1146 ;;		_RetransmitMessageSt7540
  1147 ;;		_ReturnBoosterData
  1148 ;;		_SetIsolationRelay
  1149 ;;		_SetSerialNumber
  1150 ;;		_UpdatePacketNumber
  1151 ;; This function is called by:
  1152 ;;		_main
  1153 ;; This function uses a non-reentrant model
  1154 ;;
  1155                           
  1156                           	psect	text2
  1157  000EF6                     __ptext2:
  1158                           	opt stack 0
  1159  000EF6                     _ProcessMasterComms:
  1160                           	opt stack 18
  1161                           
  1162                           ;mastercomms.c: 38: unsigned char recvCmdUC;
  1163                           ;mastercomms.c: 39: unsigned short destSerialUS;
  1164                           ;mastercomms.c: 40: unsigned short respSerialUS;
  1165                           ;mastercomms.c: 41: unsigned short currentPacketNumberUS;
  1166                           ;mastercomms.c: 42: unsigned short pastPacketNumberUS;
  1167                           ;mastercomms.c: 44: masterFlagsUCG = 0;
  1168                           
  1169                           ;incstack = 0
  1170  000EF6  0E00               	movlw	0
  1171  000EF8  0100               	movlb	0	; () banked
  1172  000EFA  6FDA               	movwf	_masterFlagsUCG& (0+255),b
  1173                           
  1174                           ; BSR set to: 0
  1175                           ;mastercomms.c: 45: ReceiveNewDataST7540();
  1176  000EFC  ECB9  F017         	call	_ReceiveNewDataST7540	;wreg free
  1177  000F00                     l5921:
  1178  000F00  EC0B  F018         	call	_DataReadyST7540	;wreg free
  1179  000F04  0900               	iorlw	0
  1180  000F06  B4D8               	btfsc	status,2,c
  1181  000F08  D7FB               	goto	l5921
  1182                           
  1183                           ;mastercomms.c: 48: if(!PacketReadParamST7540(5))
  1184  000F0A  0E05               	movlw	5
  1185  000F0C  ECB3  F00E         	call	_PacketReadParamST7540
  1186  000F10  0100               	movlb	0	; () banked
  1187  000F12  5175               	movf	?_PacketReadParamST7540& (0+255),w,b
  1188  000F14  0100               	movlb	0	; () banked
  1189  000F16  1176               	iorwf	(?_PacketReadParamST7540+1)& (0+255),w,b
  1190  000F18  B4D8               	btfsc	status,2,c
  1191  000F1A  0012               	return	
  1192                           
  1193                           ; BSR set to: 0
  1194                           ;mastercomms.c: 51: ForceFiringMode(1);
  1195                           
  1196                           ; BSR set to: 0
  1197                           
  1198                           ; BSR set to: 0
  1199                           ;mastercomms.c: 49: return;
  1200  000F1C  0E01               	movlw	1
  1201  000F1E  EC07  F016         	call	_ForceFiringMode
  1202                           
  1203                           ;mastercomms.c: 52: statusFlagsUSLG |= 0b000000000000000000000010;
  1204  000F22  8236               	bsf	_statusFlagsUSLG,1,c	;volatile
  1205                           
  1206                           ;mastercomms.c: 53: masterCommsTimeoutUSG = 0;
  1207  000F24  0E00               	movlw	0
  1208  000F26  0100               	movlb	0	; () banked
  1209  000F28  6FD9               	movwf	(_masterCommsTimeoutUSG+1)& (0+255),b
  1210  000F2A  0E00               	movlw	0
  1211  000F2C  6FD8               	movwf	_masterCommsTimeoutUSG& (0+255),b
  1212                           
  1213                           ; BSR set to: 0
  1214                           ;mastercomms.c: 57: recvCmdUC = PacketReadParamST7540(4);
  1215  000F2E  0E04               	movlw	4
  1216  000F30  ECB3  F00E         	call	_PacketReadParamST7540
  1217  000F34  0100               	movlb	0	; () banked
  1218  000F36  5175               	movf	?_PacketReadParamST7540& (0+255),w,b
  1219  000F38  0100               	movlb	0	; () banked
  1220  000F3A  6FCE               	movwf	ProcessMasterComms@recvCmdUC& (0+255),b
  1221                           
  1222                           ; BSR set to: 0
  1223                           ;mastercomms.c: 58: destSerialUS = PacketReadParamST7540(2);
  1224  000F3C  0E02               	movlw	2
  1225  000F3E  ECB3  F00E         	call	_PacketReadParamST7540
  1226  000F42  C075  F0CA         	movff	?_PacketReadParamST7540,ProcessMasterComms@destSerialUS
  1227  000F46  C076  F0CB         	movff	?_PacketReadParamST7540+1,ProcessMasterComms@destSerialUS+1
  1228                           
  1229                           ;mastercomms.c: 59: respSerialUS = PacketReadParamST7540(1);
  1230  000F4A  0E01               	movlw	1
  1231  000F4C  ECB3  F00E         	call	_PacketReadParamST7540
  1232  000F50  C075  F0CC         	movff	?_PacketReadParamST7540,ProcessMasterComms@respSerialUS
  1233  000F54  C076  F0CD         	movff	?_PacketReadParamST7540+1,ProcessMasterComms@respSerialUS+1
  1234                           
  1235                           ;mastercomms.c: 61: __nop();
  1236  000F58  F000               	nop	
  1237                           
  1238                           ;mastercomms.c: 63: if(recvCmdUC & 0b10000000){
  1239  000F5A  0100               	movlb	0	; () banked
  1240  000F5C  AFCE               	btfss	ProcessMasterComms@recvCmdUC& (0+255),7,b
  1241  000F5E  D004               	goto	l5945
  1242                           
  1243                           ; BSR set to: 0
  1244                           ;mastercomms.c: 64: masterFlagsUCG |= 0b00000001;
  1245  000F60  0100               	movlb	0	; () banked
  1246  000F62  81DA               	bsf	_masterFlagsUCG& (0+255),0,b
  1247                           
  1248                           ;mastercomms.c: 65: recvCmdUC &= ~0b10000000;
  1249  000F64  0100               	movlb	0	; () banked
  1250  000F66  9FCE               	bcf	ProcessMasterComms@recvCmdUC& (0+255),7,b
  1251  000F68                     l5945:
  1252                           
  1253                           ; BSR set to: 0
  1254                           ;mastercomms.c: 66: }
  1255                           ;mastercomms.c: 68: if(recvCmdUC & 0b01000000){
  1256  000F68  0100               	movlb	0	; () banked
  1257  000F6A  ADCE               	btfss	ProcessMasterComms@recvCmdUC& (0+255),6,b
  1258  000F6C  D004               	goto	l5949
  1259                           
  1260                           ; BSR set to: 0
  1261                           ;mastercomms.c: 69: masterFlagsUCG |= 0b00000100;
  1262  000F6E  0100               	movlb	0	; () banked
  1263  000F70  85DA               	bsf	_masterFlagsUCG& (0+255),2,b
  1264                           
  1265                           ;mastercomms.c: 70: recvCmdUC &= ~0b01000000;
  1266  000F72  0100               	movlb	0	; () banked
  1267  000F74  9DCE               	bcf	ProcessMasterComms@recvCmdUC& (0+255),6,b
  1268  000F76                     l5949:
  1269                           
  1270                           ; BSR set to: 0
  1271                           ;mastercomms.c: 71: }
  1272                           ;mastercomms.c: 73: if(destSerialUS)
  1273  000F76  0100               	movlb	0	; () banked
  1274  000F78  51CA               	movf	ProcessMasterComms@destSerialUS& (0+255),w,b
  1275  000F7A  0100               	movlb	0	; () banked
  1276  000F7C  11CB               	iorwf	(ProcessMasterComms@destSerialUS+1)& (0+255),w,b
  1277  000F7E  B4D8               	btfsc	status,2,c
  1278  000F80  D002               	goto	l5953
  1279                           
  1280                           ; BSR set to: 0
  1281                           ;mastercomms.c: 74: masterFlagsUCG |= 0b00000010;
  1282  000F82  0100               	movlb	0	; () banked
  1283  000F84  83DA               	bsf	_masterFlagsUCG& (0+255),1,b
  1284  000F86                     l5953:
  1285                           
  1286                           ; BSR set to: 0
  1287                           ;mastercomms.c: 76: if(!destSerialUS || (destSerialUS == iscSerialUSG)){
  1288  000F86  0100               	movlb	0	; () banked
  1289  000F88  51CA               	movf	ProcessMasterComms@destSerialUS& (0+255),w,b
  1290  000F8A  0100               	movlb	0	; () banked
  1291  000F8C  11CB               	iorwf	(ProcessMasterComms@destSerialUS+1)& (0+255),w,b
  1292  000F8E  B4D8               	btfsc	status,2,c
  1293  000F90  D00B               	goto	l5957
  1294                           
  1295                           ; BSR set to: 0
  1296  000F92  0100               	movlb	0	; () banked
  1297  000F94  51DC               	movf	_iscSerialUSG& (0+255),w,b
  1298  000F96  0100               	movlb	0	; () banked
  1299  000F98  19CA               	xorwf	ProcessMasterComms@destSerialUS& (0+255),w,b
  1300  000F9A  E105               	bnz	u6421
  1301  000F9C  0100               	movlb	0	; () banked
  1302  000F9E  51DD               	movf	(_iscSerialUSG+1)& (0+255),w,b
  1303  000FA0  0100               	movlb	0	; () banked
  1304  000FA2  19CB               	xorwf	(ProcessMasterComms@destSerialUS+1)& (0+255),w,b
  1305  000FA4  A4D8               	btfss	status,2,c
  1306  000FA6                     u6421:
  1307  000FA6  D08F               	goto	l5987
  1308  000FA8                     l5957:
  1309                           
  1310                           ; BSR set to: 0
  1311                           ;mastercomms.c: 77: currentPacketNumberUS = PacketReadParamST7540(3);
  1312  000FA8  0E03               	movlw	3
  1313  000FAA  ECB3  F00E         	call	_PacketReadParamST7540
  1314  000FAE  C075  F0C8         	movff	?_PacketReadParamST7540,ProcessMasterComms@currentPacketNumberUS
  1315  000FB2  C076  F0C9         	movff	?_PacketReadParamST7540+1,ProcessMasterComms@currentPacketNumberUS+1
  1316                           
  1317                           ;mastercomms.c: 78: if(!UpdatePacketNumber(respSerialUS, currentPacketNumberUS))
  1318  000FB6  C0CC  F06B         	movff	ProcessMasterComms@respSerialUS,UpdatePacketNumber@serialNumberUS
  1319  000FBA  C0CD  F06C         	movff	ProcessMasterComms@respSerialUS+1,UpdatePacketNumber@serialNumberUS+1
  1320  000FBE  C0C8  F06D         	movff	ProcessMasterComms@currentPacketNumberUS,UpdatePacketNumber@packetNumberS
  1321  000FC2  C0C9  F06E         	movff	ProcessMasterComms@currentPacketNumberUS+1,UpdatePacketNumber@packetNumberS+1
  1322  000FC6  ECB7  F011         	call	_UpdatePacketNumber	;wreg free
  1323  000FCA  0900               	iorlw	0
  1324  000FCC  B4D8               	btfsc	status,2,c
  1325  000FCE  0012               	return	
  1326  000FD0  D059               	goto	l5985
  1327  000FD2                     l5961:
  1328                           
  1329                           ;mastercomms.c: 82: case(0b00000001):
  1330                           ;mastercomms.c: 83: case(0b00000010):
  1331                           ;mastercomms.c: 84: case(0b00000011):
  1332                           ;mastercomms.c: 86: ReturnBoosterData(recvCmdUC, respSerialUS);
  1333  000FD2  C0CC  F086         	movff	ProcessMasterComms@respSerialUS,ReturnBoosterData@respSerialUS
  1334  000FD6  C0CD  F087         	movff	ProcessMasterComms@respSerialUS+1,ReturnBoosterData@respSerialUS+1
  1335  000FDA  0100               	movlb	0	; () banked
  1336  000FDC  51CE               	movf	ProcessMasterComms@recvCmdUC& (0+255),w,b
  1337  000FDE  ECA9  F003         	call	_ReturnBoosterData
  1338                           
  1339                           ;mastercomms.c: 87: break;
  1340  000FE2  0012               	return	
  1341  000FE4                     l5963:
  1342                           
  1343                           ;mastercomms.c: 89: SetIsolationRelay(recvCmdUC);
  1344  000FE4  0100               	movlb	0	; () banked
  1345  000FE6  51CE               	movf	ProcessMasterComms@recvCmdUC& (0+255),w,b
  1346  000FE8  ECDF  F016         	call	_SetIsolationRelay
  1347                           
  1348                           ;mastercomms.c: 90: CreateAndSend(iscSerialUSG, respSerialUS, recvCmdUC, 0, 0);
  1349  000FEC  C0DC  F07C         	movff	_iscSerialUSG,CreateAndSend@packetSourceUS
  1350  000FF0  C0DD  F07D         	movff	_iscSerialUSG+1,CreateAndSend@packetSourceUS+1
  1351  000FF4  C0CC  F07E         	movff	ProcessMasterComms@respSerialUS,CreateAndSend@packetDestUS
  1352  000FF8  C0CD  F07F         	movff	ProcessMasterComms@respSerialUS+1,CreateAndSend@packetDestUS+1
  1353  000FFC  C0CE  F080         	movff	ProcessMasterComms@recvCmdUC,CreateAndSend@commandUC
  1354  001000  0E00               	movlw	0
  1355  001002  0100               	movlb	0	; () banked
  1356  001004  6F81               	movwf	CreateAndSend@dataLenUC& (0+255),b
  1357  001006  0E00               	movlw	0
  1358  001008  0100               	movlb	0	; () banked
  1359  00100A  6F82               	movwf	CreateAndSend@dataBuf& (0+255),b
  1360  00100C  0E00               	movlw	0
  1361  00100E  0100               	movlb	0	; () banked
  1362  001010  6F83               	movwf	(CreateAndSend@dataBuf+1)& (0+255),b
  1363  001012  ECE2  F012         	call	_CreateAndSend	;wreg free
  1364  001016                     l5967:
  1365                           
  1366                           ;mastercomms.c: 92: SetIsolationRelay(recvCmdUC);
  1367  001016  0100               	movlb	0	; () banked
  1368  001018  51CE               	movf	ProcessMasterComms@recvCmdUC& (0+255),w,b
  1369  00101A  ECDF  F016         	call	_SetIsolationRelay
  1370                           
  1371                           ;mastercomms.c: 93: CreateAndSend(iscSerialUSG, respSerialUS, recvCmdUC, 0, 0);
  1372  00101E  C0DC  F07C         	movff	_iscSerialUSG,CreateAndSend@packetSourceUS
  1373  001022  C0DD  F07D         	movff	_iscSerialUSG+1,CreateAndSend@packetSourceUS+1
  1374  001026  C0CC  F07E         	movff	ProcessMasterComms@respSerialUS,CreateAndSend@packetDestUS
  1375  00102A  C0CD  F07F         	movff	ProcessMasterComms@respSerialUS+1,CreateAndSend@packetDestUS+1
  1376  00102E  C0CE  F080         	movff	ProcessMasterComms@recvCmdUC,CreateAndSend@commandUC
  1377  001032  0E00               	movlw	0
  1378  001034  0100               	movlb	0	; () banked
  1379  001036  6F81               	movwf	CreateAndSend@dataLenUC& (0+255),b
  1380  001038  0E00               	movlw	0
  1381  00103A  0100               	movlb	0	; () banked
  1382  00103C  6F82               	movwf	CreateAndSend@dataBuf& (0+255),b
  1383  00103E  0E00               	movlw	0
  1384  001040  0100               	movlb	0	; () banked
  1385  001042  6F83               	movwf	(CreateAndSend@dataBuf+1)& (0+255),b
  1386  001044  ECE2  F012         	call	_CreateAndSend	;wreg free
  1387                           
  1388                           ;mastercomms.c: 94: break;
  1389  001048  0012               	return	
  1390  00104A                     l5969:
  1391                           
  1392                           ;mastercomms.c: 96: ProcessSerialCMD(respSerialUS);
  1393  00104A  C0CC  F086         	movff	ProcessMasterComms@respSerialUS,ProcessSerialCMD@respSerialUS
  1394  00104E  C0CD  F087         	movff	ProcessMasterComms@respSerialUS+1,ProcessSerialCMD@respSerialUS+1
  1395  001052  EC8F  F00F         	call	_ProcessSerialCMD	;wreg free
  1396                           
  1397                           ;mastercomms.c: 97: break;
  1398  001056  0012               	return	
  1399  001058                     l5971:
  1400                           
  1401                           ;mastercomms.c: 99: SetSerialNumber(respSerialUS);
  1402  001058  C0CC  F086         	movff	ProcessMasterComms@respSerialUS,SetSerialNumber@respSerialUS
  1403  00105C  C0CD  F087         	movff	ProcessMasterComms@respSerialUS+1,SetSerialNumber@respSerialUS+1
  1404  001060  EC2E  F00D         	call	_SetSerialNumber	;wreg free
  1405                           
  1406                           ;mastercomms.c: 100: break;
  1407  001064  0012               	return	
  1408  001066                     l5973:
  1409                           
  1410                           ;mastercomms.c: 102: ForceFiringMode(0);
  1411  001066  0E00               	movlw	0
  1412  001068  EC07  F016         	call	_ForceFiringMode
  1413                           
  1414                           ;mastercomms.c: 104: statusFlagsUSLG |= 0b001000000000000000000000;
  1415  00106C  8A38               	bsf	_statusFlagsUSLG+2,5,c	;volatile
  1416                           
  1417                           ;mastercomms.c: 106: statusFlagsUSLG &= ~((unsigned short long) 0b0000000010000000000000
      +                          00);
  1418  00106E  9E37               	bcf	_statusFlagsUSLG+1,7,c	;volatile
  1419                           
  1420                           ;mastercomms.c: 107: LATBbits.LATB3 = 1;
  1421  001070  868A               	bsf	3978,3,c	;volatile
  1422                           
  1423                           ;mastercomms.c: 109: break;
  1424  001072  0012               	return	
  1425  001074                     l814:
  1426                           
  1427                           ; BSR set to: 0
  1428                           ;mastercomms.c: 111: __nop();
  1429  001074  F000               	nop	
  1430                           
  1431                           ;mastercomms.c: 112: ProcessPingCMD(respSerialUS);
  1432  001076  C0CC  F086         	movff	ProcessMasterComms@respSerialUS,ProcessPingCMD@respSerialUS
  1433  00107A  C0CD  F087         	movff	ProcessMasterComms@respSerialUS+1,ProcessPingCMD@respSerialUS+1
  1434  00107E  EC85  F016         	call	_ProcessPingCMD	;wreg free
  1435                           
  1436                           ;mastercomms.c: 121: }
  1437                           
  1438                           ;mastercomms.c: 113: break;
  1439  001082  0012               	return	
  1440  001084                     l5985:
  1441  001084  0100               	movlb	0	; () banked
  1442  001086  51CE               	movf	ProcessMasterComms@recvCmdUC& (0+255),w,b
  1443                           
  1444                           ; Switch size 1, requested type "space"
  1445                           ; Number of cases is 10, Range of values is 0 to 41
  1446                           ; switch strategies available:
  1447                           ; Name         Instructions Cycles
  1448                           ; simple_byte           31    16 (average)
  1449                           ;	Chosen strategy is simple_byte
  1450  001088  0A00               	xorlw	0	; case 0
  1451  00108A  B4D8               	btfsc	status,2,c
  1452  00108C  D7A2               	goto	l5961
  1453  00108E  0A01               	xorlw	1	; case 1
  1454  001090  B4D8               	btfsc	status,2,c
  1455  001092  D79F               	goto	l5961
  1456  001094  0A03               	xorlw	3	; case 2
  1457  001096  B4D8               	btfsc	status,2,c
  1458  001098  D79C               	goto	l5961
  1459  00109A  0A01               	xorlw	1	; case 3
  1460  00109C  B4D8               	btfsc	status,2,c
  1461  00109E  D799               	goto	l5961
  1462  0010A0  0A06               	xorlw	6	; case 5
  1463  0010A2  B4D8               	btfsc	status,2,c
  1464  0010A4  D79F               	goto	l5963
  1465  0010A6  0A03               	xorlw	3	; case 6
  1466  0010A8  B4D8               	btfsc	status,2,c
  1467  0010AA  D7B5               	goto	l5967
  1468  0010AC  0A01               	xorlw	1	; case 7
  1469  0010AE  B4D8               	btfsc	status,2,c
  1470  0010B0  D7CC               	goto	l5969
  1471  0010B2  0A0E               	xorlw	14	; case 9
  1472  0010B4  B4D8               	btfsc	status,2,c
  1473  0010B6  D7D0               	goto	l5971
  1474  0010B8  0A2C               	xorlw	44	; case 37
  1475  0010BA  B4D8               	btfsc	status,2,c
  1476  0010BC  D7D4               	goto	l5973
  1477  0010BE  0A0C               	xorlw	12	; case 41
  1478  0010C0  A4D8               	btfss	status,2,c
  1479                           
  1480                           ; BSR set to: 0
  1481                           ;mastercomms.c: 122: }else{
  1482  0010C2  0012               	return	
  1483  0010C4  D7D7               	goto	l814
  1484  0010C6                     l5987:
  1485                           
  1486                           ; BSR set to: 0
  1487                           ;mastercomms.c: 123: currentPacketNumberUS = PacketReadParamST7540(3);
  1488  0010C6  0E03               	movlw	3
  1489  0010C8  ECB3  F00E         	call	_PacketReadParamST7540
  1490  0010CC  C075  F0C8         	movff	?_PacketReadParamST7540,ProcessMasterComms@currentPacketNumberUS
  1491  0010D0  C076  F0C9         	movff	?_PacketReadParamST7540+1,ProcessMasterComms@currentPacketNumberUS+1
  1492                           
  1493                           ;mastercomms.c: 124: if(UpdatePacketNumber(respSerialUS, currentPacketNumberUS) &&
  1494                           ;mastercomms.c: 125: (masterFlagsUCG & 0b00000001)){
  1495  0010D4  C0CC  F06B         	movff	ProcessMasterComms@respSerialUS,UpdatePacketNumber@serialNumberUS
  1496  0010D8  C0CD  F06C         	movff	ProcessMasterComms@respSerialUS+1,UpdatePacketNumber@serialNumberUS+1
  1497  0010DC  C0C8  F06D         	movff	ProcessMasterComms@currentPacketNumberUS,UpdatePacketNumber@packetNumberS
  1498  0010E0  C0C9  F06E         	movff	ProcessMasterComms@currentPacketNumberUS+1,UpdatePacketNumber@packetNumberS+1
  1499  0010E4  ECB7  F011         	call	_UpdatePacketNumber	;wreg free
  1500  0010E8  0900               	iorlw	0
  1501  0010EA  B4D8               	btfsc	status,2,c
  1502  0010EC  0012               	return	
  1503  0010EE  0100               	movlb	0	; () banked
  1504  0010F0  A1DA               	btfss	_masterFlagsUCG& (0+255),0,b
  1505  0010F2  0012               	return	
  1506                           
  1507                           ; BSR set to: 0
  1508                           ;mastercomms.c: 126: CollisionCheck();
  1509  0010F4  ECB3  F015         	call	_CollisionCheck	;wreg free
  1510                           
  1511                           ;mastercomms.c: 127: RetransmitMessageSt7540();
  1512  0010F8  EC57  F012         	call	_RetransmitMessageSt7540	;wreg free
  1513  0010FC  0012               	return	
  1514  0010FE                     __end_of_ProcessMasterComms:
  1515                           	opt stack 0
  1516                           tblptru	equ	0xFF8
  1517                           postinc0	equ	0xFEE
  1518                           wreg	equ	0xFE8
  1519                           status	equ	0xFD8
  1520                           
  1521 ;; *************** function _UpdatePacketNumber *****************
  1522 ;; Defined at:
  1523 ;;		line 132 in file "mastercomms.c"
  1524 ;; Parameters:    Size  Location     Type
  1525 ;;  serialNumber    2   11[BANK0 ] unsigned short 
  1526 ;;  packetNumber    2   13[BANK0 ] short 
  1527 ;; Auto vars:     Size  Location     Type
  1528 ;;  pastPacketNu    2   20[BANK0 ] short 
  1529 ;; Return value:  Size  Location     Type
  1530 ;;                  1    wreg      unsigned char 
  1531 ;; Registers used:
  1532 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1533 ;; Tracked objects:
  1534 ;;		On entry : 0/0
  1535 ;;		On exit  : 0/0
  1536 ;;		Unchanged: 0/0
  1537 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1538 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1539 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1540 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1541 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1542 ;;Total ram usage:       11 bytes
  1543 ;; Hardware stack levels used:    1
  1544 ;; Hardware stack levels required when called:    9
  1545 ;; This function calls:
  1546 ;;		_GetLastPacketNumber
  1547 ;;		_SavePacketNumber
  1548 ;; This function is called by:
  1549 ;;		_ProcessMasterComms
  1550 ;; This function uses a non-reentrant model
  1551 ;;
  1552                           
  1553                           	psect	text3
  1554  00236E                     __ptext3:
  1555                           	opt stack 0
  1556  00236E                     _UpdatePacketNumber:
  1557                           	opt stack 20
  1558                           
  1559                           ;mastercomms.c: 133: signed short pastPacketNumberS;
  1560                           ;mastercomms.c: 135: pastPacketNumberS = GetLastPacketNumber(serialNumberUS);
  1561                           
  1562                           ;incstack = 0
  1563  00236E  C06B  F060         	movff	UpdatePacketNumber@serialNumberUS,GetLastPacketNumber@srcSerialUS
  1564  002372  C06C  F061         	movff	UpdatePacketNumber@serialNumberUS+1,GetLastPacketNumber@srcSerialUS+1
  1565  002376  EC28  F014         	call	_GetLastPacketNumber	;wreg free
  1566  00237A  C060  F074         	movff	?_GetLastPacketNumber,UpdatePacketNumber@pastPacketNumberS
  1567  00237E  C061  F075         	movff	?_GetLastPacketNumber+1,UpdatePacketNumber@pastPacketNumberS+1
  1568                           
  1569                           ;mastercomms.c: 136: if((packetNumberS > pastPacketNumberS) ||
  1570                           ;mastercomms.c: 137: (packetNumberS < (pastPacketNumberS - 10)) ||
  1571                           ;mastercomms.c: 138: (pastPacketNumberS == (-10-1))){
  1572  002382  0100               	movlb	0	; () banked
  1573  002384  516D               	movf	UpdatePacketNumber@packetNumberS& (0+255),w,b
  1574  002386  0100               	movlb	0	; () banked
  1575  002388  5D74               	subwf	UpdatePacketNumber@pastPacketNumberS& (0+255),w,b
  1576  00238A  0100               	movlb	0	; () banked
  1577  00238C  5175               	movf	(UpdatePacketNumber@pastPacketNumberS+1)& (0+255),w,b
  1578  00238E  0A80               	xorlw	128
  1579  002390  0100               	movlb	0	; () banked
  1580  002392  6F6F               	movwf	??_UpdatePacketNumber& (0+255),b
  1581  002394  0100               	movlb	0	; () banked
  1582  002396  516E               	movf	(UpdatePacketNumber@packetNumberS+1)& (0+255),w,b
  1583  002398  0A80               	xorlw	128
  1584  00239A  0100               	movlb	0	; () banked
  1585  00239C  596F               	subwfb	??_UpdatePacketNumber& (0+255),w,b
  1586  00239E  A0D8               	btfss	status,0,c
  1587  0023A0  D02A               	goto	l5113
  1588                           
  1589                           ; BSR set to: 0
  1590  0023A2  0EF6               	movlw	246
  1591  0023A4  0100               	movlb	0	; () banked
  1592  0023A6  6F6F               	movwf	??_UpdatePacketNumber& (0+255),b
  1593  0023A8  0EFF               	movlw	255
  1594  0023AA  0100               	movlb	0	; () banked
  1595  0023AC  6F70               	movwf	(??_UpdatePacketNumber+1)& (0+255),b
  1596  0023AE  C074  F071         	movff	UpdatePacketNumber@pastPacketNumberS,??_UpdatePacketNumber+2
  1597  0023B2  C075  F072         	movff	UpdatePacketNumber@pastPacketNumberS+1,??_UpdatePacketNumber+3
  1598  0023B6  0100               	movlb	0	; () banked
  1599  0023B8  516F               	movf	??_UpdatePacketNumber& (0+255),w,b
  1600  0023BA  0100               	movlb	0	; () banked
  1601  0023BC  2771               	addwf	(??_UpdatePacketNumber+2)& (0+255),f,b
  1602  0023BE  0100               	movlb	0	; () banked
  1603  0023C0  5170               	movf	(??_UpdatePacketNumber+1)& (0+255),w,b
  1604  0023C2  0100               	movlb	0	; () banked
  1605  0023C4  2372               	addwfc	(??_UpdatePacketNumber+3)& (0+255),f,b
  1606  0023C6  0100               	movlb	0	; () banked
  1607  0023C8  5171               	movf	(??_UpdatePacketNumber+2)& (0+255),w,b
  1608  0023CA  0100               	movlb	0	; () banked
  1609  0023CC  5D6D               	subwf	UpdatePacketNumber@packetNumberS& (0+255),w,b
  1610  0023CE  0100               	movlb	0	; () banked
  1611  0023D0  516E               	movf	(UpdatePacketNumber@packetNumberS+1)& (0+255),w,b
  1612  0023D2  0A80               	xorlw	128
  1613  0023D4  0100               	movlb	0	; () banked
  1614  0023D6  6F73               	movwf	(??_UpdatePacketNumber+4)& (0+255),b
  1615  0023D8  0100               	movlb	0	; () banked
  1616  0023DA  5172               	movf	(??_UpdatePacketNumber+3)& (0+255),w,b
  1617  0023DC  0A80               	xorlw	128
  1618  0023DE  0100               	movlb	0	; () banked
  1619  0023E0  5973               	subwfb	(??_UpdatePacketNumber+4)& (0+255),w,b
  1620  0023E2  A0D8               	btfss	status,0,c
  1621  0023E4  D008               	goto	l5113
  1622                           
  1623                           ; BSR set to: 0
  1624  0023E6  0EF5               	movlw	245
  1625  0023E8  0100               	movlb	0	; () banked
  1626  0023EA  1974               	xorwf	UpdatePacketNumber@pastPacketNumberS& (0+255),w,b
  1627  0023EC  E10E               	bnz	l5119
  1628  0023EE  0100               	movlb	0	; () banked
  1629  0023F0  2975               	incf	(UpdatePacketNumber@pastPacketNumberS+1)& (0+255),w,b
  1630  0023F2  A4D8               	btfss	status,2,c
  1631  0023F4  D00A               	goto	l5119
  1632  0023F6                     l5113:
  1633                           
  1634                           ; BSR set to: 0
  1635                           ;mastercomms.c: 139: SavePacketNumber(serialNumberUS, packetNumberS);
  1636  0023F6  C06B  F065         	movff	UpdatePacketNumber@serialNumberUS,SavePacketNumber@srcSerialUS
  1637  0023FA  C06C  F066         	movff	UpdatePacketNumber@serialNumberUS+1,SavePacketNumber@srcSerialUS+1
  1638  0023FE  C06D  F067         	movff	UpdatePacketNumber@packetNumberS,SavePacketNumber@packetNumberUC
  1639  002402  EC1C  F013         	call	_SavePacketNumber	;wreg free
  1640                           
  1641                           ;mastercomms.c: 140: return 1;
  1642  002406  0E01               	movlw	1
  1643  002408  0012               	return	
  1644  00240A                     l5119:
  1645                           
  1646                           ;mastercomms.c: 141: }
  1647                           ;mastercomms.c: 142: return 0;
  1648  00240A  0E00               	movlw	0
  1649  00240C  0012               	return	
  1650  00240E                     __end_of_UpdatePacketNumber:
  1651                           	opt stack 0
  1652                           tblptru	equ	0xFF8
  1653                           postinc0	equ	0xFEE
  1654                           wreg	equ	0xFE8
  1655                           status	equ	0xFD8
  1656                           
  1657 ;; *************** function _GetLastPacketNumber *****************
  1658 ;; Defined at:
  1659 ;;		line 260 in file "mastercomms.c"
  1660 ;; Parameters:    Size  Location     Type
  1661 ;;  srcSerialUS     2    0[BANK0 ] unsigned short 
  1662 ;; Auto vars:     Size  Location     Type
  1663 ;;  iscCountUC      1    4[BANK0 ] unsigned char 
  1664 ;; Return value:  Size  Location     Type
  1665 ;;                  2    0[BANK0 ] short 
  1666 ;; Registers used:
  1667 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1668 ;; Tracked objects:
  1669 ;;		On entry : 0/0
  1670 ;;		On exit  : 0/0
  1671 ;;		Unchanged: 0/0
  1672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1673 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1674 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1675 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1676 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1677 ;;Total ram usage:        5 bytes
  1678 ;; Hardware stack levels used:    1
  1679 ;; Hardware stack levels required when called:    7
  1680 ;; This function calls:
  1681 ;;		Nothing
  1682 ;; This function is called by:
  1683 ;;		_UpdatePacketNumber
  1684 ;; This function uses a non-reentrant model
  1685 ;;
  1686                           
  1687                           	psect	text4
  1688  002850                     __ptext4:
  1689                           	opt stack 0
  1690  002850                     _GetLastPacketNumber:
  1691                           	opt stack 21
  1692                           
  1693                           ;mastercomms.c: 261: unsigned char iscCountUC;
  1694                           ;mastercomms.c: 263: for(iscCountUC = 0; iscCountUC < 31; iscCountUC++){
  1695                           
  1696                           ;incstack = 0
  1697  002850  0E00               	movlw	0
  1698  002852  0100               	movlb	0	; () banked
  1699  002854  6F64               	movwf	GetLastPacketNumber@iscCountUC& (0+255),b
  1700  002856                     l4545:
  1701                           
  1702                           ; BSR set to: 0
  1703  002856  0E1E               	movlw	30
  1704  002858  0100               	movlb	0	; () banked
  1705  00285A  6564               	cpfsgt	GetLastPacketNumber@iscCountUC& (0+255),b
  1706  00285C  D001               	goto	l4549
  1707  00285E  D023               	goto	l4559
  1708  002860                     l4549:
  1709                           
  1710                           ; BSR set to: 0
  1711                           ;mastercomms.c: 264: if(packetNumbersUSAG[1][iscCountUC] == srcSerialUS)
  1712  002860  0100               	movlb	0	; () banked
  1713  002862  5164               	movf	GetLastPacketNumber@iscCountUC& (0+255),w,b
  1714  002864  0D02               	mullw	2
  1715  002866  0E3E               	movlw	low (_packetNumbersUSAG+62)
  1716  002868  24F3               	addwf	prodl,w,c
  1717  00286A  6ED9               	movwf	fsr2l,c
  1718  00286C  0E04               	movlw	high (_packetNumbersUSAG+62)
  1719  00286E  20F4               	addwfc	prodh,w,c
  1720  002870  6EDA               	movwf	fsr2h,c
  1721  002872  0100               	movlb	0	; () banked
  1722  002874  5160               	movf	GetLastPacketNumber@srcSerialUS& (0+255),w,b
  1723  002876  18DE               	xorwf	postinc2,w,c
  1724  002878  E113               	bnz	l4555
  1725  00287A  0100               	movlb	0	; () banked
  1726  00287C  5161               	movf	(GetLastPacketNumber@srcSerialUS+1)& (0+255),w,b
  1727  00287E  18DE               	xorwf	postinc2,w,c
  1728  002880  A4D8               	btfss	status,2,c
  1729  002882  D00E               	goto	l4555
  1730                           
  1731                           ; BSR set to: 0
  1732                           ;mastercomms.c: 265: return packetNumbersUSAG[0][iscCountUC];
  1733  002884  0100               	movlb	0	; () banked
  1734  002886  5164               	movf	GetLastPacketNumber@iscCountUC& (0+255),w,b
  1735  002888  0D02               	mullw	2
  1736  00288A  0E00               	movlw	low _packetNumbersUSAG
  1737  00288C  24F3               	addwf	prodl,w,c
  1738  00288E  6ED9               	movwf	fsr2l,c
  1739  002890  0E04               	movlw	high _packetNumbersUSAG
  1740  002892  20F4               	addwfc	prodh,w,c
  1741  002894  6EDA               	movwf	fsr2h,c
  1742  002896  CFDE F060          	movff	postinc2,?_GetLastPacketNumber
  1743  00289A  CFDD F061          	movff	postdec2,?_GetLastPacketNumber+1
  1744                           
  1745                           ; BSR set to: 0
  1746  00289E  0012               	return	
  1747  0028A0                     l4555:
  1748                           
  1749                           ; BSR set to: 0
  1750  0028A0  0100               	movlb	0	; () banked
  1751  0028A2  2B64               	incf	GetLastPacketNumber@iscCountUC& (0+255),f,b
  1752  0028A4  D7D8               	goto	l4545
  1753  0028A6                     l4559:
  1754                           
  1755                           ; BSR set to: 0
  1756                           ;mastercomms.c: 266: }
  1757                           ;mastercomms.c: 267: return (-10-1);
  1758  0028A6  0EFF               	movlw	255
  1759  0028A8  0100               	movlb	0	; () banked
  1760  0028AA  6F61               	movwf	(?_GetLastPacketNumber+1)& (0+255),b
  1761  0028AC  0EF5               	movlw	245
  1762  0028AE  6F60               	movwf	?_GetLastPacketNumber& (0+255),b
  1763  0028B0  0012               	return	
  1764  0028B2                     __end_of_GetLastPacketNumber:
  1765                           	opt stack 0
  1766                           tblptru	equ	0xFF8
  1767                           prodh	equ	0xFF4
  1768                           prodl	equ	0xFF3
  1769                           postinc0	equ	0xFEE
  1770                           wreg	equ	0xFE8
  1771                           postinc2	equ	0xFDE
  1772                           postdec2	equ	0xFDD
  1773                           fsr2h	equ	0xFDA
  1774                           fsr2l	equ	0xFD9
  1775                           status	equ	0xFD8
  1776                           
  1777 ;; *************** function _SetSerialNumber *****************
  1778 ;; Defined at:
  1779 ;;		line 161 in file "mastercomms.c"
  1780 ;; Parameters:    Size  Location     Type
  1781 ;;  respSerialUS    2   38[BANK0 ] unsigned short 
  1782 ;; Auto vars:     Size  Location     Type
  1783 ;;  dataBufUSP      2   44[BANK0 ] PTR unsigned short 
  1784 ;;		 -> bufferRXST7540UCAG(75), 
  1785 ;; Return value:  Size  Location     Type
  1786 ;;                  1    wreg      void 
  1787 ;; Registers used:
  1788 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1789 ;; Tracked objects:
  1790 ;;		On entry : 0/0
  1791 ;;		On exit  : 0/0
  1792 ;;		Unchanged: 0/0
  1793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1794 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1795 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1796 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1797 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1798 ;;Total ram usage:        8 bytes
  1799 ;; Hardware stack levels used:    1
  1800 ;; Hardware stack levels required when called:   11
  1801 ;; This function calls:
  1802 ;;		_CreateAndSend
  1803 ;;		_PacketDataST7540
  1804 ;;		_WriteFlashValues
  1805 ;; This function is called by:
  1806 ;;		_ProcessMasterComms
  1807 ;; This function uses a non-reentrant model
  1808 ;;
  1809                           
  1810                           	psect	text5
  1811  001A5C                     __ptext5:
  1812                           	opt stack 0
  1813  001A5C                     _SetSerialNumber:
  1814                           	opt stack 18
  1815                           
  1816                           ;mastercomms.c: 162: unsigned short *dataBufUSP;
  1817                           ;mastercomms.c: 164: if(iscSerialUSG == 0x3FFE){
  1818                           
  1819                           ; BSR set to: 0
  1820                           ;incstack = 0
  1821  001A5C  0EFE               	movlw	254
  1822  001A5E  0100               	movlb	0	; () banked
  1823  001A60  19DC               	xorwf	_iscSerialUSG& (0+255),w,b
  1824  001A62  E16A               	bnz	l5283
  1825  001A64  0E3F               	movlw	63
  1826  001A66  0100               	movlb	0	; () banked
  1827  001A68  19DD               	xorwf	(_iscSerialUSG+1)& (0+255),w,b
  1828  001A6A  A4D8               	btfss	status,2,c
  1829  001A6C  D065               	goto	l5283
  1830                           
  1831                           ; BSR set to: 0
  1832                           ;mastercomms.c: 165: dataBufUSP = (unsigned short *) PacketDataST7540();
  1833  001A6E  ECD4  F017         	call	_PacketDataST7540	;wreg free
  1834  001A72  C060  F08C         	movff	?_PacketDataST7540,SetSerialNumber@dataBufUSP
  1835  001A76  C061  F08D         	movff	?_PacketDataST7540+1,SetSerialNumber@dataBufUSP+1
  1836                           
  1837                           ;mastercomms.c: 166: iscSerialUSG = (dataBufUSP[0] << 8) | (dataBufUSP[0] >> 8);
  1838  001A7A  C08C  FFD9         	movff	SetSerialNumber@dataBufUSP,fsr2l
  1839  001A7E  C08D  FFDA         	movff	SetSerialNumber@dataBufUSP+1,fsr2h
  1840  001A82  CFDE F088          	movff	postinc2,??_SetSerialNumber
  1841  001A86  CFDD F089          	movff	postdec2,??_SetSerialNumber+1
  1842  001A8A  C089  F088         	movff	??_SetSerialNumber+1,??_SetSerialNumber
  1843  001A8E  0100               	movlb	0	; () banked
  1844  001A90  6B89               	clrf	(??_SetSerialNumber+1)& (0+255),b
  1845  001A92  C08C  FFD9         	movff	SetSerialNumber@dataBufUSP,fsr2l
  1846  001A96  C08D  FFDA         	movff	SetSerialNumber@dataBufUSP+1,fsr2h
  1847  001A9A  CFDE F08A          	movff	postinc2,??_SetSerialNumber+2
  1848  001A9E  CFDD F08B          	movff	postdec2,??_SetSerialNumber+3
  1849  001AA2  C08A  F08B         	movff	??_SetSerialNumber+2,??_SetSerialNumber+3
  1850  001AA6  0100               	movlb	0	; () banked
  1851  001AA8  6B8A               	clrf	(??_SetSerialNumber+2)& (0+255),b
  1852  001AAA  0100               	movlb	0	; () banked
  1853  001AAC  5188               	movf	??_SetSerialNumber& (0+255),w,b
  1854  001AAE  0100               	movlb	0	; () banked
  1855  001AB0  118A               	iorwf	(??_SetSerialNumber+2)& (0+255),w,b
  1856  001AB2  0100               	movlb	0	; () banked
  1857  001AB4  6FDC               	movwf	_iscSerialUSG& (0+255),b
  1858  001AB6  0100               	movlb	0	; () banked
  1859  001AB8  5189               	movf	(??_SetSerialNumber+1)& (0+255),w,b
  1860  001ABA  0100               	movlb	0	; () banked
  1861  001ABC  118B               	iorwf	(??_SetSerialNumber+3)& (0+255),w,b
  1862  001ABE  0100               	movlb	0	; () banked
  1863  001AC0  6FDD               	movwf	(_iscSerialUSG+1)& (0+255),b
  1864                           
  1865                           ; BSR set to: 0
  1866                           ;mastercomms.c: 167: if(!iscSerialUSG){
  1867  001AC2  0100               	movlb	0	; () banked
  1868  001AC4  51DC               	movf	_iscSerialUSG& (0+255),w,b
  1869  001AC6  0100               	movlb	0	; () banked
  1870  001AC8  11DD               	iorwf	(_iscSerialUSG+1)& (0+255),w,b
  1871  001ACA  A4D8               	btfss	status,2,c
  1872  001ACC  D01C               	goto	l5279
  1873                           
  1874                           ; BSR set to: 0
  1875                           ;mastercomms.c: 168: iscSerialUSG = 0x3FFE;
  1876  001ACE  0E3F               	movlw	63
  1877  001AD0  0100               	movlb	0	; () banked
  1878  001AD2  6FDD               	movwf	(_iscSerialUSG+1)& (0+255),b
  1879  001AD4  0EFE               	movlw	254
  1880  001AD6  6FDC               	movwf	_iscSerialUSG& (0+255),b
  1881                           
  1882                           ; BSR set to: 0
  1883                           ;mastercomms.c: 169: CreateAndSend(iscSerialUSG, respSerialUS, 0b00001001, 0, 0);
  1884  001AD8  C0DC  F07C         	movff	_iscSerialUSG,CreateAndSend@packetSourceUS
  1885  001ADC  C0DD  F07D         	movff	_iscSerialUSG+1,CreateAndSend@packetSourceUS+1
  1886  001AE0  C086  F07E         	movff	SetSerialNumber@respSerialUS,CreateAndSend@packetDestUS
  1887  001AE4  C087  F07F         	movff	SetSerialNumber@respSerialUS+1,CreateAndSend@packetDestUS+1
  1888  001AE8  0E09               	movlw	9
  1889  001AEA  0100               	movlb	0	; () banked
  1890  001AEC  6F80               	movwf	CreateAndSend@commandUC& (0+255),b
  1891  001AEE  0E00               	movlw	0
  1892  001AF0  0100               	movlb	0	; () banked
  1893  001AF2  6F81               	movwf	CreateAndSend@dataLenUC& (0+255),b
  1894  001AF4  0E00               	movlw	0
  1895  001AF6  0100               	movlb	0	; () banked
  1896  001AF8  6F82               	movwf	CreateAndSend@dataBuf& (0+255),b
  1897  001AFA  0E00               	movlw	0
  1898  001AFC  0100               	movlb	0	; () banked
  1899  001AFE  6F83               	movwf	(CreateAndSend@dataBuf+1)& (0+255),b
  1900  001B00  ECE2  F012         	call	_CreateAndSend	;wreg free
  1901                           
  1902                           ;mastercomms.c: 170: return;
  1903  001B04  0012               	return	
  1904  001B06                     l5279:
  1905                           
  1906                           ;mastercomms.c: 171: }
  1907                           ;mastercomms.c: 172: WriteFlashValues();
  1908  001B06  EC15  F015         	call	_WriteFlashValues	;wreg free
  1909                           
  1910                           ;mastercomms.c: 173: CreateAndSend(iscSerialUSG, respSerialUS, 0b00001001, 2, (char *) &
      +                          iscSerialUSG);
  1911  001B0A  C0DC  F07C         	movff	_iscSerialUSG,CreateAndSend@packetSourceUS
  1912  001B0E  C0DD  F07D         	movff	_iscSerialUSG+1,CreateAndSend@packetSourceUS+1
  1913  001B12  C086  F07E         	movff	SetSerialNumber@respSerialUS,CreateAndSend@packetDestUS
  1914  001B16  C087  F07F         	movff	SetSerialNumber@respSerialUS+1,CreateAndSend@packetDestUS+1
  1915  001B1A  0E09               	movlw	9
  1916  001B1C  0100               	movlb	0	; () banked
  1917  001B1E  6F80               	movwf	CreateAndSend@commandUC& (0+255),b
  1918  001B20  0E02               	movlw	2
  1919  001B22  0100               	movlb	0	; () banked
  1920  001B24  6F81               	movwf	CreateAndSend@dataLenUC& (0+255),b
  1921  001B26  0EDC               	movlw	low _iscSerialUSG
  1922  001B28  0100               	movlb	0	; () banked
  1923  001B2A  6F82               	movwf	CreateAndSend@dataBuf& (0+255),b
  1924  001B2C  0E00               	movlw	high _iscSerialUSG
  1925  001B2E  0100               	movlb	0	; () banked
  1926  001B30  6F83               	movwf	(CreateAndSend@dataBuf+1)& (0+255),b
  1927  001B32  ECE2  F012         	call	_CreateAndSend	;wreg free
  1928                           
  1929                           ;mastercomms.c: 174: }else
  1930  001B36  0012               	return	
  1931  001B38                     l5283:
  1932                           
  1933                           ;mastercomms.c: 175: CreateAndSend(iscSerialUSG, respSerialUS, 0b00001001, 0, 0);
  1934  001B38  C0DC  F07C         	movff	_iscSerialUSG,CreateAndSend@packetSourceUS
  1935  001B3C  C0DD  F07D         	movff	_iscSerialUSG+1,CreateAndSend@packetSourceUS+1
  1936  001B40  C086  F07E         	movff	SetSerialNumber@respSerialUS,CreateAndSend@packetDestUS
  1937  001B44  C087  F07F         	movff	SetSerialNumber@respSerialUS+1,CreateAndSend@packetDestUS+1
  1938  001B48  0E09               	movlw	9
  1939  001B4A  0100               	movlb	0	; () banked
  1940  001B4C  6F80               	movwf	CreateAndSend@commandUC& (0+255),b
  1941  001B4E  0E00               	movlw	0
  1942  001B50  0100               	movlb	0	; () banked
  1943  001B52  6F81               	movwf	CreateAndSend@dataLenUC& (0+255),b
  1944  001B54  0E00               	movlw	0
  1945  001B56  0100               	movlb	0	; () banked
  1946  001B58  6F82               	movwf	CreateAndSend@dataBuf& (0+255),b
  1947  001B5A  0E00               	movlw	0
  1948  001B5C  0100               	movlb	0	; () banked
  1949  001B5E  6F83               	movwf	(CreateAndSend@dataBuf+1)& (0+255),b
  1950  001B60  ECE2  F012         	call	_CreateAndSend	;wreg free
  1951  001B64  0012               	return	
  1952  001B66                     __end_of_SetSerialNumber:
  1953                           	opt stack 0
  1954                           tblptru	equ	0xFF8
  1955                           prodh	equ	0xFF4
  1956                           prodl	equ	0xFF3
  1957                           postinc0	equ	0xFEE
  1958                           wreg	equ	0xFE8
  1959                           postinc2	equ	0xFDE
  1960                           postdec2	equ	0xFDD
  1961                           fsr2h	equ	0xFDA
  1962                           fsr2l	equ	0xFD9
  1963                           status	equ	0xFD8
  1964                           
  1965 ;; *************** function _SetIsolationRelay *****************
  1966 ;; Defined at:
  1967 ;;		line 284 in file "mastercomms.c"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;  relayStateUC    1    wreg     unsigned char 
  1970 ;; Auto vars:     Size  Location     Type
  1971 ;;  relayStateUC    1    0[BANK0 ] unsigned char 
  1972 ;; Return value:  Size  Location     Type
  1973 ;;                  1    wreg      void 
  1974 ;; Registers used:
  1975 ;;		wreg, status,2, status,0
  1976 ;; Tracked objects:
  1977 ;;		On entry : 0/0
  1978 ;;		On exit  : 0/0
  1979 ;;		Unchanged: 0/0
  1980 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1982 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1984 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1985 ;;Total ram usage:        1 bytes
  1986 ;; Hardware stack levels used:    1
  1987 ;; Hardware stack levels required when called:    7
  1988 ;; This function calls:
  1989 ;;		Nothing
  1990 ;; This function is called by:
  1991 ;;		_ProcessMasterComms
  1992 ;; This function uses a non-reentrant model
  1993 ;;
  1994                           
  1995                           	psect	text6
  1996  002DBE                     __ptext6:
  1997                           	opt stack 0
  1998  002DBE                     _SetIsolationRelay:
  1999                           	opt stack 22
  2000                           
  2001                           ;incstack = 0
  2002                           ;SetIsolationRelay@relayStateUC stored from wreg
  2003  002DBE  0100               	movlb	0	; () banked
  2004  002DC0  6F60               	movwf	SetIsolationRelay@relayStateUC& (0+255),b
  2005                           
  2006                           ;mastercomms.c: 285: __nop();
  2007  002DC2  F000               	nop	
  2008                           
  2009                           ;mastercomms.c: 286: if(relayStateUC == 0b00000110){
  2010  002DC4  0E06               	movlw	6
  2011  002DC6  0100               	movlb	0	; () banked
  2012  002DC8  1960               	xorwf	SetIsolationRelay@relayStateUC& (0+255),w,b
  2013  002DCA  A4D8               	btfss	status,2,c
  2014  002DCC  D004               	goto	l5233
  2015                           
  2016                           ; BSR set to: 0
  2017                           ;mastercomms.c: 287: statusFlagsUSLG &= ~0b000000010000000000000000;
  2018  002DCE  9038               	bcf	_statusFlagsUSLG+2,0,c	;volatile
  2019                           
  2020                           ;mastercomms.c: 288: statusFlagsUSLG &= ~0b000100000000000000000000;
  2021  002DD0  9838               	bcf	_statusFlagsUSLG+2,4,c	;volatile
  2022                           
  2023                           ; BSR set to: 0
  2024                           ;mastercomms.c: 289: LATAbits.LATA5 = 1;
  2025  002DD2  8A89               	bsf	3977,5,c	;volatile
  2026                           
  2027                           ;mastercomms.c: 290: }else if(relayStateUC == 0b00000101){
  2028  002DD4  0012               	return	
  2029  002DD6                     l5233:
  2030                           
  2031                           ; BSR set to: 0
  2032  002DD6  0E05               	movlw	5
  2033  002DD8  0100               	movlb	0	; () banked
  2034  002DDA  1960               	xorwf	SetIsolationRelay@relayStateUC& (0+255),w,b
  2035  002DDC  A4D8               	btfss	status,2,c
  2036  002DDE  0012               	return	
  2037                           
  2038                           ; BSR set to: 0
  2039                           ;mastercomms.c: 291: statusFlagsUSLG |= 0b000000010000000000000000;
  2040  002DE0  8038               	bsf	_statusFlagsUSLG+2,0,c	;volatile
  2041                           
  2042                           ;mastercomms.c: 292: statusFlagsUSLG |= 0b000100000000000000000000;
  2043  002DE2  8838               	bsf	_statusFlagsUSLG+2,4,c	;volatile
  2044                           
  2045                           ; BSR set to: 0
  2046                           ;mastercomms.c: 293: LATAbits.LATA5 = 0;
  2047  002DE4  9A89               	bcf	3977,5,c	;volatile
  2048                           
  2049                           ; BSR set to: 0
  2050  002DE6  0012               	return	
  2051  002DE8                     __end_of_SetIsolationRelay:
  2052                           	opt stack 0
  2053                           tblptru	equ	0xFF8
  2054                           prodh	equ	0xFF4
  2055                           prodl	equ	0xFF3
  2056                           postinc0	equ	0xFEE
  2057                           wreg	equ	0xFE8
  2058                           postinc2	equ	0xFDE
  2059                           postdec2	equ	0xFDD
  2060                           fsr2h	equ	0xFDA
  2061                           fsr2l	equ	0xFD9
  2062                           status	equ	0xFD8
  2063                           
  2064 ;; *************** function _ReturnBoosterData *****************
  2065 ;; Defined at:
  2066 ;;		line 297 in file "mastercomms.c"
  2067 ;; Parameters:    Size  Location     Type
  2068 ;;  commandValUC    1    wreg     unsigned char 
  2069 ;;  respSerialUS    2   38[BANK0 ] unsigned short 
  2070 ;; Auto vars:     Size  Location     Type
  2071 ;;  commandValUC    1  128[BANK1 ] unsigned char 
  2072 ;;  allRespUSA     62   62[BANK1 ] unsigned short [31]
  2073 ;;  partRespUSA    62    0[BANK1 ] unsigned short [31]
  2074 ;;  windowCompar    2  124[BANK1 ] unsigned short 
  2075 ;;  boosterCount    1  131[BANK1 ] unsigned char 
  2076 ;;  dataValUC       1  130[BANK1 ] unsigned char 
  2077 ;;  wordCountUC     1  129[BANK1 ] unsigned char 
  2078 ;;  respCountUC     1  127[BANK1 ] unsigned char 
  2079 ;;  iscStatusUC     1  126[BANK1 ] unsigned char 
  2080 ;; Return value:  Size  Location     Type
  2081 ;;                  1    wreg      void 
  2082 ;; Registers used:
  2083 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2084 ;; Tracked objects:
  2085 ;;		On entry : 0/0
  2086 ;;		On exit  : 0/0
  2087 ;;		Unchanged: 0/0
  2088 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2089 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2090 ;;      Locals:         0       0     132       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2091 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2092 ;;      Totals:         0      11     132       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2093 ;;Total ram usage:      143 bytes
  2094 ;; Hardware stack levels used:    1
  2095 ;; Hardware stack levels required when called:   11
  2096 ;; This function calls:
  2097 ;;		_CreateAndSend
  2098 ;; This function is called by:
  2099 ;;		_ProcessMasterComms
  2100 ;; This function uses a non-reentrant model
  2101 ;;
  2102                           
  2103                           	psect	text7
  2104  000752                     __ptext7:
  2105                           	opt stack 0
  2106  000752                     _ReturnBoosterData:
  2107                           	opt stack 18
  2108                           
  2109                           ; BSR set to: 0
  2110                           ;incstack = 0
  2111                           ;ReturnBoosterData@commandValUC stored from wreg
  2112  000752  0101               	movlb	1	; () banked
  2113  000754  6F80               	movwf	ReturnBoosterData@commandValUC& (0+255),b
  2114                           
  2115                           ;mastercomms.c: 298: unsigned char boosterCountUC;
  2116                           ;mastercomms.c: 299: unsigned short allRespUSA[31];
  2117                           ;mastercomms.c: 300: unsigned short partRespUSA[31];
  2118                           ;mastercomms.c: 301: unsigned char iscStatusUC = 0;
  2119  000756  0E00               	movlw	0
  2120  000758  0101               	movlb	1	; () banked
  2121  00075A  6F7E               	movwf	ReturnBoosterData@iscStatusUC& (0+255),b
  2122                           
  2123                           ;mastercomms.c: 302: unsigned char wordCountUC;
  2124                           ;mastercomms.c: 303: unsigned char respCountUC;
  2125                           ;mastercomms.c: 304: unsigned char dataValUC;
  2126                           ;mastercomms.c: 305: unsigned short windowCompareUS = 0;
  2127  00075C  0E00               	movlw	0
  2128  00075E  0101               	movlb	1	; () banked
  2129  000760  6F7D               	movwf	(ReturnBoosterData@windowCompareUS+1)& (0+255),b
  2130  000762  0E00               	movlw	0
  2131  000764  6F7C               	movwf	ReturnBoosterData@windowCompareUS& (0+255),b
  2132                           
  2133                           ; BSR set to: 1
  2134                           ;mastercomms.c: 307: __nop();
  2135  000766  F000               	nop	
  2136                           
  2137                           ;mastercomms.c: 309: if(statusFlagsUSLG & 0b000001000000000000000000){
  2138  000768  A438               	btfss	_statusFlagsUSLG+2,2,c	;volatile
  2139  00076A  D021               	goto	l5143
  2140                           
  2141                           ;mastercomms.c: 310: CreateAndSend(iscSerialUSG, respSerialUS, 0b00001000, 0, 0);
  2142  00076C  C0DC  F07C         	movff	_iscSerialUSG,CreateAndSend@packetSourceUS
  2143  000770  C0DD  F07D         	movff	_iscSerialUSG+1,CreateAndSend@packetSourceUS+1
  2144  000774  C086  F07E         	movff	ReturnBoosterData@respSerialUS,CreateAndSend@packetDestUS
  2145  000778  C087  F07F         	movff	ReturnBoosterData@respSerialUS+1,CreateAndSend@packetDestUS+1
  2146  00077C  0E08               	movlw	8
  2147  00077E  0100               	movlb	0	; () banked
  2148  000780  6F80               	movwf	CreateAndSend@commandUC& (0+255),b
  2149  000782  0E00               	movlw	0
  2150  000784  0100               	movlb	0	; () banked
  2151  000786  6F81               	movwf	CreateAndSend@dataLenUC& (0+255),b
  2152  000788  0E00               	movlw	0
  2153  00078A  0100               	movlb	0	; () banked
  2154  00078C  6F82               	movwf	CreateAndSend@dataBuf& (0+255),b
  2155  00078E  0E00               	movlw	0
  2156  000790  0100               	movlb	0	; () banked
  2157  000792  6F83               	movwf	(CreateAndSend@dataBuf+1)& (0+255),b
  2158  000794  ECE2  F012         	call	_CreateAndSend	;wreg free
  2159                           
  2160                           ;mastercomms.c: 311: return;
  2161  000798  0012               	return	
  2162  00079A                     l5133:
  2163                           
  2164                           ;mastercomms.c: 316: dataValUC = 0;
  2165  00079A  0E00               	movlw	0
  2166  00079C  D005               	goto	L3
  2167  00079E                     l5135:
  2168                           
  2169                           ; BSR set to: 1
  2170                           ;mastercomms.c: 319: dataValUC = 1;
  2171  00079E  0E01               	movlw	1
  2172  0007A0  D003               	goto	L3
  2173  0007A2                     l5137:
  2174                           
  2175                           ; BSR set to: 1
  2176                           ;mastercomms.c: 322: dataValUC = 2;
  2177  0007A2  0E02               	movlw	2
  2178  0007A4  D001               	goto	L3
  2179  0007A6                     l5139:
  2180                           
  2181                           ; BSR set to: 1
  2182                           ;mastercomms.c: 325: dataValUC = 3;
  2183  0007A6  0E03               	movlw	3
  2184  0007A8                     L3:
  2185  0007A8  0101               	movlb	1	; () banked
  2186  0007AA  6F82               	movwf	ReturnBoosterData@dataValUC& (0+255),b
  2187                           
  2188                           ; BSR set to: 1
  2189                           ;mastercomms.c: 327: }
  2190                           
  2191                           ;mastercomms.c: 326: break;
  2192  0007AC  D00E               	goto	l5145
  2193  0007AE                     l5143:
  2194  0007AE  0101               	movlb	1	; () banked
  2195  0007B0  5180               	movf	ReturnBoosterData@commandValUC& (0+255),w,b
  2196                           
  2197                           ; Switch size 1, requested type "space"
  2198                           ; Number of cases is 4, Range of values is 0 to 3
  2199                           ; switch strategies available:
  2200                           ; Name         Instructions Cycles
  2201                           ; simple_byte           13     7 (average)
  2202                           ;	Chosen strategy is simple_byte
  2203  0007B2  0A00               	xorlw	0	; case 0
  2204  0007B4  B4D8               	btfsc	status,2,c
  2205  0007B6  D7F1               	goto	l5133
  2206  0007B8  0A01               	xorlw	1	; case 1
  2207  0007BA  B4D8               	btfsc	status,2,c
  2208  0007BC  D7F0               	goto	l5135
  2209  0007BE  0A03               	xorlw	3	; case 2
  2210  0007C0  B4D8               	btfsc	status,2,c
  2211  0007C2  D7EF               	goto	l5137
  2212  0007C4  0A01               	xorlw	1	; case 3
  2213  0007C6  B4D8               	btfsc	status,2,c
  2214  0007C8  D7EE               	goto	l5139
  2215  0007CA                     l5145:
  2216                           
  2217                           ; BSR set to: 1
  2218                           ;mastercomms.c: 329: for(boosterCountUC = 0; boosterCountUC < 31; boosterCountUC++){
  2219  0007CA  0E00               	movlw	0
  2220  0007CC  0101               	movlb	1	; () banked
  2221  0007CE  6F83               	movwf	ReturnBoosterData@boosterCountUC& (0+255),b
  2222  0007D0                     l5147:
  2223                           
  2224                           ; BSR set to: 1
  2225  0007D0  0E1E               	movlw	30
  2226  0007D2  0101               	movlb	1	; () banked
  2227  0007D4  6583               	cpfsgt	ReturnBoosterData@boosterCountUC& (0+255),b
  2228  0007D6  D001               	goto	l5151
  2229  0007D8  D01D               	goto	l5157
  2230  0007DA                     l5151:
  2231                           
  2232                           ; BSR set to: 1
  2233                           ;mastercomms.c: 330: allRespUSA[boosterCountUC] = 0;
  2234  0007DA  0101               	movlb	1	; () banked
  2235  0007DC  5183               	movf	ReturnBoosterData@boosterCountUC& (0+255),w,b
  2236  0007DE  0D02               	mullw	2
  2237  0007E0  0E3E               	movlw	low ReturnBoosterData@allRespUSA
  2238  0007E2  24F3               	addwf	prodl,w,c
  2239  0007E4  6ED9               	movwf	fsr2l,c
  2240  0007E6  0E01               	movlw	high ReturnBoosterData@allRespUSA
  2241  0007E8  20F4               	addwfc	prodh,w,c
  2242  0007EA  6EDA               	movwf	fsr2h,c
  2243  0007EC  0E00               	movlw	0
  2244  0007EE  6EDE               	movwf	postinc2,c
  2245  0007F0  0E00               	movlw	0
  2246  0007F2  6EDD               	movwf	postdec2,c
  2247                           
  2248                           ;mastercomms.c: 331: partRespUSA[boosterCountUC] = 0;
  2249  0007F4  0101               	movlb	1	; () banked
  2250  0007F6  5183               	movf	ReturnBoosterData@boosterCountUC& (0+255),w,b
  2251  0007F8  0D02               	mullw	2
  2252  0007FA  0E00               	movlw	low ReturnBoosterData@partRespUSA
  2253  0007FC  24F3               	addwf	prodl,w,c
  2254  0007FE  6ED9               	movwf	fsr2l,c
  2255  000800  0E01               	movlw	high ReturnBoosterData@partRespUSA
  2256  000802  20F4               	addwfc	prodh,w,c
  2257  000804  6EDA               	movwf	fsr2h,c
  2258  000806  0E00               	movlw	0
  2259  000808  6EDE               	movwf	postinc2,c
  2260  00080A  0E00               	movlw	0
  2261  00080C  6EDD               	movwf	postdec2,c
  2262                           
  2263                           ; BSR set to: 1
  2264  00080E  0101               	movlb	1	; () banked
  2265  000810  2B83               	incf	ReturnBoosterData@boosterCountUC& (0+255),f,b
  2266  000812  D7DE               	goto	l5147
  2267  000814                     l5157:
  2268                           
  2269                           ; BSR set to: 1
  2270                           ;mastercomms.c: 332: }
  2271                           ;mastercomms.c: 334: allRespUSA[0] = 0b0100000000000000;
  2272  000814  0E40               	movlw	64
  2273  000816  0101               	movlb	1	; () banked
  2274  000818  6F3F               	movwf	(ReturnBoosterData@allRespUSA+1)& (0+255),b
  2275  00081A  0E00               	movlw	0
  2276  00081C  6F3E               	movwf	ReturnBoosterData@allRespUSA& (0+255),b
  2277                           
  2278                           ;mastercomms.c: 335: if(dataValUC == 0){
  2279  00081E  0101               	movlb	1	; () banked
  2280  000820  5182               	movf	ReturnBoosterData@dataValUC& (0+255),w,b
  2281  000822  0101               	movlb	1	; () banked
  2282  000824  A4D8               	btfss	status,2,c
  2283  000826  D014               	goto	l5177
  2284                           
  2285                           ; BSR set to: 1
  2286                           ;mastercomms.c: 336: if(statusFlagsUSLG & 0b000000000000000000100000)
  2287  000828  AA36               	btfss	_statusFlagsUSLG,5,c	;volatile
  2288  00082A  D002               	goto	l5163
  2289                           
  2290                           ; BSR set to: 1
  2291                           ;mastercomms.c: 337: iscStatusUC |= 0b10000000;
  2292  00082C  0101               	movlb	1	; () banked
  2293  00082E  8F7E               	bsf	ReturnBoosterData@iscStatusUC& (0+255),7,b
  2294  000830                     l5163:
  2295                           
  2296                           ; BSR set to: 1
  2297                           ;mastercomms.c: 338: if(statusFlagsUSLG & 0b000000010000000000000000)
  2298  000830  A038               	btfss	_statusFlagsUSLG+2,0,c	;volatile
  2299  000832  D002               	goto	l5167
  2300                           
  2301                           ; BSR set to: 1
  2302                           ;mastercomms.c: 339: iscStatusUC |= 0b01000000;
  2303  000834  0101               	movlb	1	; () banked
  2304  000836  8D7E               	bsf	ReturnBoosterData@iscStatusUC& (0+255),6,b
  2305  000838                     l5167:
  2306                           
  2307                           ; BSR set to: 1
  2308                           ;mastercomms.c: 342: if(statusFlagsUSLG & 0b000000000000000001000000)
  2309  000838  AC36               	btfss	_statusFlagsUSLG,6,c	;volatile
  2310  00083A  D002               	goto	l5171
  2311                           
  2312                           ; BSR set to: 1
  2313                           ;mastercomms.c: 343: iscStatusUC |= 0b00010000;
  2314  00083C  0101               	movlb	1	; () banked
  2315  00083E  897E               	bsf	ReturnBoosterData@iscStatusUC& (0+255),4,b
  2316  000840                     l5171:
  2317                           
  2318                           ; BSR set to: 1
  2319                           ;mastercomms.c: 344: if(statusFlagsUSLG & 0b000000000000000000010000)
  2320  000840  A836               	btfss	_statusFlagsUSLG,4,c	;volatile
  2321  000842  D002               	goto	l5175
  2322                           
  2323                           ; BSR set to: 1
  2324                           ;mastercomms.c: 345: iscStatusUC |= 0b00001000;
  2325  000844  0101               	movlb	1	; () banked
  2326  000846  877E               	bsf	ReturnBoosterData@iscStatusUC& (0+255),3,b
  2327  000848                     l5175:
  2328                           
  2329                           ; BSR set to: 1
  2330                           ;mastercomms.c: 346: allRespUSA[0] |= iscStatusUC;
  2331  000848  0101               	movlb	1	; () banked
  2332  00084A  517E               	movf	ReturnBoosterData@iscStatusUC& (0+255),w,b
  2333  00084C  0101               	movlb	1	; () banked
  2334  00084E  133E               	iorwf	ReturnBoosterData@allRespUSA& (0+255),f,b
  2335  000850                     l5177:
  2336                           
  2337                           ; BSR set to: 1
  2338                           ;mastercomms.c: 347: }
  2339                           ;mastercomms.c: 349: for(boosterCountUC = 0, wordCountUC = 1; boosterCountUC < 30; boost
      +                          erCountUC++){
  2340  000850  0E00               	movlw	0
  2341  000852  0101               	movlb	1	; () banked
  2342  000854  6F83               	movwf	ReturnBoosterData@boosterCountUC& (0+255),b
  2343                           
  2344                           ; BSR set to: 1
  2345  000856  0E01               	movlw	1
  2346  000858  0101               	movlb	1	; () banked
  2347  00085A  6F81               	movwf	ReturnBoosterData@wordCountUC& (0+255),b
  2348  00085C                     l5181:
  2349                           
  2350                           ; BSR set to: 1
  2351  00085C  0E1D               	movlw	29
  2352  00085E  0101               	movlb	1	; () banked
  2353  000860  6583               	cpfsgt	ReturnBoosterData@boosterCountUC& (0+255),b
  2354  000862  D001               	goto	l5185
  2355  000864  D063               	goto	l912
  2356  000866                     l5185:
  2357                           
  2358                           ; BSR set to: 1
  2359                           ;mastercomms.c: 350: if(boosterCommsDataSerial[boosterCountUC]){
  2360  000866  0101               	movlb	1	; () banked
  2361  000868  5183               	movf	ReturnBoosterData@boosterCountUC& (0+255),w,b
  2362  00086A  0D02               	mullw	2
  2363  00086C  0E84               	movlw	low _boosterCommsDataSerial
  2364  00086E  24F3               	addwf	prodl,w,c
  2365  000870  6ED9               	movwf	fsr2l,c
  2366  000872  0E01               	movlw	high _boosterCommsDataSerial
  2367  000874  20F4               	addwfc	prodh,w,c
  2368  000876  6EDA               	movwf	fsr2h,c
  2369  000878  50DE               	movf	postinc2,w,c
  2370  00087A  10DE               	iorwf	postinc2,w,c
  2371  00087C  B4D8               	btfsc	status,2,c
  2372  00087E  D053               	goto	l5191
  2373                           
  2374                           ; BSR set to: 1
  2375                           ;mastercomms.c: 351: allRespUSA[wordCountUC++] = 0b0010000000000000 |
  2376                           ;mastercomms.c: 352: ((unsigned short) (boosterCountUC+1) << 8) |
  2377                           ;mastercomms.c: 353: boosterCommsData[dataValUC][boosterCountUC];
  2378  000880  0E00               	movlw	0
  2379  000882  0100               	movlb	0	; () banked
  2380  000884  6F88               	movwf	??_ReturnBoosterData& (0+255),b
  2381  000886  0E20               	movlw	32
  2382  000888  0100               	movlb	0	; () banked
  2383  00088A  6F89               	movwf	(??_ReturnBoosterData+1)& (0+255),b
  2384  00088C  0E00               	movlw	0
  2385  00088E  0100               	movlb	0	; () banked
  2386  000890  6F8A               	movwf	(??_ReturnBoosterData+2)& (0+255),b
  2387  000892  0E01               	movlw	1
  2388  000894  0100               	movlb	0	; () banked
  2389  000896  6F8B               	movwf	(??_ReturnBoosterData+3)& (0+255),b
  2390  000898  0101               	movlb	1	; () banked
  2391  00089A  5183               	movf	ReturnBoosterData@boosterCountUC& (0+255),w,b
  2392  00089C  0100               	movlb	0	; () banked
  2393  00089E  6F8D               	movwf	(??_ReturnBoosterData+5)& (0+255),b
  2394  0008A0  6B8C               	clrf	(??_ReturnBoosterData+4)& (0+255),b
  2395  0008A2  0100               	movlb	0	; () banked
  2396  0008A4  518A               	movf	(??_ReturnBoosterData+2)& (0+255),w,b
  2397  0008A6  0100               	movlb	0	; () banked
  2398  0008A8  278C               	addwf	(??_ReturnBoosterData+4)& (0+255),f,b
  2399  0008AA  0100               	movlb	0	; () banked
  2400  0008AC  518B               	movf	(??_ReturnBoosterData+3)& (0+255),w,b
  2401  0008AE  0100               	movlb	0	; () banked
  2402  0008B0  238D               	addwfc	(??_ReturnBoosterData+5)& (0+255),f,b
  2403  0008B2  0101               	movlb	1	; () banked
  2404  0008B4  5182               	movf	ReturnBoosterData@dataValUC& (0+255),w,b
  2405  0008B6  0D1E               	mullw	30
  2406  0008B8  0E00               	movlw	low _boosterCommsData
  2407  0008BA  0100               	movlb	0	; () banked
  2408  0008BC  6F8E               	movwf	(??_ReturnBoosterData+6)& (0+255),b
  2409  0008BE  0E03               	movlw	high _boosterCommsData
  2410  0008C0  0100               	movlb	0	; () banked
  2411  0008C2  6F8F               	movwf	(??_ReturnBoosterData+7)& (0+255),b
  2412  0008C4  50F3               	movf	prodl,w,c
  2413  0008C6  0100               	movlb	0	; () banked
  2414  0008C8  278E               	addwf	(??_ReturnBoosterData+6)& (0+255),f,b
  2415  0008CA  50F4               	movf	prodh,w,c
  2416  0008CC  0100               	movlb	0	; () banked
  2417  0008CE  238F               	addwfc	(??_ReturnBoosterData+7)& (0+255),f,b
  2418  0008D0  0101               	movlb	1	; () banked
  2419  0008D2  5183               	movf	ReturnBoosterData@boosterCountUC& (0+255),w,b
  2420  0008D4  0D01               	mullw	1
  2421  0008D6  50F3               	movf	prodl,w,c
  2422  0008D8  0100               	movlb	0	; () banked
  2423  0008DA  258E               	addwf	(??_ReturnBoosterData+6)& (0+255),w,b
  2424  0008DC  6ED9               	movwf	fsr2l,c
  2425  0008DE  50F4               	movf	prodh,w,c
  2426  0008E0  0100               	movlb	0	; () banked
  2427  0008E2  218F               	addwfc	(??_ReturnBoosterData+7)& (0+255),w,b
  2428  0008E4  6EDA               	movwf	fsr2h,c
  2429  0008E6  50DF               	movf	indf2,w,c
  2430  0008E8  0100               	movlb	0	; () banked
  2431  0008EA  6F90               	movwf	(??_ReturnBoosterData+8)& (0+255),b
  2432  0008EC  0100               	movlb	0	; () banked
  2433  0008EE  5190               	movf	(??_ReturnBoosterData+8)& (0+255),w,b
  2434  0008F0  0100               	movlb	0	; () banked
  2435  0008F2  138C               	iorwf	(??_ReturnBoosterData+4)& (0+255),f,b
  2436  0008F4  0E00               	movlw	0
  2437  0008F6  138D               	iorwf	(??_ReturnBoosterData+5)& (0+255),f,b
  2438  0008F8  0100               	movlb	0	; () banked
  2439  0008FA  5188               	movf	??_ReturnBoosterData& (0+255),w,b
  2440  0008FC  0100               	movlb	0	; () banked
  2441  0008FE  138C               	iorwf	(??_ReturnBoosterData+4)& (0+255),f,b
  2442  000900  0100               	movlb	0	; () banked
  2443  000902  5189               	movf	(??_ReturnBoosterData+1)& (0+255),w,b
  2444  000904  0100               	movlb	0	; () banked
  2445  000906  138D               	iorwf	(??_ReturnBoosterData+5)& (0+255),f,b
  2446  000908  0101               	movlb	1	; () banked
  2447  00090A  5181               	movf	ReturnBoosterData@wordCountUC& (0+255),w,b
  2448  00090C  0D02               	mullw	2
  2449  00090E  0E3E               	movlw	low ReturnBoosterData@allRespUSA
  2450  000910  24F3               	addwf	prodl,w,c
  2451  000912  6ED9               	movwf	fsr2l,c
  2452  000914  0E01               	movlw	high ReturnBoosterData@allRespUSA
  2453  000916  20F4               	addwfc	prodh,w,c
  2454  000918  6EDA               	movwf	fsr2h,c
  2455  00091A  C08C  FFDE         	movff	??_ReturnBoosterData+4,postinc2
  2456  00091E  C08D  FFDD         	movff	??_ReturnBoosterData+5,postdec2
  2457                           
  2458                           ; BSR set to: 1
  2459  000922  0101               	movlb	1	; () banked
  2460  000924  2B81               	incf	ReturnBoosterData@wordCountUC& (0+255),f,b
  2461  000926                     l5191:
  2462                           
  2463                           ; BSR set to: 1
  2464  000926  0101               	movlb	1	; () banked
  2465  000928  2B83               	incf	ReturnBoosterData@boosterCountUC& (0+255),f,b
  2466  00092A  D798               	goto	l5181
  2467  00092C                     l912:
  2468                           
  2469                           ; BSR set to: 1
  2470                           ;mastercomms.c: 354: }
  2471                           ;mastercomms.c: 355: }
  2472                           ;mastercomms.c: 357: __nop();
  2473  00092C  F000               	nop	
  2474                           
  2475                           ;mastercomms.c: 359: if(masterFlagsUCG & 0b00000100){
  2476  00092E  0100               	movlb	0	; () banked
  2477  000930  A5DA               	btfss	_masterFlagsUCG& (0+255),2,b
  2478  000932  D01A               	goto	l5199
  2479                           
  2480                           ; BSR set to: 0
  2481                           ;mastercomms.c: 360: commandValUC |= 0b01000000;
  2482  000934  0101               	movlb	1	; () banked
  2483  000936  8D80               	bsf	ReturnBoosterData@commandValUC& (0+255),6,b
  2484                           
  2485                           ; BSR set to: 1
  2486                           ;mastercomms.c: 361: CreateAndSend(iscSerialUSG, respSerialUS, commandValUC, wordCountUC
      +                           * 2, (char *) allRespUSA);
  2487  000938  C0DC  F07C         	movff	_iscSerialUSG,CreateAndSend@packetSourceUS
  2488  00093C  C0DD  F07D         	movff	_iscSerialUSG+1,CreateAndSend@packetSourceUS+1
  2489  000940  C086  F07E         	movff	ReturnBoosterData@respSerialUS,CreateAndSend@packetDestUS
  2490  000944  C087  F07F         	movff	ReturnBoosterData@respSerialUS+1,CreateAndSend@packetDestUS+1
  2491  000948  C180  F080         	movff	ReturnBoosterData@commandValUC,CreateAndSend@commandUC
  2492  00094C  0101               	movlb	1	; () banked
  2493  00094E  5181               	movf	ReturnBoosterData@wordCountUC& (0+255),w,b
  2494  000950  0D02               	mullw	2
  2495  000952  CFF3 F081          	movff	prodl,CreateAndSend@dataLenUC
  2496  000956  0E3E               	movlw	low ReturnBoosterData@allRespUSA
  2497  000958  0100               	movlb	0	; () banked
  2498  00095A  6F82               	movwf	CreateAndSend@dataBuf& (0+255),b
  2499  00095C  0E01               	movlw	high ReturnBoosterData@allRespUSA
  2500  00095E  0100               	movlb	0	; () banked
  2501  000960  6F83               	movwf	(CreateAndSend@dataBuf+1)& (0+255),b
  2502  000962  ECE2  F012         	call	_CreateAndSend	;wreg free
  2503                           
  2504                           ;mastercomms.c: 362: }else{
  2505  000966  D0BF               	goto	l5217
  2506  000968                     l5199:
  2507                           
  2508                           ;mastercomms.c: 363: if(commandValUC != 0b00000000)
  2509  000968  0101               	movlb	1	; () banked
  2510  00096A  5180               	movf	ReturnBoosterData@commandValUC& (0+255),w,b
  2511  00096C  0101               	movlb	1	; () banked
  2512  00096E  B4D8               	btfsc	status,2,c
  2513  000970  D005               	goto	l916
  2514                           
  2515                           ; BSR set to: 1
  2516                           ;mastercomms.c: 364: windowCompareUS = 10;
  2517  000972  0E00               	movlw	0
  2518  000974  0101               	movlb	1	; () banked
  2519  000976  6F7D               	movwf	(ReturnBoosterData@windowCompareUS+1)& (0+255),b
  2520  000978  0E0A               	movlw	10
  2521  00097A  6F7C               	movwf	ReturnBoosterData@windowCompareUS& (0+255),b
  2522  00097C                     l916:
  2523                           
  2524                           ; BSR set to: 1
  2525                           ;mastercomms.c: 365: for(boosterCountUC = 0, respCountUC = 0; boosterCountUC < wordCount
      +                          UC; boosterCountUC++){
  2526  00097C  0E00               	movlw	0
  2527  00097E  0101               	movlb	1	; () banked
  2528  000980  6F83               	movwf	ReturnBoosterData@boosterCountUC& (0+255),b
  2529  000982  0E00               	movlw	0
  2530  000984  0101               	movlb	1	; () banked
  2531  000986  6F7F               	movwf	ReturnBoosterData@respCountUC& (0+255),b
  2532  000988  D091               	goto	l5213
  2533  00098A                     l5203:
  2534                           
  2535                           ; BSR set to: 1
  2536                           ;mastercomms.c: 366: if((pastBoosterValuesUSAG[dataValUC][boosterCountUC] < (allRespUSA[
      +                          boosterCountUC] - windowCompareUS)) ||
  2537                           ;mastercomms.c: 367: (pastBoosterValuesUSAG[dataValUC][boosterCountUC] > (allRespUSA[boo
      +                          sterCountUC] + windowCompareUS))){
  2538  00098A  0101               	movlb	1	; () banked
  2539  00098C  5183               	movf	ReturnBoosterData@boosterCountUC& (0+255),w,b
  2540  00098E  0D02               	mullw	2
  2541  000990  0E3E               	movlw	low ReturnBoosterData@allRespUSA
  2542  000992  24F3               	addwf	prodl,w,c
  2543  000994  6ED9               	movwf	fsr2l,c
  2544  000996  0E01               	movlw	high ReturnBoosterData@allRespUSA
  2545  000998  20F4               	addwfc	prodh,w,c
  2546  00099A  6EDA               	movwf	fsr2h,c
  2547  00099C  CFDE F088          	movff	postinc2,??_ReturnBoosterData
  2548  0009A0  CFDD F089          	movff	postdec2,??_ReturnBoosterData+1
  2549  0009A4  C17C  F08A         	movff	ReturnBoosterData@windowCompareUS,??_ReturnBoosterData+2
  2550  0009A8  C17D  F08B         	movff	ReturnBoosterData@windowCompareUS+1,??_ReturnBoosterData+3
  2551  0009AC  0100               	movlb	0	; () banked
  2552  0009AE  1F8A               	comf	(??_ReturnBoosterData+2)& (0+255),f,b
  2553  0009B0  1F8B               	comf	(??_ReturnBoosterData+3)& (0+255),f,b
  2554  0009B2  4B8A               	infsnz	(??_ReturnBoosterData+2)& (0+255),f,b
  2555  0009B4  2B8B               	incf	(??_ReturnBoosterData+3)& (0+255),f,b
  2556  0009B6  0100               	movlb	0	; () banked
  2557  0009B8  5188               	movf	??_ReturnBoosterData& (0+255),w,b
  2558  0009BA  0100               	movlb	0	; () banked
  2559  0009BC  278A               	addwf	(??_ReturnBoosterData+2)& (0+255),f,b
  2560  0009BE  0100               	movlb	0	; () banked
  2561  0009C0  5189               	movf	(??_ReturnBoosterData+1)& (0+255),w,b
  2562  0009C2  0100               	movlb	0	; () banked
  2563  0009C4  238B               	addwfc	(??_ReturnBoosterData+3)& (0+255),f,b
  2564  0009C6  0101               	movlb	1	; () banked
  2565  0009C8  5182               	movf	ReturnBoosterData@dataValUC& (0+255),w,b
  2566  0009CA  0D3E               	mullw	62
  2567  0009CC  0E00               	movlw	low _pastBoosterValuesUSAG
  2568  0009CE  0100               	movlb	0	; () banked
  2569  0009D0  6F8C               	movwf	(??_ReturnBoosterData+4)& (0+255),b
  2570  0009D2  0E05               	movlw	high _pastBoosterValuesUSAG
  2571  0009D4  0100               	movlb	0	; () banked
  2572  0009D6  6F8D               	movwf	(??_ReturnBoosterData+5)& (0+255),b
  2573  0009D8  50F3               	movf	prodl,w,c
  2574  0009DA  0100               	movlb	0	; () banked
  2575  0009DC  278C               	addwf	(??_ReturnBoosterData+4)& (0+255),f,b
  2576  0009DE  50F4               	movf	prodh,w,c
  2577  0009E0  0100               	movlb	0	; () banked
  2578  0009E2  238D               	addwfc	(??_ReturnBoosterData+5)& (0+255),f,b
  2579  0009E4  0101               	movlb	1	; () banked
  2580  0009E6  5183               	movf	ReturnBoosterData@boosterCountUC& (0+255),w,b
  2581  0009E8  0D02               	mullw	2
  2582  0009EA  50F3               	movf	prodl,w,c
  2583  0009EC  0100               	movlb	0	; () banked
  2584  0009EE  258C               	addwf	(??_ReturnBoosterData+4)& (0+255),w,b
  2585  0009F0  6ED9               	movwf	fsr2l,c
  2586  0009F2  50F4               	movf	prodh,w,c
  2587  0009F4  0100               	movlb	0	; () banked
  2588  0009F6  218D               	addwfc	(??_ReturnBoosterData+5)& (0+255),w,b
  2589  0009F8  6EDA               	movwf	fsr2h,c
  2590  0009FA  0100               	movlb	0	; () banked
  2591  0009FC  518A               	movf	(??_ReturnBoosterData+2)& (0+255),w,b
  2592  0009FE  5CDE               	subwf	postinc2,w,c
  2593  000A00  0100               	movlb	0	; () banked
  2594  000A02  518B               	movf	(??_ReturnBoosterData+3)& (0+255),w,b
  2595  000A04  58DE               	subwfb	postinc2,w,c
  2596  000A06  A0D8               	btfss	status,0,c
  2597  000A08  D037               	goto	l5207
  2598                           
  2599                           ; BSR set to: 0
  2600  000A0A  0101               	movlb	1	; () banked
  2601  000A0C  5182               	movf	ReturnBoosterData@dataValUC& (0+255),w,b
  2602  000A0E  0D3E               	mullw	62
  2603  000A10  0E00               	movlw	low _pastBoosterValuesUSAG
  2604  000A12  0100               	movlb	0	; () banked
  2605  000A14  6F88               	movwf	??_ReturnBoosterData& (0+255),b
  2606  000A16  0E05               	movlw	high _pastBoosterValuesUSAG
  2607  000A18  0100               	movlb	0	; () banked
  2608  000A1A  6F89               	movwf	(??_ReturnBoosterData+1)& (0+255),b
  2609  000A1C  50F3               	movf	prodl,w,c
  2610  000A1E  0100               	movlb	0	; () banked
  2611  000A20  2788               	addwf	??_ReturnBoosterData& (0+255),f,b
  2612  000A22  50F4               	movf	prodh,w,c
  2613  000A24  0100               	movlb	0	; () banked
  2614  000A26  2389               	addwfc	(??_ReturnBoosterData+1)& (0+255),f,b
  2615  000A28  0101               	movlb	1	; () banked
  2616  000A2A  5183               	movf	ReturnBoosterData@boosterCountUC& (0+255),w,b
  2617  000A2C  0D02               	mullw	2
  2618  000A2E  50F3               	movf	prodl,w,c
  2619  000A30  0100               	movlb	0	; () banked
  2620  000A32  2588               	addwf	??_ReturnBoosterData& (0+255),w,b
  2621  000A34  6ED9               	movwf	fsr2l,c
  2622  000A36  50F4               	movf	prodh,w,c
  2623  000A38  0100               	movlb	0	; () banked
  2624  000A3A  2189               	addwfc	(??_ReturnBoosterData+1)& (0+255),w,b
  2625  000A3C  6EDA               	movwf	fsr2h,c
  2626  000A3E  0101               	movlb	1	; () banked
  2627  000A40  5183               	movf	ReturnBoosterData@boosterCountUC& (0+255),w,b
  2628  000A42  0D02               	mullw	2
  2629  000A44  0E3E               	movlw	low ReturnBoosterData@allRespUSA
  2630  000A46  24F3               	addwf	prodl,w,c
  2631  000A48  6EE1               	movwf	fsr1l,c
  2632  000A4A  0E01               	movlw	high ReturnBoosterData@allRespUSA
  2633  000A4C  20F4               	addwfc	prodh,w,c
  2634  000A4E  6EE2               	movwf	fsr1h,c
  2635  000A50  CFE6 F08C          	movff	postinc1,??_ReturnBoosterData+4
  2636  000A54  CFE5 F08D          	movff	postdec1,??_ReturnBoosterData+5
  2637  000A58  0101               	movlb	1	; () banked
  2638  000A5A  517C               	movf	ReturnBoosterData@windowCompareUS& (0+255),w,b
  2639  000A5C  0100               	movlb	0	; () banked
  2640  000A5E  278C               	addwf	(??_ReturnBoosterData+4)& (0+255),f,b
  2641  000A60  0101               	movlb	1	; () banked
  2642  000A62  517D               	movf	(ReturnBoosterData@windowCompareUS+1)& (0+255),w,b
  2643  000A64  0100               	movlb	0	; () banked
  2644  000A66  238D               	addwfc	(??_ReturnBoosterData+5)& (0+255),f,b
  2645  000A68  50DE               	movf	postinc2,w,c
  2646  000A6A  0100               	movlb	0	; () banked
  2647  000A6C  5D8C               	subwf	(??_ReturnBoosterData+4)& (0+255),w,b
  2648  000A6E  50DE               	movf	postinc2,w,c
  2649  000A70  0100               	movlb	0	; () banked
  2650  000A72  598D               	subwfb	(??_ReturnBoosterData+5)& (0+255),w,b
  2651  000A74  B0D8               	btfsc	status,0,c
  2652  000A76  D018               	goto	l5211
  2653  000A78                     l5207:
  2654                           
  2655                           ; BSR set to: 0
  2656                           ;mastercomms.c: 368: partRespUSA[respCountUC++] = allRespUSA[boosterCountUC];
  2657  000A78  0101               	movlb	1	; () banked
  2658  000A7A  5183               	movf	ReturnBoosterData@boosterCountUC& (0+255),w,b
  2659  000A7C  0D02               	mullw	2
  2660  000A7E  0E3E               	movlw	low ReturnBoosterData@allRespUSA
  2661  000A80  24F3               	addwf	prodl,w,c
  2662  000A82  6ED9               	movwf	fsr2l,c
  2663  000A84  0E01               	movlw	high ReturnBoosterData@allRespUSA
  2664  000A86  20F4               	addwfc	prodh,w,c
  2665  000A88  6EDA               	movwf	fsr2h,c
  2666  000A8A  0101               	movlb	1	; () banked
  2667  000A8C  517F               	movf	ReturnBoosterData@respCountUC& (0+255),w,b
  2668  000A8E  0D02               	mullw	2
  2669  000A90  0E00               	movlw	low ReturnBoosterData@partRespUSA
  2670  000A92  24F3               	addwf	prodl,w,c
  2671  000A94  6EE1               	movwf	fsr1l,c
  2672  000A96  0E01               	movlw	high ReturnBoosterData@partRespUSA
  2673  000A98  20F4               	addwfc	prodh,w,c
  2674  000A9A  6EE2               	movwf	fsr1h,c
  2675  000A9C  CFDE FFE6          	movff	postinc2,postinc1
  2676  000AA0  CFDD FFE5          	movff	postdec2,postdec1
  2677                           
  2678                           ; BSR set to: 1
  2679  000AA4  0101               	movlb	1	; () banked
  2680  000AA6  2B7F               	incf	ReturnBoosterData@respCountUC& (0+255),f,b
  2681  000AA8                     l5211:
  2682  000AA8  0101               	movlb	1	; () banked
  2683  000AAA  2B83               	incf	ReturnBoosterData@boosterCountUC& (0+255),f,b
  2684  000AAC                     l5213:
  2685                           
  2686                           ; BSR set to: 1
  2687  000AAC  0101               	movlb	1	; () banked
  2688  000AAE  5181               	movf	ReturnBoosterData@wordCountUC& (0+255),w,b
  2689  000AB0  0101               	movlb	1	; () banked
  2690  000AB2  5D83               	subwf	ReturnBoosterData@boosterCountUC& (0+255),w,b
  2691  000AB4  A0D8               	btfss	status,0,c
  2692  000AB6  D769               	goto	l5203
  2693                           
  2694                           ; BSR set to: 1
  2695                           ;mastercomms.c: 369: }
  2696                           ;mastercomms.c: 370: }
  2697                           ;mastercomms.c: 371: CreateAndSend(iscSerialUSG, respSerialUS, commandValUC, respCountUC
      +                           * 2, (char *) partRespUSA);
  2698                           
  2699                           ; BSR set to: 1
  2700  000AB8  C0DC  F07C         	movff	_iscSerialUSG,CreateAndSend@packetSourceUS
  2701  000ABC  C0DD  F07D         	movff	_iscSerialUSG+1,CreateAndSend@packetSourceUS+1
  2702  000AC0  C086  F07E         	movff	ReturnBoosterData@respSerialUS,CreateAndSend@packetDestUS
  2703  000AC4  C087  F07F         	movff	ReturnBoosterData@respSerialUS+1,CreateAndSend@packetDestUS+1
  2704  000AC8  C180  F080         	movff	ReturnBoosterData@commandValUC,CreateAndSend@commandUC
  2705  000ACC  0101               	movlb	1	; () banked
  2706  000ACE  517F               	movf	ReturnBoosterData@respCountUC& (0+255),w,b
  2707  000AD0  0D02               	mullw	2
  2708  000AD2  CFF3 F081          	movff	prodl,CreateAndSend@dataLenUC
  2709  000AD6  0E00               	movlw	low ReturnBoosterData@partRespUSA
  2710  000AD8  0100               	movlb	0	; () banked
  2711  000ADA  6F82               	movwf	CreateAndSend@dataBuf& (0+255),b
  2712  000ADC  0E01               	movlw	high ReturnBoosterData@partRespUSA
  2713  000ADE  0100               	movlb	0	; () banked
  2714  000AE0  6F83               	movwf	(CreateAndSend@dataBuf+1)& (0+255),b
  2715  000AE2  ECE2  F012         	call	_CreateAndSend	;wreg free
  2716  000AE6                     l5217:
  2717                           
  2718                           ;mastercomms.c: 372: }
  2719                           ;mastercomms.c: 374: for(boosterCountUC = 0; boosterCountUC < wordCountUC; boosterCountU
      +                          C++)
  2720  000AE6  0E00               	movlw	0
  2721  000AE8  0101               	movlb	1	; () banked
  2722  000AEA  6F83               	movwf	ReturnBoosterData@boosterCountUC& (0+255),b
  2723  000AEC  D029               	goto	l5223
  2724  000AEE                     l5219:
  2725                           
  2726                           ; BSR set to: 1
  2727                           ;mastercomms.c: 375: pastBoosterValuesUSAG[dataValUC][boosterCountUC] = allRespUSA[boost
      +                          erCountUC];
  2728  000AEE  0101               	movlb	1	; () banked
  2729  000AF0  5183               	movf	ReturnBoosterData@boosterCountUC& (0+255),w,b
  2730  000AF2  0D02               	mullw	2
  2731  000AF4  0E3E               	movlw	low ReturnBoosterData@allRespUSA
  2732  000AF6  24F3               	addwf	prodl,w,c
  2733  000AF8  6ED9               	movwf	fsr2l,c
  2734  000AFA  0E01               	movlw	high ReturnBoosterData@allRespUSA
  2735  000AFC  20F4               	addwfc	prodh,w,c
  2736  000AFE  6EDA               	movwf	fsr2h,c
  2737  000B00  0101               	movlb	1	; () banked
  2738  000B02  5182               	movf	ReturnBoosterData@dataValUC& (0+255),w,b
  2739  000B04  0D3E               	mullw	62
  2740  000B06  0E00               	movlw	low _pastBoosterValuesUSAG
  2741  000B08  0100               	movlb	0	; () banked
  2742  000B0A  6F88               	movwf	??_ReturnBoosterData& (0+255),b
  2743  000B0C  0E05               	movlw	high _pastBoosterValuesUSAG
  2744  000B0E  0100               	movlb	0	; () banked
  2745  000B10  6F89               	movwf	(??_ReturnBoosterData+1)& (0+255),b
  2746  000B12  50F3               	movf	prodl,w,c
  2747  000B14  0100               	movlb	0	; () banked
  2748  000B16  2788               	addwf	??_ReturnBoosterData& (0+255),f,b
  2749  000B18  50F4               	movf	prodh,w,c
  2750  000B1A  0100               	movlb	0	; () banked
  2751  000B1C  2389               	addwfc	(??_ReturnBoosterData+1)& (0+255),f,b
  2752  000B1E  0101               	movlb	1	; () banked
  2753  000B20  5183               	movf	ReturnBoosterData@boosterCountUC& (0+255),w,b
  2754  000B22  0D02               	mullw	2
  2755  000B24  50F3               	movf	prodl,w,c
  2756  000B26  0100               	movlb	0	; () banked
  2757  000B28  2588               	addwf	??_ReturnBoosterData& (0+255),w,b
  2758  000B2A  6EE1               	movwf	fsr1l,c
  2759  000B2C  50F4               	movf	prodh,w,c
  2760  000B2E  0100               	movlb	0	; () banked
  2761  000B30  2189               	addwfc	(??_ReturnBoosterData+1)& (0+255),w,b
  2762  000B32  6EE2               	movwf	fsr1h,c
  2763  000B34  CFDE FFE6          	movff	postinc2,postinc1
  2764  000B38  CFDD FFE5          	movff	postdec2,postdec1
  2765                           
  2766                           ; BSR set to: 0
  2767  000B3C  0101               	movlb	1	; () banked
  2768  000B3E  2B83               	incf	ReturnBoosterData@boosterCountUC& (0+255),f,b
  2769  000B40                     l5223:
  2770                           
  2771                           ; BSR set to: 1
  2772  000B40  0101               	movlb	1	; () banked
  2773  000B42  5181               	movf	ReturnBoosterData@wordCountUC& (0+255),w,b
  2774  000B44  0101               	movlb	1	; () banked
  2775  000B46  5D83               	subwf	ReturnBoosterData@boosterCountUC& (0+255),w,b
  2776  000B48  B0D8               	btfsc	status,0,c
  2777  000B4A  0012               	return	
  2778  000B4C  D7D0               	goto	l5219
  2779  000B4E                     __end_of_ReturnBoosterData:
  2780                           	opt stack 0
  2781                           tblptru	equ	0xFF8
  2782                           prodh	equ	0xFF4
  2783                           prodl	equ	0xFF3
  2784                           postinc0	equ	0xFEE
  2785                           wreg	equ	0xFE8
  2786                           postinc1	equ	0xFE6
  2787                           postdec1	equ	0xFE5
  2788                           fsr1h	equ	0xFE2
  2789                           fsr1l	equ	0xFE1
  2790                           indf2	equ	0xFDF
  2791                           postinc2	equ	0xFDE
  2792                           postdec2	equ	0xFDD
  2793                           fsr2h	equ	0xFDA
  2794                           fsr2l	equ	0xFD9
  2795                           status	equ	0xFD8
  2796                           
  2797 ;; *************** function _RetransmitMessageSt7540 *****************
  2798 ;; Defined at:
  2799 ;;		line 246 in file "ST7540.c"
  2800 ;; Parameters:    Size  Location     Type
  2801 ;;		None
  2802 ;; Auto vars:     Size  Location     Type
  2803 ;;  dataBuf         2   32[BANK0 ] PTR unsigned char 
  2804 ;;		 -> bufferRXST7540UCAG(75), 
  2805 ;;  packetDestUS    2   30[BANK0 ] unsigned short 
  2806 ;;  packetSource    2   28[BANK0 ] unsigned short 
  2807 ;;  packetDataLe    1   36[BANK0 ] unsigned char 
  2808 ;;  oldPacketNum    1   35[BANK0 ] unsigned char 
  2809 ;;  commandUC       1   34[BANK0 ] unsigned char 
  2810 ;; Return value:  Size  Location     Type
  2811 ;;                  1    wreg      void 
  2812 ;; Registers used:
  2813 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2814 ;; Tracked objects:
  2815 ;;		On entry : 0/0
  2816 ;;		On exit  : 0/0
  2817 ;;		Unchanged: 0/0
  2818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2819 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2820 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2822 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2823 ;;Total ram usage:        9 bytes
  2824 ;; Hardware stack levels used:    1
  2825 ;; Hardware stack levels required when called:   10
  2826 ;; This function calls:
  2827 ;;		_CreateMessageST7540
  2828 ;;		_LineIdleST7540
  2829 ;;		_PacketDataST7540
  2830 ;;		_PacketReadParamST7540
  2831 ;;		_StartTransmitST7540
  2832 ;;		_TransmitBusyST7540
  2833 ;; This function is called by:
  2834 ;;		_ProcessMasterComms
  2835 ;; This function uses a non-reentrant model
  2836 ;;
  2837                           
  2838                           	psect	text8
  2839  0024AE                     __ptext8:
  2840                           	opt stack 0
  2841  0024AE                     _RetransmitMessageSt7540:
  2842                           	opt stack 19
  2843                           
  2844                           ;ST7540.c: 247: unsigned short packetSourceUS;
  2845                           ;ST7540.c: 248: unsigned short packetDestUS;
  2846                           ;ST7540.c: 249: unsigned char commandUC;
  2847                           ;ST7540.c: 250: unsigned char oldPacketNumberUC;
  2848                           ;ST7540.c: 252: unsigned char packetDataLenUC;
  2849                           ;ST7540.c: 253: char *dataBuf;
  2850                           ;ST7540.c: 255: oldPacketNumberUC = packetNumberUCG;
  2851                           
  2852                           ;incstack = 0
  2853  0024AE  C0DB  F083         	movff	_packetNumberUCG,RetransmitMessageSt7540@oldPacketNumberUC
  2854                           
  2855                           ;ST7540.c: 257: packetSourceUS = PacketReadParamST7540(1);
  2856  0024B2  0E01               	movlw	1
  2857  0024B4  ECB3  F00E         	call	_PacketReadParamST7540
  2858  0024B8  C075  F07C         	movff	?_PacketReadParamST7540,RetransmitMessageSt7540@packetSourceUS
  2859  0024BC  C076  F07D         	movff	?_PacketReadParamST7540+1,RetransmitMessageSt7540@packetSourceUS+1
  2860                           
  2861                           ;ST7540.c: 258: packetDestUS = PacketReadParamST7540(2);
  2862  0024C0  0E02               	movlw	2
  2863  0024C2  ECB3  F00E         	call	_PacketReadParamST7540
  2864  0024C6  C075  F07E         	movff	?_PacketReadParamST7540,RetransmitMessageSt7540@packetDestUS
  2865  0024CA  C076  F07F         	movff	?_PacketReadParamST7540+1,RetransmitMessageSt7540@packetDestUS+1
  2866                           
  2867                           ;ST7540.c: 259: packetNumberUCG = PacketReadParamST7540(3);
  2868  0024CE  0E03               	movlw	3
  2869  0024D0  ECB3  F00E         	call	_PacketReadParamST7540
  2870  0024D4  0100               	movlb	0	; () banked
  2871  0024D6  5175               	movf	?_PacketReadParamST7540& (0+255),w,b
  2872  0024D8  0100               	movlb	0	; () banked
  2873  0024DA  6FDB               	movwf	_packetNumberUCG& (0+255),b
  2874                           
  2875                           ;ST7540.c: 260: commandUC = PacketReadParamST7540(4);
  2876  0024DC  0E04               	movlw	4
  2877  0024DE  ECB3  F00E         	call	_PacketReadParamST7540
  2878  0024E2  0100               	movlb	0	; () banked
  2879  0024E4  5175               	movf	?_PacketReadParamST7540& (0+255),w,b
  2880  0024E6  0100               	movlb	0	; () banked
  2881  0024E8  6F82               	movwf	RetransmitMessageSt7540@commandUC& (0+255),b
  2882                           
  2883                           ;ST7540.c: 261: packetDataLenUC = PacketReadParamST7540(0);
  2884  0024EA  0E00               	movlw	0
  2885  0024EC  ECB3  F00E         	call	_PacketReadParamST7540
  2886  0024F0  0100               	movlb	0	; () banked
  2887  0024F2  5175               	movf	?_PacketReadParamST7540& (0+255),w,b
  2888  0024F4  0100               	movlb	0	; () banked
  2889  0024F6  6F84               	movwf	RetransmitMessageSt7540@packetDataLenUC& (0+255),b
  2890                           
  2891                           ; BSR set to: 0
  2892                           ;ST7540.c: 262: dataBuf = PacketDataST7540();
  2893  0024F8  ECD4  F017         	call	_PacketDataST7540	;wreg free
  2894  0024FC  C060  F080         	movff	?_PacketDataST7540,RetransmitMessageSt7540@dataBuf
  2895  002500  C061  F081         	movff	?_PacketDataST7540+1,RetransmitMessageSt7540@dataBuf+1
  2896                           
  2897                           ;ST7540.c: 264: CreateMessageST7540(packetSourceUS, packetDestUS, commandUC, packetDataL
      +                          enUC, dataBuf);
  2898  002504  C07C  F06D         	movff	RetransmitMessageSt7540@packetSourceUS,CreateMessageST7540@packetSourceUS
  2899  002508  C07D  F06E         	movff	RetransmitMessageSt7540@packetSourceUS+1,CreateMessageST7540@packetSourceUS+1
  2900  00250C  C07E  F06F         	movff	RetransmitMessageSt7540@packetDestUS,CreateMessageST7540@packetDestUS
  2901  002510  C07F  F070         	movff	RetransmitMessageSt7540@packetDestUS+1,CreateMessageST7540@packetDestUS+1
  2902  002514  C082  F071         	movff	RetransmitMessageSt7540@commandUC,CreateMessageST7540@commandUC
  2903  002518  C084  F072         	movff	RetransmitMessageSt7540@packetDataLenUC,CreateMessageST7540@dataLenUC
  2904  00251C  C080  F073         	movff	RetransmitMessageSt7540@dataBuf,CreateMessageST7540@dataBuf
  2905  002520  C081  F074         	movff	RetransmitMessageSt7540@dataBuf+1,CreateMessageST7540@dataBuf+1
  2906  002524  ECB3  F00D         	call	_CreateMessageST7540	;wreg free
  2907  002528                     l4631:
  2908  002528  ECE9  F017         	call	_LineIdleST7540	;wreg free
  2909  00252C  0900               	iorlw	0
  2910  00252E  B4D8               	btfsc	status,2,c
  2911  002530  D7FB               	goto	l4631
  2912  002532  EC08  F018         	call	_TransmitBusyST7540	;wreg free
  2913  002536  0900               	iorlw	0
  2914  002538  A4D8               	btfss	status,2,c
  2915  00253A  D7F6               	goto	l4631
  2916                           
  2917                           ;ST7540.c: 266: StartTransmitST7540();
  2918  00253C  EC81  F017         	call	_StartTransmitST7540	;wreg free
  2919                           
  2920                           ;ST7540.c: 268: packetNumberUCG = oldPacketNumberUC;
  2921  002540  C083  F0DB         	movff	RetransmitMessageSt7540@oldPacketNumberUC,_packetNumberUCG
  2922  002544  0012               	return		;funcret
  2923  002546                     __end_of_RetransmitMessageSt7540:
  2924                           	opt stack 0
  2925                           tblptru	equ	0xFF8
  2926                           prodh	equ	0xFF4
  2927                           prodl	equ	0xFF3
  2928                           postinc0	equ	0xFEE
  2929                           wreg	equ	0xFE8
  2930                           postinc1	equ	0xFE6
  2931                           postdec1	equ	0xFE5
  2932                           fsr1h	equ	0xFE2
  2933                           fsr1l	equ	0xFE1
  2934                           indf2	equ	0xFDF
  2935                           postinc2	equ	0xFDE
  2936                           postdec2	equ	0xFDD
  2937                           fsr2h	equ	0xFDA
  2938                           fsr2l	equ	0xFD9
  2939                           status	equ	0xFD8
  2940                           
  2941 ;; *************** function _PacketDataST7540 *****************
  2942 ;; Defined at:
  2943 ;;		line 350 in file "ST7540.c"
  2944 ;; Parameters:    Size  Location     Type
  2945 ;;		None
  2946 ;; Auto vars:     Size  Location     Type
  2947 ;;		None
  2948 ;; Return value:  Size  Location     Type
  2949 ;;                  2    0[BANK0 ] PTR unsigned char 
  2950 ;; Registers used:
  2951 ;;		wreg, status,2, status,0
  2952 ;; Tracked objects:
  2953 ;;		On entry : 0/0
  2954 ;;		On exit  : 0/0
  2955 ;;		Unchanged: 0/0
  2956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  2957 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2958 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2960 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  2961 ;;Total ram usage:        2 bytes
  2962 ;; Hardware stack levels used:    1
  2963 ;; Hardware stack levels required when called:    7
  2964 ;; This function calls:
  2965 ;;		Nothing
  2966 ;; This function is called by:
  2967 ;;		_RetransmitMessageSt7540
  2968 ;;		_SetSerialNumber
  2969 ;; This function uses a non-reentrant model
  2970 ;;
  2971                           
  2972                           	psect	text9
  2973  002FA8                     __ptext9:
  2974                           	opt stack 0
  2975  002FA8                     _PacketDataST7540:
  2976                           	opt stack 21
  2977                           
  2978                           ;ST7540.c: 351: return (bufferRXST7540UCAG + 7);
  2979                           
  2980                           ;incstack = 0
  2981  002FA8  0E56               	movlw	low (_bufferRXST7540UCAG+7)
  2982  002FAA  0100               	movlb	0	; () banked
  2983  002FAC  6F60               	movwf	?_PacketDataST7540& (0+255),b
  2984  002FAE  0E02               	movlw	high (_bufferRXST7540UCAG+7)
  2985  002FB0  0100               	movlb	0	; () banked
  2986  002FB2  6F61               	movwf	(?_PacketDataST7540+1)& (0+255),b
  2987  002FB4  0012               	return	
  2988  002FB6                     __end_of_PacketDataST7540:
  2989                           	opt stack 0
  2990                           tblptru	equ	0xFF8
  2991                           prodh	equ	0xFF4
  2992                           prodl	equ	0xFF3
  2993                           postinc0	equ	0xFEE
  2994                           wreg	equ	0xFE8
  2995                           postinc1	equ	0xFE6
  2996                           postdec1	equ	0xFE5
  2997                           fsr1h	equ	0xFE2
  2998                           fsr1l	equ	0xFE1
  2999                           indf2	equ	0xFDF
  3000                           postinc2	equ	0xFDE
  3001                           postdec2	equ	0xFDD
  3002                           fsr2h	equ	0xFDA
  3003                           fsr2l	equ	0xFD9
  3004                           status	equ	0xFD8
  3005                           
  3006 ;; *************** function _ReceiveNewDataST7540 *****************
  3007 ;; Defined at:
  3008 ;;		line 313 in file "ST7540.c"
  3009 ;; Parameters:    Size  Location     Type
  3010 ;;		None
  3011 ;; Auto vars:     Size  Location     Type
  3012 ;;  discardUC       1    0[BANK0 ] unsigned char 
  3013 ;; Return value:  Size  Location     Type
  3014 ;;                  1    wreg      void 
  3015 ;; Registers used:
  3016 ;;		wreg, status,2, status,0
  3017 ;; Tracked objects:
  3018 ;;		On entry : 0/0
  3019 ;;		On exit  : 0/0
  3020 ;;		Unchanged: 0/0
  3021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3022 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3023 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3024 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3025 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3026 ;;Total ram usage:        1 bytes
  3027 ;; Hardware stack levels used:    1
  3028 ;; Hardware stack levels required when called:    7
  3029 ;; This function calls:
  3030 ;;		Nothing
  3031 ;; This function is called by:
  3032 ;;		_ProcessMasterComms
  3033 ;; This function uses a non-reentrant model
  3034 ;;
  3035                           
  3036                           	psect	text10
  3037  002F72                     __ptext10:
  3038                           	opt stack 0
  3039  002F72                     _ReceiveNewDataST7540:
  3040                           	opt stack 22
  3041                           
  3042                           ;ST7540.c: 314: unsigned char discardUC;
  3043                           ;ST7540.c: 316: flagST7540UCG |= 2;
  3044                           
  3045                           ; BSR set to: 0
  3046                           ;incstack = 0
  3047  002F72  8255               	bsf	_flagST7540UCG,1,c
  3048                           
  3049                           ;ST7540.c: 317: flagST7540UCG &= ~4;
  3050  002F74  9455               	bcf	_flagST7540UCG,2,c
  3051                           
  3052                           ;ST7540.c: 318: discardUC = SSP2BUF;
  3053  002F76  CF75 F060          	movff	3957,ReceiveNewDataST7540@discardUC	;volatile
  3054                           
  3055                           ;ST7540.c: 319: SSP2BUF = 0;
  3056  002F7A  0E00               	movlw	0
  3057  002F7C  6E75               	movwf	3957,c	;volatile
  3058                           
  3059                           ;ST7540.c: 320: bufferRXNextUCG = 0;
  3060  002F7E  0E00               	movlw	0
  3061  002F80  6E4E               	movwf	_bufferRXNextUCG,c
  3062  002F82  0012               	return		;funcret
  3063  002F84                     __end_of_ReceiveNewDataST7540:
  3064                           	opt stack 0
  3065                           tblptru	equ	0xFF8
  3066                           prodh	equ	0xFF4
  3067                           prodl	equ	0xFF3
  3068                           postinc0	equ	0xFEE
  3069                           wreg	equ	0xFE8
  3070                           postinc1	equ	0xFE6
  3071                           postdec1	equ	0xFE5
  3072                           fsr1h	equ	0xFE2
  3073                           fsr1l	equ	0xFE1
  3074                           indf2	equ	0xFDF
  3075                           postinc2	equ	0xFDE
  3076                           postdec2	equ	0xFDD
  3077                           fsr2h	equ	0xFDA
  3078                           fsr2l	equ	0xFD9
  3079                           status	equ	0xFD8
  3080                           
  3081 ;; *************** function _ProcessSerialCMD *****************
  3082 ;; Defined at:
  3083 ;;		line 393 in file "mastercomms.c"
  3084 ;; Parameters:    Size  Location     Type
  3085 ;;  respSerialUS    2   38[BANK0 ] unsigned short 
  3086 ;; Auto vars:     Size  Location     Type
  3087 ;;  serialListUS   60   42[BANK0 ] unsigned short [30]
  3088 ;;  boosterCount    1  103[BANK0 ] unsigned char 
  3089 ;;  boosterIndex    1  102[BANK0 ] unsigned char 
  3090 ;; Return value:  Size  Location     Type
  3091 ;;                  1    wreg      void 
  3092 ;; Registers used:
  3093 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3094 ;; Tracked objects:
  3095 ;;		On entry : 0/0
  3096 ;;		On exit  : 0/0
  3097 ;;		Unchanged: 0/0
  3098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3099 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3100 ;;      Locals:         0      62       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3101 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3102 ;;      Totals:         0      66       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3103 ;;Total ram usage:       66 bytes
  3104 ;; Hardware stack levels used:    1
  3105 ;; Hardware stack levels required when called:   11
  3106 ;; This function calls:
  3107 ;;		_CreateAndSend
  3108 ;; This function is called by:
  3109 ;;		_ProcessMasterComms
  3110 ;; This function uses a non-reentrant model
  3111 ;;
  3112                           
  3113                           	psect	text11
  3114  001F1E                     __ptext11:
  3115                           	opt stack 0
  3116  001F1E                     _ProcessSerialCMD:
  3117                           	opt stack 18
  3118                           
  3119                           ;mastercomms.c: 394: unsigned short serialListUSA[30];
  3120                           ;mastercomms.c: 395: unsigned char boosterCountUC;
  3121                           ;mastercomms.c: 396: unsigned char boosterIndexUC;
  3122                           ;mastercomms.c: 398: if(statusFlagsUSLG & 0b000000100000000000000000)
  3123                           
  3124                           ;incstack = 0
  3125  001F1E  A238               	btfss	_statusFlagsUSLG+2,1,c	;volatile
  3126  001F20  D016               	goto	l5243
  3127                           
  3128                           ;mastercomms.c: 399: CreateAndSend(iscSerialUSG, respSerialUS, 0b00001111, 0, 0);
  3129  001F22  C0DC  F07C         	movff	_iscSerialUSG,CreateAndSend@packetSourceUS
  3130  001F26  C0DD  F07D         	movff	_iscSerialUSG+1,CreateAndSend@packetSourceUS+1
  3131  001F2A  C086  F07E         	movff	ProcessSerialCMD@respSerialUS,CreateAndSend@packetDestUS
  3132  001F2E  C087  F07F         	movff	ProcessSerialCMD@respSerialUS+1,CreateAndSend@packetDestUS+1
  3133  001F32  0E0F               	movlw	15
  3134  001F34  0100               	movlb	0	; () banked
  3135  001F36  6F80               	movwf	CreateAndSend@commandUC& (0+255),b
  3136  001F38  0E00               	movlw	0
  3137  001F3A  0100               	movlb	0	; () banked
  3138  001F3C  6F81               	movwf	CreateAndSend@dataLenUC& (0+255),b
  3139  001F3E  0E00               	movlw	0
  3140  001F40  0100               	movlb	0	; () banked
  3141  001F42  6F82               	movwf	CreateAndSend@dataBuf& (0+255),b
  3142  001F44  0E00               	movlw	0
  3143  001F46  0100               	movlb	0	; () banked
  3144  001F48  6F83               	movwf	(CreateAndSend@dataBuf+1)& (0+255),b
  3145  001F4A  ECE2  F012         	call	_CreateAndSend	;wreg free
  3146  001F4E                     l5243:
  3147                           
  3148                           ;mastercomms.c: 401: for(boosterCountUC = 0, boosterIndexUC = 0; boosterCountUC < 30; bo
      +                          osterCountUC++){
  3149  001F4E  0E00               	movlw	0
  3150  001F50  0100               	movlb	0	; () banked
  3151  001F52  6FC7               	movwf	ProcessSerialCMD@boosterCountUC& (0+255),b
  3152                           
  3153                           ; BSR set to: 0
  3154  001F54  0E00               	movlw	0
  3155  001F56  0100               	movlb	0	; () banked
  3156  001F58  6FC6               	movwf	ProcessSerialCMD@boosterIndexUC& (0+255),b
  3157  001F5A                     l5247:
  3158                           
  3159                           ; BSR set to: 0
  3160  001F5A  0E1D               	movlw	29
  3161  001F5C  0100               	movlb	0	; () banked
  3162  001F5E  65C7               	cpfsgt	ProcessSerialCMD@boosterCountUC& (0+255),b
  3163  001F60  D001               	goto	l5251
  3164  001F62  D028               	goto	l5261
  3165  001F64                     l5251:
  3166                           
  3167                           ; BSR set to: 0
  3168                           ;mastercomms.c: 402: if(boosterCommsDataSerial[boosterCountUC])
  3169  001F64  0100               	movlb	0	; () banked
  3170  001F66  51C7               	movf	ProcessSerialCMD@boosterCountUC& (0+255),w,b
  3171  001F68  0D02               	mullw	2
  3172  001F6A  0E84               	movlw	low _boosterCommsDataSerial
  3173  001F6C  24F3               	addwf	prodl,w,c
  3174  001F6E  6ED9               	movwf	fsr2l,c
  3175  001F70  0E01               	movlw	high _boosterCommsDataSerial
  3176  001F72  20F4               	addwfc	prodh,w,c
  3177  001F74  6EDA               	movwf	fsr2h,c
  3178  001F76  50DE               	movf	postinc2,w,c
  3179  001F78  10DE               	iorwf	postinc2,w,c
  3180  001F7A  B4D8               	btfsc	status,2,c
  3181  001F7C  D018               	goto	l5257
  3182                           
  3183                           ; BSR set to: 0
  3184                           ;mastercomms.c: 403: serialListUSA[boosterIndexUC++] = boosterCommsDataSerial[boosterCou
      +                          ntUC];
  3185  001F7E  0100               	movlb	0	; () banked
  3186  001F80  51C7               	movf	ProcessSerialCMD@boosterCountUC& (0+255),w,b
  3187  001F82  0D02               	mullw	2
  3188  001F84  0E84               	movlw	low _boosterCommsDataSerial
  3189  001F86  24F3               	addwf	prodl,w,c
  3190  001F88  6ED9               	movwf	fsr2l,c
  3191  001F8A  0E01               	movlw	high _boosterCommsDataSerial
  3192  001F8C  20F4               	addwfc	prodh,w,c
  3193  001F8E  6EDA               	movwf	fsr2h,c
  3194  001F90  0100               	movlb	0	; () banked
  3195  001F92  51C6               	movf	ProcessSerialCMD@boosterIndexUC& (0+255),w,b
  3196  001F94  0D02               	mullw	2
  3197  001F96  0E8A               	movlw	low ProcessSerialCMD@serialListUSA
  3198  001F98  24F3               	addwf	prodl,w,c
  3199  001F9A  6EE1               	movwf	fsr1l,c
  3200  001F9C  0E00               	movlw	high ProcessSerialCMD@serialListUSA
  3201  001F9E  20F4               	addwfc	prodh,w,c
  3202  001FA0  6EE2               	movwf	fsr1h,c
  3203  001FA2  CFDE FFE6          	movff	postinc2,postinc1
  3204  001FA6  CFDD FFE5          	movff	postdec2,postdec1
  3205                           
  3206                           ; BSR set to: 0
  3207  001FAA  0100               	movlb	0	; () banked
  3208  001FAC  2BC6               	incf	ProcessSerialCMD@boosterIndexUC& (0+255),f,b
  3209  001FAE                     l5257:
  3210                           
  3211                           ; BSR set to: 0
  3212  001FAE  0100               	movlb	0	; () banked
  3213  001FB0  2BC7               	incf	ProcessSerialCMD@boosterCountUC& (0+255),f,b
  3214  001FB2  D7D3               	goto	l5247
  3215  001FB4                     l5261:
  3216                           
  3217                           ; BSR set to: 0
  3218                           ;mastercomms.c: 404: }
  3219                           ;mastercomms.c: 405: statusFlagsUSLG &= ~0b000001000000000000000000;
  3220  001FB4  9438               	bcf	_statusFlagsUSLG+2,2,c	;volatile
  3221                           
  3222                           ; BSR set to: 0
  3223                           ;mastercomms.c: 406: CreateAndSend(iscSerialUSG, respSerialUS, 0b00000111, boosterIndexU
      +                          C * 2, (char *) serialListUSA);
  3224  001FB6  C0DC  F07C         	movff	_iscSerialUSG,CreateAndSend@packetSourceUS
  3225  001FBA  C0DD  F07D         	movff	_iscSerialUSG+1,CreateAndSend@packetSourceUS+1
  3226  001FBE  C086  F07E         	movff	ProcessSerialCMD@respSerialUS,CreateAndSend@packetDestUS
  3227  001FC2  C087  F07F         	movff	ProcessSerialCMD@respSerialUS+1,CreateAndSend@packetDestUS+1
  3228  001FC6  0E07               	movlw	7
  3229  001FC8  0100               	movlb	0	; () banked
  3230  001FCA  6F80               	movwf	CreateAndSend@commandUC& (0+255),b
  3231  001FCC  0100               	movlb	0	; () banked
  3232  001FCE  51C6               	movf	ProcessSerialCMD@boosterIndexUC& (0+255),w,b
  3233  001FD0  0D02               	mullw	2
  3234  001FD2  CFF3 F081          	movff	prodl,CreateAndSend@dataLenUC
  3235  001FD6  0E8A               	movlw	low ProcessSerialCMD@serialListUSA
  3236  001FD8  0100               	movlb	0	; () banked
  3237  001FDA  6F82               	movwf	CreateAndSend@dataBuf& (0+255),b
  3238  001FDC  0E00               	movlw	high ProcessSerialCMD@serialListUSA
  3239  001FDE  0100               	movlb	0	; () banked
  3240  001FE0  6F83               	movwf	(CreateAndSend@dataBuf+1)& (0+255),b
  3241  001FE2  ECE2  F012         	call	_CreateAndSend	;wreg free
  3242  001FE6  0012               	return		;funcret
  3243  001FE8                     __end_of_ProcessSerialCMD:
  3244                           	opt stack 0
  3245                           tblptru	equ	0xFF8
  3246                           prodh	equ	0xFF4
  3247                           prodl	equ	0xFF3
  3248                           postinc0	equ	0xFEE
  3249                           wreg	equ	0xFE8
  3250                           postinc1	equ	0xFE6
  3251                           postdec1	equ	0xFE5
  3252                           fsr1h	equ	0xFE2
  3253                           fsr1l	equ	0xFE1
  3254                           indf2	equ	0xFDF
  3255                           postinc2	equ	0xFDE
  3256                           postdec2	equ	0xFDD
  3257                           fsr2h	equ	0xFDA
  3258                           fsr2l	equ	0xFD9
  3259                           status	equ	0xFD8
  3260                           
  3261 ;; *************** function _ProcessPingCMD *****************
  3262 ;; Defined at:
  3263 ;;		line 409 in file "mastercomms.c"
  3264 ;; Parameters:    Size  Location     Type
  3265 ;;  respSerialUS    2   38[BANK0 ] unsigned short 
  3266 ;; Auto vars:     Size  Location     Type
  3267 ;;		None
  3268 ;; Return value:  Size  Location     Type
  3269 ;;                  1    wreg      void 
  3270 ;; Registers used:
  3271 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3272 ;; Tracked objects:
  3273 ;;		On entry : 0/0
  3274 ;;		On exit  : 0/0
  3275 ;;		Unchanged: 0/0
  3276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3277 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3278 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3280 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3281 ;;Total ram usage:        2 bytes
  3282 ;; Hardware stack levels used:    1
  3283 ;; Hardware stack levels required when called:   11
  3284 ;; This function calls:
  3285 ;;		_CreateAndSend
  3286 ;; This function is called by:
  3287 ;;		_ProcessMasterComms
  3288 ;; This function uses a non-reentrant model
  3289 ;;
  3290                           
  3291                           	psect	text12
  3292  002D0A                     __ptext12:
  3293                           	opt stack 0
  3294  002D0A                     _ProcessPingCMD:
  3295                           	opt stack 18
  3296                           
  3297                           ;mastercomms.c: 410: CreateAndSend(iscSerialUSG, respSerialUS, 0b00101001, 0, 0);
  3298                           
  3299                           ;incstack = 0
  3300  002D0A  C0DC  F07C         	movff	_iscSerialUSG,CreateAndSend@packetSourceUS
  3301  002D0E  C0DD  F07D         	movff	_iscSerialUSG+1,CreateAndSend@packetSourceUS+1
  3302  002D12  C086  F07E         	movff	ProcessPingCMD@respSerialUS,CreateAndSend@packetDestUS
  3303  002D16  C087  F07F         	movff	ProcessPingCMD@respSerialUS+1,CreateAndSend@packetDestUS+1
  3304  002D1A  0E29               	movlw	41
  3305  002D1C  0100               	movlb	0	; () banked
  3306  002D1E  6F80               	movwf	CreateAndSend@commandUC& (0+255),b
  3307  002D20  0E00               	movlw	0
  3308  002D22  0100               	movlb	0	; () banked
  3309  002D24  6F81               	movwf	CreateAndSend@dataLenUC& (0+255),b
  3310  002D26  0E00               	movlw	0
  3311  002D28  0100               	movlb	0	; () banked
  3312  002D2A  6F82               	movwf	CreateAndSend@dataBuf& (0+255),b
  3313  002D2C  0E00               	movlw	0
  3314  002D2E  0100               	movlb	0	; () banked
  3315  002D30  6F83               	movwf	(CreateAndSend@dataBuf+1)& (0+255),b
  3316  002D32  ECE2  F012         	call	_CreateAndSend	;wreg free
  3317  002D36  0012               	return		;funcret
  3318  002D38                     __end_of_ProcessPingCMD:
  3319                           	opt stack 0
  3320                           tblptru	equ	0xFF8
  3321                           prodh	equ	0xFF4
  3322                           prodl	equ	0xFF3
  3323                           postinc0	equ	0xFEE
  3324                           wreg	equ	0xFE8
  3325                           postinc1	equ	0xFE6
  3326                           postdec1	equ	0xFE5
  3327                           fsr1h	equ	0xFE2
  3328                           fsr1l	equ	0xFE1
  3329                           indf2	equ	0xFDF
  3330                           postinc2	equ	0xFDE
  3331                           postdec2	equ	0xFDD
  3332                           fsr2h	equ	0xFDA
  3333                           fsr2l	equ	0xFD9
  3334                           status	equ	0xFD8
  3335                           
  3336 ;; *************** function _CreateAndSend *****************
  3337 ;; Defined at:
  3338 ;;		line 378 in file "mastercomms.c"
  3339 ;; Parameters:    Size  Location     Type
  3340 ;;  packetSource    2   28[BANK0 ] unsigned short 
  3341 ;;  packetDestUS    2   30[BANK0 ] unsigned short 
  3342 ;;  commandUC       1   32[BANK0 ] unsigned char 
  3343 ;;  dataLenUC       1   33[BANK0 ] unsigned char 
  3344 ;;  dataBuf         2   34[BANK0 ] PTR unsigned char 
  3345 ;;		 -> ProcessSerialCMD@serialListUSA(60), ReturnBoosterData@partRespUSA(62), ReturnBoosterData@allRespUSA(62), NULL(0)
      +, 
  3346 ;;		 -> iscSerialUSG(2), 
  3347 ;; Auto vars:     Size  Location     Type
  3348 ;;  nextPacketNu    2   36[BANK0 ] unsigned short 
  3349 ;; Return value:  Size  Location     Type
  3350 ;;                  1    wreg      void 
  3351 ;; Registers used:
  3352 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3353 ;; Tracked objects:
  3354 ;;		On entry : 0/0
  3355 ;;		On exit  : 0/0
  3356 ;;		Unchanged: 0/0
  3357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3358 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3359 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3361 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3362 ;;Total ram usage:       10 bytes
  3363 ;; Hardware stack levels used:    1
  3364 ;; Hardware stack levels required when called:   10
  3365 ;; This function calls:
  3366 ;;		_CollisionCheck
  3367 ;;		_CreateMessageST7540
  3368 ;;		_LineIdleST7540
  3369 ;;		_PacketReadParamST7540
  3370 ;;		_SavePacketNumber
  3371 ;;		_StartTransmitST7540
  3372 ;;		_TransmitBusyST7540
  3373 ;; This function is called by:
  3374 ;;		_ProcessMasterComms
  3375 ;;		_SetSerialNumber
  3376 ;;		_ReturnBoosterData
  3377 ;;		_ProcessSerialCMD
  3378 ;;		_ProcessPingCMD
  3379 ;; This function uses a non-reentrant model
  3380 ;;
  3381                           
  3382                           	psect	text13
  3383  0025C4                     __ptext13:
  3384                           	opt stack 0
  3385  0025C4                     _CreateAndSend:
  3386                           	opt stack 18
  3387                           
  3388                           ;mastercomms.c: 379: unsigned short nextPacketNumberUS;
  3389                           ;mastercomms.c: 381: if(masterFlagsUCG & 0b00000001)
  3390                           
  3391                           ;incstack = 0
  3392  0025C4  0100               	movlb	0	; () banked
  3393  0025C6  A1DA               	btfss	_masterFlagsUCG& (0+255),0,b
  3394  0025C8  D002               	goto	l4525
  3395                           
  3396                           ; BSR set to: 0
  3397                           ;mastercomms.c: 382: commandUC |= 0b10000000;
  3398  0025CA  0100               	movlb	0	; () banked
  3399  0025CC  8F80               	bsf	CreateAndSend@commandUC& (0+255),7,b
  3400  0025CE                     l4525:
  3401                           
  3402                           ; BSR set to: 0
  3403                           ;mastercomms.c: 383: CreateMessageST7540(packetSourceUS, packetDestUS, commandUC, dataLe
      +                          nUC, dataBuf);
  3404  0025CE  C07C  F06D         	movff	CreateAndSend@packetSourceUS,CreateMessageST7540@packetSourceUS
  3405  0025D2  C07D  F06E         	movff	CreateAndSend@packetSourceUS+1,CreateMessageST7540@packetSourceUS+1
  3406  0025D6  C07E  F06F         	movff	CreateAndSend@packetDestUS,CreateMessageST7540@packetDestUS
  3407  0025DA  C07F  F070         	movff	CreateAndSend@packetDestUS+1,CreateMessageST7540@packetDestUS+1
  3408  0025DE  C080  F071         	movff	CreateAndSend@commandUC,CreateMessageST7540@commandUC
  3409  0025E2  C081  F072         	movff	CreateAndSend@dataLenUC,CreateMessageST7540@dataLenUC
  3410  0025E6  C082  F073         	movff	CreateAndSend@dataBuf,CreateMessageST7540@dataBuf
  3411  0025EA  C083  F074         	movff	CreateAndSend@dataBuf+1,CreateMessageST7540@dataBuf+1
  3412  0025EE  ECB3  F00D         	call	_CreateMessageST7540	;wreg free
  3413                           
  3414                           ;mastercomms.c: 384: nextPacketNumberUS = PacketReadParamST7540(6);
  3415  0025F2  0E06               	movlw	6
  3416  0025F4  ECB3  F00E         	call	_PacketReadParamST7540
  3417  0025F8  C075  F084         	movff	?_PacketReadParamST7540,CreateAndSend@nextPacketNumberUS
  3418  0025FC  C076  F085         	movff	?_PacketReadParamST7540+1,CreateAndSend@nextPacketNumberUS+1
  3419                           
  3420                           ;mastercomms.c: 385: SavePacketNumber(packetSourceUS, nextPacketNumberUS);
  3421  002600  C07C  F065         	movff	CreateAndSend@packetSourceUS,SavePacketNumber@srcSerialUS
  3422  002604  C07D  F066         	movff	CreateAndSend@packetSourceUS+1,SavePacketNumber@srcSerialUS+1
  3423  002608  C084  F067         	movff	CreateAndSend@nextPacketNumberUS,SavePacketNumber@packetNumberUC
  3424  00260C  EC1C  F013         	call	_SavePacketNumber	;wreg free
  3425                           
  3426                           ;mastercomms.c: 386: if(!(masterFlagsUCG & 0b00000010) ||
  3427                           ;mastercomms.c: 387: (masterFlagsUCG & 0b00000001))
  3428  002610  0100               	movlb	0	; () banked
  3429  002612  A3DA               	btfss	_masterFlagsUCG& (0+255),1,b
  3430  002614  D002               	goto	l4535
  3431                           
  3432                           ; BSR set to: 0
  3433  002616  0100               	movlb	0	; () banked
  3434  002618  B1DA               	btfsc	_masterFlagsUCG& (0+255),0,b
  3435  00261A                     l4535:
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;mastercomms.c: 388: CollisionCheck();
  3439  00261A  ECB3  F015         	call	_CollisionCheck	;wreg free
  3440  00261E                     l4537:
  3441  00261E  ECE9  F017         	call	_LineIdleST7540	;wreg free
  3442  002622  0900               	iorlw	0
  3443  002624  B4D8               	btfsc	status,2,c
  3444  002626  D7FB               	goto	l4537
  3445  002628  EC08  F018         	call	_TransmitBusyST7540	;wreg free
  3446  00262C  0900               	iorlw	0
  3447  00262E  A4D8               	btfss	status,2,c
  3448  002630  D7F6               	goto	l4537
  3449                           
  3450                           ;mastercomms.c: 390: StartTransmitST7540();
  3451  002632  EC81  F017         	call	_StartTransmitST7540	;wreg free
  3452  002636  0012               	return		;funcret
  3453  002638                     __end_of_CreateAndSend:
  3454                           	opt stack 0
  3455                           tblptru	equ	0xFF8
  3456                           prodh	equ	0xFF4
  3457                           prodl	equ	0xFF3
  3458                           postinc0	equ	0xFEE
  3459                           wreg	equ	0xFE8
  3460                           postinc1	equ	0xFE6
  3461                           postdec1	equ	0xFE5
  3462                           fsr1h	equ	0xFE2
  3463                           fsr1l	equ	0xFE1
  3464                           indf2	equ	0xFDF
  3465                           postinc2	equ	0xFDE
  3466                           postdec2	equ	0xFDD
  3467                           fsr2h	equ	0xFDA
  3468                           fsr2l	equ	0xFD9
  3469                           status	equ	0xFD8
  3470                           
  3471 ;; *************** function _TransmitBusyST7540 *****************
  3472 ;; Defined at:
  3473 ;;		line 309 in file "ST7540.c"
  3474 ;; Parameters:    Size  Location     Type
  3475 ;;		None
  3476 ;; Auto vars:     Size  Location     Type
  3477 ;;		None
  3478 ;; Return value:  Size  Location     Type
  3479 ;;                  1    wreg      unsigned char 
  3480 ;; Registers used:
  3481 ;;		wreg, status,2, status,0
  3482 ;; Tracked objects:
  3483 ;;		On entry : 0/0
  3484 ;;		On exit  : 0/0
  3485 ;;		Unchanged: 0/0
  3486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3490 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3491 ;;Total ram usage:        0 bytes
  3492 ;; Hardware stack levels used:    1
  3493 ;; Hardware stack levels required when called:    7
  3494 ;; This function calls:
  3495 ;;		Nothing
  3496 ;; This function is called by:
  3497 ;;		_RetransmitMessageSt7540
  3498 ;;		_CreateAndSend
  3499 ;; This function uses a non-reentrant model
  3500 ;;
  3501                           
  3502                           	psect	text14
  3503  003010                     __ptext14:
  3504                           	opt stack 0
  3505  003010                     _TransmitBusyST7540:
  3506                           	opt stack 20
  3507                           
  3508                           ;ST7540.c: 310: return (flagST7540UCG & 1);
  3509                           
  3510                           ;incstack = 0
  3511  003010  5055               	movf	_flagST7540UCG,w,c
  3512  003012  0B01               	andlw	1
  3513  003014  0012               	return	
  3514  003016                     __end_of_TransmitBusyST7540:
  3515                           	opt stack 0
  3516                           tblptru	equ	0xFF8
  3517                           prodh	equ	0xFF4
  3518                           prodl	equ	0xFF3
  3519                           postinc0	equ	0xFEE
  3520                           wreg	equ	0xFE8
  3521                           postinc1	equ	0xFE6
  3522                           postdec1	equ	0xFE5
  3523                           fsr1h	equ	0xFE2
  3524                           fsr1l	equ	0xFE1
  3525                           indf2	equ	0xFDF
  3526                           postinc2	equ	0xFDE
  3527                           postdec2	equ	0xFDD
  3528                           fsr2h	equ	0xFDA
  3529                           fsr2l	equ	0xFD9
  3530                           status	equ	0xFD8
  3531                           
  3532 ;; *************** function _StartTransmitST7540 *****************
  3533 ;; Defined at:
  3534 ;;		line 297 in file "ST7540.c"
  3535 ;; Parameters:    Size  Location     Type
  3536 ;;		None
  3537 ;; Auto vars:     Size  Location     Type
  3538 ;;  discardUC       1    0[BANK0 ] unsigned char 
  3539 ;; Return value:  Size  Location     Type
  3540 ;;                  1    wreg      void 
  3541 ;; Registers used:
  3542 ;;		wreg, status,2, status,0
  3543 ;; Tracked objects:
  3544 ;;		On entry : 0/0
  3545 ;;		On exit  : 0/0
  3546 ;;		Unchanged: 0/0
  3547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3549 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3551 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3552 ;;Total ram usage:        1 bytes
  3553 ;; Hardware stack levels used:    1
  3554 ;; Hardware stack levels required when called:    7
  3555 ;; This function calls:
  3556 ;;		Nothing
  3557 ;; This function is called by:
  3558 ;;		_RetransmitMessageSt7540
  3559 ;;		_CreateAndSend
  3560 ;; This function uses a non-reentrant model
  3561 ;;
  3562                           
  3563                           	psect	text15
  3564  002F02                     __ptext15:
  3565                           	opt stack 0
  3566  002F02                     _StartTransmitST7540:
  3567                           	opt stack 20
  3568                           
  3569                           ;ST7540.c: 298: unsigned char discardUC;
  3570                           ;ST7540.c: 300: flagST7540UCG |= 1;
  3571                           
  3572                           ;incstack = 0
  3573  002F02  8055               	bsf	_flagST7540UCG,0,c
  3574                           
  3575                           ;ST7540.c: 301: LATCbits.LATC3 = 0;
  3576  002F04  968B               	bcf	3979,3,c	;volatile
  3577  002F06                     l136:
  3578  002F06  BA83               	btfsc	3971,5,c	;volatile
  3579  002F08  D7FE               	goto	l136
  3580                           
  3581                           ;ST7540.c: 303: SSP2CON1bits.SSPEN = 1;
  3582  002F0A  8A72               	bsf	3954,5,c	;volatile
  3583                           
  3584                           ;ST7540.c: 304: discardUC = SSP2BUF;
  3585  002F0C  CF75 F060          	movff	3957,StartTransmitST7540@discardUC	;volatile
  3586                           
  3587                           ;ST7540.c: 305: SSP2BUF = bufferTXST7540UCAG[0];
  3588  002F10  C200  FF75         	movff	_bufferTXST7540UCAG,3957	;volatile
  3589                           
  3590                           ;ST7540.c: 306: bufferTXNextUCG = 1;
  3591  002F14  0E01               	movlw	1
  3592  002F16  6E50               	movwf	_bufferTXNextUCG,c
  3593  002F18  0012               	return		;funcret
  3594  002F1A                     __end_of_StartTransmitST7540:
  3595                           	opt stack 0
  3596                           tblptru	equ	0xFF8
  3597                           prodh	equ	0xFF4
  3598                           prodl	equ	0xFF3
  3599                           postinc0	equ	0xFEE
  3600                           wreg	equ	0xFE8
  3601                           postinc1	equ	0xFE6
  3602                           postdec1	equ	0xFE5
  3603                           fsr1h	equ	0xFE2
  3604                           fsr1l	equ	0xFE1
  3605                           indf2	equ	0xFDF
  3606                           postinc2	equ	0xFDE
  3607                           postdec2	equ	0xFDD
  3608                           fsr2h	equ	0xFDA
  3609                           fsr2l	equ	0xFD9
  3610                           status	equ	0xFD8
  3611                           
  3612 ;; *************** function _SavePacketNumber *****************
  3613 ;; Defined at:
  3614 ;;		line 244 in file "mastercomms.c"
  3615 ;; Parameters:    Size  Location     Type
  3616 ;;  srcSerialUS     2    5[BANK0 ] unsigned short 
  3617 ;;  packetNumber    1    7[BANK0 ] unsigned char 
  3618 ;; Auto vars:     Size  Location     Type
  3619 ;;  saveSlotC       1   10[BANK0 ] char 
  3620 ;; Return value:  Size  Location     Type
  3621 ;;                  1    wreg      void 
  3622 ;; Registers used:
  3623 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3624 ;; Tracked objects:
  3625 ;;		On entry : 0/0
  3626 ;;		On exit  : 0/0
  3627 ;;		Unchanged: 0/0
  3628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3629 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3630 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3631 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3632 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3633 ;;Total ram usage:        6 bytes
  3634 ;; Hardware stack levels used:    1
  3635 ;; Hardware stack levels required when called:    8
  3636 ;; This function calls:
  3637 ;;		_ClearPacketNumbers
  3638 ;;		_GetPacketSlot
  3639 ;;		_IdlePacketSlot
  3640 ;; This function is called by:
  3641 ;;		_UpdatePacketNumber
  3642 ;;		_CreateAndSend
  3643 ;; This function uses a non-reentrant model
  3644 ;;
  3645                           
  3646                           	psect	text16
  3647  002638                     __ptext16:
  3648                           	opt stack 0
  3649  002638                     _SavePacketNumber:
  3650                           	opt stack 20
  3651                           
  3652                           ;mastercomms.c: 245: signed char saveSlotC;
  3653                           ;mastercomms.c: 247: saveSlotC = GetPacketSlot(srcSerialUS);
  3654                           
  3655                           ;incstack = 0
  3656  002638  C065  F060         	movff	SavePacketNumber@srcSerialUS,GetPacketSlot@srcSerialUS
  3657  00263C  C066  F061         	movff	SavePacketNumber@srcSerialUS+1,GetPacketSlot@srcSerialUS+1
  3658  002640  ECF2  F014         	call	_GetPacketSlot	;wreg free
  3659  002644  0100               	movlb	0	; () banked
  3660  002646  6F6A               	movwf	SavePacketNumber@saveSlotC& (0+255),b
  3661                           
  3662                           ; BSR set to: 0
  3663                           ;mastercomms.c: 248: if(saveSlotC == -1){
  3664  002648  0100               	movlb	0	; () banked
  3665  00264A  296A               	incf	SavePacketNumber@saveSlotC& (0+255),w,b
  3666  00264C  A4D8               	btfss	status,2,c
  3667  00264E  D00E               	goto	l4251
  3668                           
  3669                           ; BSR set to: 0
  3670                           ;mastercomms.c: 249: saveSlotC = IdlePacketSlot();
  3671  002650  EC77  F015         	call	_IdlePacketSlot	;wreg free
  3672  002654  0100               	movlb	0	; () banked
  3673  002656  6F6A               	movwf	SavePacketNumber@saveSlotC& (0+255),b
  3674                           
  3675                           ; BSR set to: 0
  3676                           ;mastercomms.c: 250: if(saveSlotC == -1){
  3677  002658  0100               	movlb	0	; () banked
  3678  00265A  296A               	incf	SavePacketNumber@saveSlotC& (0+255),w,b
  3679  00265C  A4D8               	btfss	status,2,c
  3680  00265E  D006               	goto	l4251
  3681                           
  3682                           ; BSR set to: 0
  3683                           ;mastercomms.c: 251: ClearPacketNumbers();
  3684  002660  ECA9  F014         	call	_ClearPacketNumbers	;wreg free
  3685                           
  3686                           ;mastercomms.c: 252: saveSlotC = IdlePacketSlot();
  3687  002664  EC77  F015         	call	_IdlePacketSlot	;wreg free
  3688  002668  0100               	movlb	0	; () banked
  3689  00266A  6F6A               	movwf	SavePacketNumber@saveSlotC& (0+255),b
  3690  00266C                     l4251:
  3691                           
  3692                           ; BSR set to: 0
  3693                           ;mastercomms.c: 253: }
  3694                           ;mastercomms.c: 254: }
  3695                           ;mastercomms.c: 256: packetNumbersUSAG[1][saveSlotC] = srcSerialUS;
  3696  00266C  0100               	movlb	0	; () banked
  3697  00266E  516A               	movf	SavePacketNumber@saveSlotC& (0+255),w,b
  3698  002670  0D02               	mullw	2
  3699  002672  0E3E               	movlw	low (_packetNumbersUSAG+62)
  3700  002674  24F3               	addwf	prodl,w,c
  3701  002676  6ED9               	movwf	fsr2l,c
  3702  002678  0E04               	movlw	high (_packetNumbersUSAG+62)
  3703  00267A  20F4               	addwfc	prodh,w,c
  3704  00267C  6EDA               	movwf	fsr2h,c
  3705  00267E  C065  FFDE         	movff	SavePacketNumber@srcSerialUS,postinc2
  3706  002682  C066  FFDD         	movff	SavePacketNumber@srcSerialUS+1,postdec2
  3707                           
  3708                           ; BSR set to: 0
  3709                           ;mastercomms.c: 257: packetNumbersUSAG[0][saveSlotC] = packetNumberUC;
  3710  002686  0100               	movlb	0	; () banked
  3711  002688  5167               	movf	SavePacketNumber@packetNumberUC& (0+255),w,b
  3712  00268A  0100               	movlb	0	; () banked
  3713  00268C  6F68               	movwf	??_SavePacketNumber& (0+255),b
  3714  00268E  6B69               	clrf	(??_SavePacketNumber+1)& (0+255),b
  3715  002690  0100               	movlb	0	; () banked
  3716  002692  516A               	movf	SavePacketNumber@saveSlotC& (0+255),w,b
  3717  002694  0D02               	mullw	2
  3718  002696  0E00               	movlw	low _packetNumbersUSAG
  3719  002698  24F3               	addwf	prodl,w,c
  3720  00269A  6ED9               	movwf	fsr2l,c
  3721  00269C  0E04               	movlw	high _packetNumbersUSAG
  3722  00269E  20F4               	addwfc	prodh,w,c
  3723  0026A0  6EDA               	movwf	fsr2h,c
  3724  0026A2  C068  FFDE         	movff	??_SavePacketNumber,postinc2
  3725  0026A6  C069  FFDD         	movff	??_SavePacketNumber+1,postdec2
  3726                           
  3727                           ; BSR set to: 0
  3728  0026AA  0012               	return		;funcret
  3729  0026AC                     __end_of_SavePacketNumber:
  3730                           	opt stack 0
  3731                           tblptru	equ	0xFF8
  3732                           prodh	equ	0xFF4
  3733                           prodl	equ	0xFF3
  3734                           postinc0	equ	0xFEE
  3735                           wreg	equ	0xFE8
  3736                           postinc1	equ	0xFE6
  3737                           postdec1	equ	0xFE5
  3738                           fsr1h	equ	0xFE2
  3739                           fsr1l	equ	0xFE1
  3740                           indf2	equ	0xFDF
  3741                           postinc2	equ	0xFDE
  3742                           postdec2	equ	0xFDD
  3743                           fsr2h	equ	0xFDA
  3744                           fsr2l	equ	0xFD9
  3745                           status	equ	0xFD8
  3746                           
  3747 ;; *************** function _IdlePacketSlot *****************
  3748 ;; Defined at:
  3749 ;;		line 222 in file "mastercomms.c"
  3750 ;; Parameters:    Size  Location     Type
  3751 ;;		None
  3752 ;; Auto vars:     Size  Location     Type
  3753 ;;  iscCountC       1    2[BANK0 ] char 
  3754 ;; Return value:  Size  Location     Type
  3755 ;;                  1    wreg      char 
  3756 ;; Registers used:
  3757 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3758 ;; Tracked objects:
  3759 ;;		On entry : 0/0
  3760 ;;		On exit  : 0/0
  3761 ;;		Unchanged: 0/0
  3762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3764 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3765 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3766 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3767 ;;Total ram usage:        3 bytes
  3768 ;; Hardware stack levels used:    1
  3769 ;; Hardware stack levels required when called:    7
  3770 ;; This function calls:
  3771 ;;		Nothing
  3772 ;; This function is called by:
  3773 ;;		_SavePacketNumber
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           	psect	text17
  3778  002AEE                     __ptext17:
  3779                           	opt stack 0
  3780  002AEE                     _IdlePacketSlot:
  3781                           	opt stack 20
  3782                           
  3783                           ;mastercomms.c: 223: signed char iscCountC;
  3784                           ;mastercomms.c: 225: for(iscCountC = 0; iscCountC < 31; iscCountC++){
  3785                           
  3786                           ; BSR set to: 0
  3787                           ;incstack = 0
  3788  002AEE  0E00               	movlw	0
  3789  002AF0  0100               	movlb	0	; () banked
  3790  002AF2  6F62               	movwf	IdlePacketSlot@iscCountC& (0+255),b
  3791  002AF4                     l4013:
  3792                           
  3793                           ; BSR set to: 0
  3794  002AF4  0100               	movlb	0	; () banked
  3795  002AF6  5162               	movf	IdlePacketSlot@iscCountC& (0+255),w,b
  3796  002AF8  0A80               	xorlw	128
  3797  002AFA  0F61               	addlw	-159
  3798  002AFC  B0D8               	btfsc	status,0,c
  3799  002AFE  D013               	goto	l4027
  3800                           
  3801                           ; BSR set to: 0
  3802                           ;mastercomms.c: 226: if(!packetNumbersUSAG[1][iscCountC])
  3803                           
  3804                           ; BSR set to: 0
  3805                           
  3806                           ; BSR set to: 0
  3807  002B00  0100               	movlb	0	; () banked
  3808  002B02  5162               	movf	IdlePacketSlot@iscCountC& (0+255),w,b
  3809  002B04  0D02               	mullw	2
  3810  002B06  0E3E               	movlw	low (_packetNumbersUSAG+62)
  3811  002B08  24F3               	addwf	prodl,w,c
  3812  002B0A  6ED9               	movwf	fsr2l,c
  3813  002B0C  0E04               	movlw	high (_packetNumbersUSAG+62)
  3814  002B0E  20F4               	addwfc	prodh,w,c
  3815  002B10  6EDA               	movwf	fsr2h,c
  3816  002B12  50DE               	movf	postinc2,w,c
  3817  002B14  10DE               	iorwf	postinc2,w,c
  3818  002B16  A4D8               	btfss	status,2,c
  3819  002B18  D003               	goto	l4023
  3820                           
  3821                           ; BSR set to: 0
  3822                           ;mastercomms.c: 227: return iscCountC;
  3823  002B1A  0100               	movlb	0	; () banked
  3824  002B1C  5162               	movf	IdlePacketSlot@iscCountC& (0+255),w,b
  3825                           
  3826                           ; BSR set to: 0
  3827  002B1E  0012               	return	
  3828  002B20                     l4023:
  3829                           
  3830                           ; BSR set to: 0
  3831  002B20  0100               	movlb	0	; () banked
  3832  002B22  2B62               	incf	IdlePacketSlot@iscCountC& (0+255),f,b
  3833  002B24  D7E7               	goto	l4013
  3834  002B26                     l4027:
  3835                           
  3836                           ; BSR set to: 0
  3837                           ;mastercomms.c: 228: }
  3838                           ;mastercomms.c: 230: return -1;
  3839  002B26  0EFF               	movlw	255
  3840  002B28  0012               	return	
  3841  002B2A                     __end_of_IdlePacketSlot:
  3842                           	opt stack 0
  3843                           tblptru	equ	0xFF8
  3844                           prodh	equ	0xFF4
  3845                           prodl	equ	0xFF3
  3846                           postinc0	equ	0xFEE
  3847                           wreg	equ	0xFE8
  3848                           postinc1	equ	0xFE6
  3849                           postdec1	equ	0xFE5
  3850                           fsr1h	equ	0xFE2
  3851                           fsr1l	equ	0xFE1
  3852                           indf2	equ	0xFDF
  3853                           postinc2	equ	0xFDE
  3854                           postdec2	equ	0xFDD
  3855                           fsr2h	equ	0xFDA
  3856                           fsr2l	equ	0xFD9
  3857                           status	equ	0xFD8
  3858                           
  3859 ;; *************** function _GetPacketSlot *****************
  3860 ;; Defined at:
  3861 ;;		line 233 in file "mastercomms.c"
  3862 ;; Parameters:    Size  Location     Type
  3863 ;;  srcSerialUS     2    0[BANK0 ] unsigned short 
  3864 ;; Auto vars:     Size  Location     Type
  3865 ;;  saveSlotC       1    4[BANK0 ] char 
  3866 ;; Return value:  Size  Location     Type
  3867 ;;                  1    wreg      char 
  3868 ;; Registers used:
  3869 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  3870 ;; Tracked objects:
  3871 ;;		On entry : 0/0
  3872 ;;		On exit  : 0/0
  3873 ;;		Unchanged: 0/0
  3874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3875 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3876 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3877 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3878 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3879 ;;Total ram usage:        5 bytes
  3880 ;; Hardware stack levels used:    1
  3881 ;; Hardware stack levels required when called:    7
  3882 ;; This function calls:
  3883 ;;		Nothing
  3884 ;; This function is called by:
  3885 ;;		_SavePacketNumber
  3886 ;; This function uses a non-reentrant model
  3887 ;;
  3888                           
  3889                           	psect	text18
  3890  0029E4                     __ptext18:
  3891                           	opt stack 0
  3892  0029E4                     _GetPacketSlot:
  3893                           	opt stack 20
  3894                           
  3895                           ;mastercomms.c: 234: signed char saveSlotC;
  3896                           ;mastercomms.c: 236: for(saveSlotC = 0; saveSlotC < 31; saveSlotC++){
  3897                           
  3898                           ; BSR set to: 0
  3899                           ;incstack = 0
  3900  0029E4  0E00               	movlw	0
  3901  0029E6  0100               	movlb	0	; () banked
  3902  0029E8  6F64               	movwf	GetPacketSlot@saveSlotC& (0+255),b
  3903  0029EA                     l4033:
  3904                           
  3905                           ; BSR set to: 0
  3906  0029EA  0100               	movlb	0	; () banked
  3907  0029EC  5164               	movf	GetPacketSlot@saveSlotC& (0+255),w,b
  3908  0029EE  0A80               	xorlw	128
  3909  0029F0  0F61               	addlw	-159
  3910  0029F2  B0D8               	btfsc	status,0,c
  3911  0029F4  D018               	goto	l4047
  3912                           
  3913                           ; BSR set to: 0
  3914                           ;mastercomms.c: 237: if(packetNumbersUSAG[1][saveSlotC] == srcSerialUS)
  3915                           
  3916                           ; BSR set to: 0
  3917                           
  3918                           ; BSR set to: 0
  3919  0029F6  0100               	movlb	0	; () banked
  3920  0029F8  5164               	movf	GetPacketSlot@saveSlotC& (0+255),w,b
  3921  0029FA  0D02               	mullw	2
  3922  0029FC  0E3E               	movlw	low (_packetNumbersUSAG+62)
  3923  0029FE  24F3               	addwf	prodl,w,c
  3924  002A00  6ED9               	movwf	fsr2l,c
  3925  002A02  0E04               	movlw	high (_packetNumbersUSAG+62)
  3926  002A04  20F4               	addwfc	prodh,w,c
  3927  002A06  6EDA               	movwf	fsr2h,c
  3928  002A08  0100               	movlb	0	; () banked
  3929  002A0A  5160               	movf	GetPacketSlot@srcSerialUS& (0+255),w,b
  3930  002A0C  18DE               	xorwf	postinc2,w,c
  3931  002A0E  E108               	bnz	l4043
  3932  002A10  0100               	movlb	0	; () banked
  3933  002A12  5161               	movf	(GetPacketSlot@srcSerialUS+1)& (0+255),w,b
  3934  002A14  18DE               	xorwf	postinc2,w,c
  3935  002A16  A4D8               	btfss	status,2,c
  3936  002A18  D003               	goto	l4043
  3937                           
  3938                           ; BSR set to: 0
  3939                           ;mastercomms.c: 238: return saveSlotC;
  3940  002A1A  0100               	movlb	0	; () banked
  3941  002A1C  5164               	movf	GetPacketSlot@saveSlotC& (0+255),w,b
  3942                           
  3943                           ; BSR set to: 0
  3944  002A1E  0012               	return	
  3945  002A20                     l4043:
  3946                           
  3947                           ; BSR set to: 0
  3948  002A20  0100               	movlb	0	; () banked
  3949  002A22  2B64               	incf	GetPacketSlot@saveSlotC& (0+255),f,b
  3950  002A24  D7E2               	goto	l4033
  3951  002A26                     l4047:
  3952                           
  3953                           ; BSR set to: 0
  3954                           ;mastercomms.c: 239: }
  3955                           ;mastercomms.c: 241: return -1;
  3956  002A26  0EFF               	movlw	255
  3957  002A28  0012               	return	
  3958  002A2A                     __end_of_GetPacketSlot:
  3959                           	opt stack 0
  3960                           tblptru	equ	0xFF8
  3961                           prodh	equ	0xFF4
  3962                           prodl	equ	0xFF3
  3963                           postinc0	equ	0xFEE
  3964                           wreg	equ	0xFE8
  3965                           postinc1	equ	0xFE6
  3966                           postdec1	equ	0xFE5
  3967                           fsr1h	equ	0xFE2
  3968                           fsr1l	equ	0xFE1
  3969                           indf2	equ	0xFDF
  3970                           postinc2	equ	0xFDE
  3971                           postdec2	equ	0xFDD
  3972                           fsr2h	equ	0xFDA
  3973                           fsr2l	equ	0xFD9
  3974                           status	equ	0xFD8
  3975                           
  3976 ;; *************** function _PacketReadParamST7540 *****************
  3977 ;; Defined at:
  3978 ;;		line 323 in file "ST7540.c"
  3979 ;; Parameters:    Size  Location     Type
  3980 ;;  paramName       1    wreg     unsigned char 
  3981 ;; Auto vars:     Size  Location     Type
  3982 ;;  paramName       1   25[BANK0 ] unsigned char 
  3983 ;;  retValueUS      2   26[BANK0 ] unsigned short 
  3984 ;; Return value:  Size  Location     Type
  3985 ;;                  2   21[BANK0 ] unsigned short 
  3986 ;; Registers used:
  3987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3988 ;; Tracked objects:
  3989 ;;		On entry : 0/0
  3990 ;;		On exit  : 0/0
  3991 ;;		Unchanged: 0/0
  3992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  3993 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3994 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3995 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3996 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  3997 ;;Total ram usage:        7 bytes
  3998 ;; Hardware stack levels used:    1
  3999 ;; Hardware stack levels required when called:    9
  4000 ;; This function calls:
  4001 ;;		_CheckCRCST7540
  4002 ;; This function is called by:
  4003 ;;		_RetransmitMessageSt7540
  4004 ;;		_ProcessMasterComms
  4005 ;;		_CreateAndSend
  4006 ;; This function uses a non-reentrant model
  4007 ;;
  4008                           
  4009                           	psect	text19
  4010  001D66                     __ptext19:
  4011                           	opt stack 0
  4012  001D66                     _PacketReadParamST7540:
  4013                           	opt stack 18
  4014                           
  4015                           ; BSR set to: 0
  4016                           ;incstack = 0
  4017                           ;PacketReadParamST7540@paramName stored from wreg
  4018  001D66  0100               	movlb	0	; () banked
  4019  001D68  6F79               	movwf	PacketReadParamST7540@paramName& (0+255),b
  4020                           
  4021                           ;ST7540.c: 324: unsigned short retValueUS = 0;
  4022  001D6A  0E00               	movlw	0
  4023  001D6C  0100               	movlb	0	; () banked
  4024  001D6E  6F7B               	movwf	(PacketReadParamST7540@retValueUS+1)& (0+255),b
  4025  001D70  0E00               	movlw	0
  4026  001D72  6F7A               	movwf	PacketReadParamST7540@retValueUS& (0+255),b
  4027                           
  4028                           ;ST7540.c: 326: switch(paramName){
  4029  001D74  D04F               	goto	l4129
  4030  001D76                     l4107:
  4031                           
  4032                           ; BSR set to: 0
  4033                           ;ST7540.c: 328: return bufferRXST7540UCAG[0] - 9;
  4034  001D76  0EF7               	movlw	247
  4035  001D78  0102               	movlb	2	; () banked
  4036  001D7A  254F               	addwf	_bufferRXST7540UCAG& (0+255),w,b
  4037  001D7C  0100               	movlb	0	; () banked
  4038  001D7E  6F75               	movwf	?_PacketReadParamST7540& (0+255),b
  4039  001D80  0100               	movlb	0	; () banked
  4040  001D82  6B76               	clrf	(?_PacketReadParamST7540+1)& (0+255),b
  4041  001D84  0EFF               	movlw	255
  4042  001D86  2376               	addwfc	(?_PacketReadParamST7540+1)& (0+255),f,b
  4043                           
  4044                           ; BSR set to: 0
  4045  001D88  0012               	return	
  4046  001D8A                     l4111:
  4047                           
  4048                           ; BSR set to: 0
  4049                           ;ST7540.c: 330: retValueUS |= ((unsigned short) bufferRXST7540UCAG[1] << 8);
  4050  001D8A  0102               	movlb	2	; () banked
  4051  001D8C  5150               	movf	(_bufferRXST7540UCAG+1)& (0+255),w,b
  4052  001D8E  0100               	movlb	0	; () banked
  4053  001D90  6F78               	movwf	(??_PacketReadParamST7540+1)& (0+255),b
  4054  001D92  6B77               	clrf	??_PacketReadParamST7540& (0+255),b
  4055  001D94  0100               	movlb	0	; () banked
  4056  001D96  5177               	movf	??_PacketReadParamST7540& (0+255),w,b
  4057  001D98  0100               	movlb	0	; () banked
  4058  001D9A  137A               	iorwf	PacketReadParamST7540@retValueUS& (0+255),f,b
  4059  001D9C  0100               	movlb	0	; () banked
  4060  001D9E  5178               	movf	(??_PacketReadParamST7540+1)& (0+255),w,b
  4061  001DA0  0100               	movlb	0	; () banked
  4062  001DA2  137B               	iorwf	(PacketReadParamST7540@retValueUS+1)& (0+255),f,b
  4063                           
  4064                           ;ST7540.c: 331: retValueUS |= bufferRXST7540UCAG[2];
  4065  001DA4  0102               	movlb	2	; () banked
  4066  001DA6  5151               	movf	(_bufferRXST7540UCAG+2)& (0+255),w,b
  4067  001DA8  0100               	movlb	0	; () banked
  4068  001DAA  137A               	iorwf	PacketReadParamST7540@retValueUS& (0+255),f,b
  4069                           
  4070                           ; BSR set to: 0
  4071                           ;ST7540.c: 332: return retValueUS;
  4072  001DAC  C07A  F075         	movff	PacketReadParamST7540@retValueUS,?_PacketReadParamST7540
  4073  001DB0  C07B  F076         	movff	PacketReadParamST7540@retValueUS+1,?_PacketReadParamST7540+1
  4074                           
  4075                           ; BSR set to: 0
  4076  001DB4  0012               	return	
  4077  001DB6                     l4117:
  4078                           
  4079                           ; BSR set to: 0
  4080                           ;ST7540.c: 334: retValueUS |= ((unsigned short) bufferRXST7540UCAG[3] << 8);
  4081  001DB6  0102               	movlb	2	; () banked
  4082  001DB8  5152               	movf	(_bufferRXST7540UCAG+3)& (0+255),w,b
  4083  001DBA  0100               	movlb	0	; () banked
  4084  001DBC  6F78               	movwf	(??_PacketReadParamST7540+1)& (0+255),b
  4085  001DBE  6B77               	clrf	??_PacketReadParamST7540& (0+255),b
  4086  001DC0  0100               	movlb	0	; () banked
  4087  001DC2  5177               	movf	??_PacketReadParamST7540& (0+255),w,b
  4088  001DC4  0100               	movlb	0	; () banked
  4089  001DC6  137A               	iorwf	PacketReadParamST7540@retValueUS& (0+255),f,b
  4090  001DC8  0100               	movlb	0	; () banked
  4091  001DCA  5178               	movf	(??_PacketReadParamST7540+1)& (0+255),w,b
  4092  001DCC  0100               	movlb	0	; () banked
  4093  001DCE  137B               	iorwf	(PacketReadParamST7540@retValueUS+1)& (0+255),f,b
  4094                           
  4095                           ;ST7540.c: 335: retValueUS |= bufferRXST7540UCAG[4];
  4096  001DD0  0102               	movlb	2	; () banked
  4097  001DD2  5153               	movf	(_bufferRXST7540UCAG+4)& (0+255),w,b
  4098  001DD4  0100               	movlb	0	; () banked
  4099  001DD6  137A               	iorwf	PacketReadParamST7540@retValueUS& (0+255),f,b
  4100                           
  4101                           ; BSR set to: 0
  4102                           ;ST7540.c: 336: return retValueUS;
  4103  001DD8  C07A  F075         	movff	PacketReadParamST7540@retValueUS,?_PacketReadParamST7540
  4104  001DDC  C07B  F076         	movff	PacketReadParamST7540@retValueUS+1,?_PacketReadParamST7540+1
  4105                           
  4106                           ; BSR set to: 0
  4107  001DE0  0012               	return	
  4108  001DE2                     l153:
  4109                           
  4110                           ; BSR set to: 0
  4111                           ;ST7540.c: 338: return bufferRXST7540UCAG[5];
  4112  001DE2  C254  F075         	movff	_bufferRXST7540UCAG+5,?_PacketReadParamST7540
  4113  001DE6  0100               	movlb	0	; () banked
  4114  001DE8  6B76               	clrf	(?_PacketReadParamST7540+1)& (0+255),b
  4115  001DEA  0012               	return	
  4116  001DEC                     l154:
  4117                           
  4118                           ; BSR set to: 0
  4119                           ;ST7540.c: 340: return bufferRXST7540UCAG[6];
  4120  001DEC  C255  F075         	movff	_bufferRXST7540UCAG+6,?_PacketReadParamST7540
  4121  001DF0  0100               	movlb	0	; () banked
  4122  001DF2  6B76               	clrf	(?_PacketReadParamST7540+1)& (0+255),b
  4123  001DF4  0012               	return	
  4124  001DF6                     l4123:
  4125                           
  4126                           ; BSR set to: 0
  4127                           ;ST7540.c: 342: return CheckCRCST7540();
  4128  001DF6  ECB4  F010         	call	_CheckCRCST7540	;wreg free
  4129  001DFA  0100               	movlb	0	; () banked
  4130  001DFC  6F77               	movwf	??_PacketReadParamST7540& (0+255),b
  4131  001DFE  0100               	movlb	0	; () banked
  4132  001E00  5177               	movf	??_PacketReadParamST7540& (0+255),w,b
  4133  001E02  0100               	movlb	0	; () banked
  4134  001E04  6F75               	movwf	?_PacketReadParamST7540& (0+255),b
  4135  001E06  6B76               	clrf	(?_PacketReadParamST7540+1)& (0+255),b
  4136                           
  4137                           ; BSR set to: 0
  4138  001E08  0012               	return	
  4139  001E0A                     l156:
  4140                           
  4141                           ; BSR set to: 0
  4142                           ;ST7540.c: 344: return bufferTXST7540UCAG[9];
  4143  001E0A  C209  F075         	movff	_bufferTXST7540UCAG+9,?_PacketReadParamST7540
  4144  001E0E  0100               	movlb	0	; () banked
  4145  001E10  6B76               	clrf	(?_PacketReadParamST7540+1)& (0+255),b
  4146  001E12  0012               	return	
  4147  001E14                     l4129:
  4148                           
  4149                           ; BSR set to: 0
  4150  001E14  0100               	movlb	0	; () banked
  4151  001E16  5179               	movf	PacketReadParamST7540@paramName& (0+255),w,b
  4152                           
  4153                           ; Switch size 1, requested type "space"
  4154                           ; Number of cases is 7, Range of values is 0 to 6
  4155                           ; switch strategies available:
  4156                           ; Name         Instructions Cycles
  4157                           ; simple_byte           22    12 (average)
  4158                           ;	Chosen strategy is simple_byte
  4159  001E18  0A00               	xorlw	0	; case 0
  4160  001E1A  B4D8               	btfsc	status,2,c
  4161  001E1C  D7AC               	goto	l4107
  4162  001E1E  0A01               	xorlw	1	; case 1
  4163  001E20  B4D8               	btfsc	status,2,c
  4164  001E22  D7B3               	goto	l4111
  4165  001E24  0A03               	xorlw	3	; case 2
  4166  001E26  B4D8               	btfsc	status,2,c
  4167  001E28  D7C6               	goto	l4117
  4168  001E2A  0A01               	xorlw	1	; case 3
  4169  001E2C  B4D8               	btfsc	status,2,c
  4170  001E2E  D7D9               	goto	l153
  4171  001E30  0A07               	xorlw	7	; case 4
  4172  001E32  B4D8               	btfsc	status,2,c
  4173  001E34  D7DB               	goto	l154
  4174  001E36  0A01               	xorlw	1	; case 5
  4175  001E38  B4D8               	btfsc	status,2,c
  4176  001E3A  D7DD               	goto	l4123
  4177  001E3C  0A03               	xorlw	3	; case 6
  4178  001E3E  B4D8               	btfsc	status,2,c
  4179  001E40  D7E4               	goto	l156
  4180                           
  4181                           ; BSR set to: 0
  4182                           ;ST7540.c: 347: return 0;
  4183                           
  4184                           ; BSR set to: 0
  4185  001E42  0E00               	movlw	0
  4186  001E44  0100               	movlb	0	; () banked
  4187  001E46  6F76               	movwf	(?_PacketReadParamST7540+1)& (0+255),b
  4188  001E48  0E00               	movlw	0
  4189  001E4A  6F75               	movwf	?_PacketReadParamST7540& (0+255),b
  4190  001E4C  0012               	return	
  4191  001E4E                     __end_of_PacketReadParamST7540:
  4192                           	opt stack 0
  4193                           tblptru	equ	0xFF8
  4194                           prodh	equ	0xFF4
  4195                           prodl	equ	0xFF3
  4196                           postinc0	equ	0xFEE
  4197                           wreg	equ	0xFE8
  4198                           postinc1	equ	0xFE6
  4199                           postdec1	equ	0xFE5
  4200                           fsr1h	equ	0xFE2
  4201                           fsr1l	equ	0xFE1
  4202                           indf2	equ	0xFDF
  4203                           postinc2	equ	0xFDE
  4204                           postdec2	equ	0xFDD
  4205                           fsr2h	equ	0xFDA
  4206                           fsr2l	equ	0xFD9
  4207                           status	equ	0xFD8
  4208                           
  4209 ;; *************** function _CheckCRCST7540 *****************
  4210 ;; Defined at:
  4211 ;;		line 358 in file "ST7540.c"
  4212 ;; Parameters:    Size  Location     Type
  4213 ;;		None
  4214 ;; Auto vars:     Size  Location     Type
  4215 ;;  receivedCRCU    2   18[BANK0 ] unsigned short 
  4216 ;;  expectedCRCU    2   16[BANK0 ] unsigned short 
  4217 ;;  packetLenUC     1   20[BANK0 ] unsigned char 
  4218 ;; Return value:  Size  Location     Type
  4219 ;;                  1    wreg      unsigned char 
  4220 ;; Registers used:
  4221 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4222 ;; Tracked objects:
  4223 ;;		On entry : 0/0
  4224 ;;		On exit  : 0/0
  4225 ;;		Unchanged: 0/0
  4226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4227 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4228 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4229 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4230 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4231 ;;Total ram usage:        8 bytes
  4232 ;; Hardware stack levels used:    1
  4233 ;; Hardware stack levels required when called:    8
  4234 ;; This function calls:
  4235 ;;		_CRC16
  4236 ;; This function is called by:
  4237 ;;		_PacketReadParamST7540
  4238 ;; This function uses a non-reentrant model
  4239 ;;
  4240                           
  4241                           	psect	text20
  4242  002168                     __ptext20:
  4243                           	opt stack 0
  4244  002168                     _CheckCRCST7540:
  4245                           	opt stack 18
  4246                           
  4247                           ;ST7540.c: 359: unsigned short expectedCRCUS;
  4248                           ;ST7540.c: 360: unsigned short receivedCRCUS = 0;
  4249                           
  4250                           ; BSR set to: 0
  4251                           ;incstack = 0
  4252  002168  0E00               	movlw	0
  4253  00216A  0100               	movlb	0	; () banked
  4254  00216C  6F73               	movwf	(CheckCRCST7540@receivedCRCUS+1)& (0+255),b
  4255  00216E  0E00               	movlw	0
  4256  002170  6F72               	movwf	CheckCRCST7540@receivedCRCUS& (0+255),b
  4257                           
  4258                           ; BSR set to: 0
  4259                           ;ST7540.c: 361: unsigned char packetLenUC;
  4260                           ;ST7540.c: 363: packetLenUC = bufferRXST7540UCAG[0]-2;
  4261  002172  0102               	movlb	2	; () banked
  4262  002174  514F               	movf	_bufferRXST7540UCAG& (0+255),w,b
  4263  002176  0FFE               	addlw	254
  4264  002178  0100               	movlb	0	; () banked
  4265  00217A  6F74               	movwf	CheckCRCST7540@packetLenUC& (0+255),b
  4266                           
  4267                           ; BSR set to: 0
  4268                           ;ST7540.c: 364: expectedCRCUS = CRC16(bufferRXST7540UCAG, packetLenUC);
  4269  00217C  0E4F               	movlw	low _bufferRXST7540UCAG
  4270  00217E  0100               	movlb	0	; () banked
  4271  002180  6F60               	movwf	CRC16@data_p& (0+255),b
  4272  002182  0E02               	movlw	high _bufferRXST7540UCAG
  4273  002184  0100               	movlb	0	; () banked
  4274  002186  6F61               	movwf	(CRC16@data_p+1)& (0+255),b
  4275  002188  C074  F062         	movff	CheckCRCST7540@packetLenUC,CRC16@length
  4276  00218C  0100               	movlb	0	; () banked
  4277  00218E  6B63               	clrf	(CRC16@length+1)& (0+255),b
  4278  002190  EC82  F00B         	call	_CRC16	;wreg free
  4279  002194  C060  F070         	movff	?_CRC16,CheckCRCST7540@expectedCRCUS
  4280  002198  C061  F071         	movff	?_CRC16+1,CheckCRCST7540@expectedCRCUS+1
  4281                           
  4282                           ;ST7540.c: 365: receivedCRCUS |= ((unsigned short) bufferRXST7540UCAG[packetLenUC] << 8)
      +                          ;
  4283  00219C  0100               	movlb	0	; () banked
  4284  00219E  5174               	movf	CheckCRCST7540@packetLenUC& (0+255),w,b
  4285  0021A0  0D01               	mullw	1
  4286  0021A2  0E4F               	movlw	low _bufferRXST7540UCAG
  4287  0021A4  24F3               	addwf	prodl,w,c
  4288  0021A6  6ED9               	movwf	fsr2l,c
  4289  0021A8  0E02               	movlw	high _bufferRXST7540UCAG
  4290  0021AA  20F4               	addwfc	prodh,w,c
  4291  0021AC  6EDA               	movwf	fsr2h,c
  4292  0021AE  50DF               	movf	indf2,w,c
  4293  0021B0  0100               	movlb	0	; () banked
  4294  0021B2  6F6D               	movwf	??_CheckCRCST7540& (0+255),b
  4295  0021B4  0100               	movlb	0	; () banked
  4296  0021B6  516D               	movf	??_CheckCRCST7540& (0+255),w,b
  4297  0021B8  0100               	movlb	0	; () banked
  4298  0021BA  6F6F               	movwf	(??_CheckCRCST7540+2)& (0+255),b
  4299  0021BC  6B6E               	clrf	(??_CheckCRCST7540+1)& (0+255),b
  4300  0021BE  0100               	movlb	0	; () banked
  4301  0021C0  516E               	movf	(??_CheckCRCST7540+1)& (0+255),w,b
  4302  0021C2  0100               	movlb	0	; () banked
  4303  0021C4  1372               	iorwf	CheckCRCST7540@receivedCRCUS& (0+255),f,b
  4304  0021C6  0100               	movlb	0	; () banked
  4305  0021C8  516F               	movf	(??_CheckCRCST7540+2)& (0+255),w,b
  4306  0021CA  0100               	movlb	0	; () banked
  4307  0021CC  1373               	iorwf	(CheckCRCST7540@receivedCRCUS+1)& (0+255),f,b
  4308                           
  4309                           ; BSR set to: 0
  4310                           ;ST7540.c: 366: receivedCRCUS |= bufferRXST7540UCAG[packetLenUC+1];
  4311  0021CE  0100               	movlb	0	; () banked
  4312  0021D0  5174               	movf	CheckCRCST7540@packetLenUC& (0+255),w,b
  4313  0021D2  0100               	movlb	0	; () banked
  4314  0021D4  6F6D               	movwf	??_CheckCRCST7540& (0+255),b
  4315  0021D6  6B6E               	clrf	(??_CheckCRCST7540+1)& (0+255),b
  4316  0021D8  0E01               	movlw	1
  4317  0021DA  0100               	movlb	0	; () banked
  4318  0021DC  276D               	addwf	??_CheckCRCST7540& (0+255),f,b
  4319  0021DE  0E00               	movlw	0
  4320  0021E0  236E               	addwfc	(??_CheckCRCST7540+1)& (0+255),f,b
  4321  0021E2  0E4F               	movlw	low _bufferRXST7540UCAG
  4322  0021E4  0100               	movlb	0	; () banked
  4323  0021E6  256D               	addwf	??_CheckCRCST7540& (0+255),w,b
  4324  0021E8  6ED9               	movwf	fsr2l,c
  4325  0021EA  0E02               	movlw	high _bufferRXST7540UCAG
  4326  0021EC  0100               	movlb	0	; () banked
  4327  0021EE  216E               	addwfc	(??_CheckCRCST7540+1)& (0+255),w,b
  4328  0021F0  6EDA               	movwf	fsr2h,c
  4329  0021F2  50DF               	movf	indf2,w,c
  4330  0021F4  0100               	movlb	0	; () banked
  4331  0021F6  6F6F               	movwf	(??_CheckCRCST7540+2)& (0+255),b
  4332  0021F8  0100               	movlb	0	; () banked
  4333  0021FA  516F               	movf	(??_CheckCRCST7540+2)& (0+255),w,b
  4334  0021FC  0100               	movlb	0	; () banked
  4335  0021FE  1372               	iorwf	CheckCRCST7540@receivedCRCUS& (0+255),f,b
  4336                           
  4337                           ; BSR set to: 0
  4338                           ;ST7540.c: 368: return (expectedCRCUS == receivedCRCUS);
  4339  002200  0100               	movlb	0	; () banked
  4340  002202  5172               	movf	CheckCRCST7540@receivedCRCUS& (0+255),w,b
  4341  002204  0100               	movlb	0	; () banked
  4342  002206  1970               	xorwf	CheckCRCST7540@expectedCRCUS& (0+255),w,b
  4343  002208  E108               	bnz	u3360
  4344  00220A  0100               	movlb	0	; () banked
  4345  00220C  5173               	movf	(CheckCRCST7540@receivedCRCUS+1)& (0+255),w,b
  4346  00220E  0100               	movlb	0	; () banked
  4347  002210  1971               	xorwf	(CheckCRCST7540@expectedCRCUS+1)& (0+255),w,b
  4348  002212  A4D8               	btfss	status,2,c
  4349  002214  D002               	goto	u3360
  4350  002216  0E01               	movlw	1
  4351  002218  0012               	return	
  4352  00221A                     u3360:
  4353  00221A  0E00               	movlw	0
  4354  00221C  0012               	return	
  4355  00221E                     __end_of_CheckCRCST7540:
  4356                           	opt stack 0
  4357                           tblptru	equ	0xFF8
  4358                           prodh	equ	0xFF4
  4359                           prodl	equ	0xFF3
  4360                           postinc0	equ	0xFEE
  4361                           wreg	equ	0xFE8
  4362                           postinc1	equ	0xFE6
  4363                           postdec1	equ	0xFE5
  4364                           fsr1h	equ	0xFE2
  4365                           fsr1l	equ	0xFE1
  4366                           indf2	equ	0xFDF
  4367                           postinc2	equ	0xFDE
  4368                           postdec2	equ	0xFDD
  4369                           fsr2h	equ	0xFDA
  4370                           fsr2l	equ	0xFD9
  4371                           status	equ	0xFD8
  4372                           
  4373 ;; *************** function _CreateMessageST7540 *****************
  4374 ;; Defined at:
  4375 ;;		line 271 in file "ST7540.c"
  4376 ;; Parameters:    Size  Location     Type
  4377 ;;  packetSource    2   13[BANK0 ] unsigned short 
  4378 ;;  packetDestUS    2   15[BANK0 ] unsigned short 
  4379 ;;  commandUC       1   17[BANK0 ] unsigned char 
  4380 ;;  dataLenUC       1   18[BANK0 ] unsigned char 
  4381 ;;  dataBuf         2   19[BANK0 ] PTR unsigned char 
  4382 ;;		 -> ProcessSerialCMD@serialListUSA(60), ReturnBoosterData@partRespUSA(62), ReturnBoosterData@allRespUSA(62), NULL(0)
      +, 
  4383 ;;		 -> iscSerialUSG(2), bufferRXST7540UCAG(75), 
  4384 ;; Auto vars:     Size  Location     Type
  4385 ;;  packetCRCUS     2   23[BANK0 ] unsigned short 
  4386 ;;  dataBufLocUC    1   25[BANK0 ] unsigned char 
  4387 ;; Return value:  Size  Location     Type
  4388 ;;                  1    wreg      void 
  4389 ;; Registers used:
  4390 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4391 ;; Tracked objects:
  4392 ;;		On entry : 0/0
  4393 ;;		On exit  : 0/0
  4394 ;;		Unchanged: 0/0
  4395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4396 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4397 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4398 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4399 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4400 ;;Total ram usage:       13 bytes
  4401 ;; Hardware stack levels used:    1
  4402 ;; Hardware stack levels required when called:    8
  4403 ;; This function calls:
  4404 ;;		_CRC16
  4405 ;; This function is called by:
  4406 ;;		_RetransmitMessageSt7540
  4407 ;;		_CreateAndSend
  4408 ;; This function uses a non-reentrant model
  4409 ;;
  4410                           
  4411                           	psect	text21
  4412  001B66                     __ptext21:
  4413                           	opt stack 0
  4414  001B66                     _CreateMessageST7540:
  4415                           	opt stack 19
  4416                           
  4417                           ;ST7540.c: 272: unsigned char dataBufLocUC;
  4418                           ;ST7540.c: 273: unsigned short packetCRCUS;
  4419                           ;ST7540.c: 275: bufferTXST7540UCAG[0] = 0xAA;
  4420                           
  4421                           ; BSR set to: 0
  4422                           ;incstack = 0
  4423  001B66  0EAA               	movlw	170
  4424  001B68  0102               	movlb	2	; () banked
  4425  001B6A  6F00               	movwf	_bufferTXST7540UCAG& (0+255),b
  4426                           
  4427                           ;ST7540.c: 276: bufferTXST7540UCAG[1] = 0xAA;
  4428  001B6C  0EAA               	movlw	170
  4429  001B6E  0102               	movlb	2	; () banked
  4430  001B70  6F01               	movwf	(_bufferTXST7540UCAG+1)& (0+255),b
  4431                           
  4432                           ;ST7540.c: 277: bufferTXST7540UCAG[2] = (unsigned long short) 0x9b58 >> 8;
  4433  001B72  0E9B               	movlw	155
  4434  001B74  0102               	movlb	2	; () banked
  4435  001B76  6F02               	movwf	(_bufferTXST7540UCAG+2)& (0+255),b
  4436                           
  4437                           ;ST7540.c: 278: bufferTXST7540UCAG[3] = (unsigned long short) 0x9b58;
  4438  001B78  0E58               	movlw	88
  4439  001B7A  0102               	movlb	2	; () banked
  4440  001B7C  6F03               	movwf	(_bufferTXST7540UCAG+3)& (0+255),b
  4441                           
  4442                           ; BSR set to: 2
  4443                           ;ST7540.c: 279: bufferTXST7540UCAG[4] = 9 + dataLenUC;
  4444  001B7E  0100               	movlb	0	; () banked
  4445  001B80  5172               	movf	CreateMessageST7540@dataLenUC& (0+255),w,b
  4446  001B82  0F09               	addlw	9
  4447  001B84  0102               	movlb	2	; () banked
  4448  001B86  6F04               	movwf	(_bufferTXST7540UCAG+4)& (0+255),b
  4449                           
  4450                           ; BSR set to: 2
  4451                           ;ST7540.c: 280: bufferTXST7540UCAG[5] = packetSourceUS >> 8;
  4452  001B88  0100               	movlb	0	; () banked
  4453  001B8A  516E               	movf	(CreateMessageST7540@packetSourceUS+1)& (0+255),w,b
  4454  001B8C  0102               	movlb	2	; () banked
  4455  001B8E  6F05               	movwf	(_bufferTXST7540UCAG+5)& (0+255),b
  4456                           
  4457                           ; BSR set to: 2
  4458                           ;ST7540.c: 281: bufferTXST7540UCAG[6] = packetSourceUS;
  4459  001B90  C06D  F206         	movff	CreateMessageST7540@packetSourceUS,_bufferTXST7540UCAG+6
  4460                           
  4461                           ; BSR set to: 2
  4462                           ;ST7540.c: 282: bufferTXST7540UCAG[7] = packetDestUS >> 8;
  4463  001B94  0100               	movlb	0	; () banked
  4464  001B96  5170               	movf	(CreateMessageST7540@packetDestUS+1)& (0+255),w,b
  4465  001B98  0102               	movlb	2	; () banked
  4466  001B9A  6F07               	movwf	(_bufferTXST7540UCAG+7)& (0+255),b
  4467                           
  4468                           ; BSR set to: 2
  4469                           ;ST7540.c: 283: bufferTXST7540UCAG[8] = packetDestUS;
  4470  001B9C  C06F  F208         	movff	CreateMessageST7540@packetDestUS,_bufferTXST7540UCAG+8
  4471                           
  4472                           ; BSR set to: 2
  4473                           ;ST7540.c: 284: bufferTXST7540UCAG[9] = packetNumberUCG++;
  4474  001BA0  C0DB  F209         	movff	_packetNumberUCG,_bufferTXST7540UCAG+9
  4475                           
  4476                           ; BSR set to: 2
  4477  001BA4  0100               	movlb	0	; () banked
  4478  001BA6  2BDB               	incf	_packetNumberUCG& (0+255),f,b
  4479                           
  4480                           ; BSR set to: 0
  4481                           ;ST7540.c: 285: bufferTXST7540UCAG[10] = commandUC;
  4482  001BA8  C071  F20A         	movff	CreateMessageST7540@commandUC,_bufferTXST7540UCAG+10
  4483                           
  4484                           ; BSR set to: 0
  4485                           ;ST7540.c: 287: for(dataBufLocUC = 0; dataBufLocUC < dataLenUC; dataBufLocUC++)
  4486  001BAC  0E00               	movlw	0
  4487  001BAE  0100               	movlb	0	; () banked
  4488  001BB0  6F79               	movwf	CreateMessageST7540@dataBufLocUC& (0+255),b
  4489  001BB2  D021               	goto	l4159
  4490  001BB4                     l4155:
  4491                           
  4492                           ; BSR set to: 0
  4493                           ;ST7540.c: 288: bufferTXST7540UCAG[dataBufLocUC + 11] = dataBuf[dataBufLocUC];
  4494  001BB4  0100               	movlb	0	; () banked
  4495  001BB6  5179               	movf	CreateMessageST7540@dataBufLocUC& (0+255),w,b
  4496  001BB8  0D01               	mullw	1
  4497  001BBA  50F3               	movf	prodl,w,c
  4498  001BBC  0100               	movlb	0	; () banked
  4499  001BBE  2573               	addwf	CreateMessageST7540@dataBuf& (0+255),w,b
  4500  001BC0  6ED9               	movwf	fsr2l,c
  4501  001BC2  50F4               	movf	prodh,w,c
  4502  001BC4  0100               	movlb	0	; () banked
  4503  001BC6  2174               	addwfc	(CreateMessageST7540@dataBuf+1)& (0+255),w,b
  4504  001BC8  6EDA               	movwf	fsr2h,c
  4505  001BCA  0100               	movlb	0	; () banked
  4506  001BCC  5179               	movf	CreateMessageST7540@dataBufLocUC& (0+255),w,b
  4507  001BCE  0100               	movlb	0	; () banked
  4508  001BD0  6F75               	movwf	??_CreateMessageST7540& (0+255),b
  4509  001BD2  6B76               	clrf	(??_CreateMessageST7540+1)& (0+255),b
  4510  001BD4  0E0B               	movlw	11
  4511  001BD6  0100               	movlb	0	; () banked
  4512  001BD8  2775               	addwf	??_CreateMessageST7540& (0+255),f,b
  4513  001BDA  0E00               	movlw	0
  4514  001BDC  2376               	addwfc	(??_CreateMessageST7540+1)& (0+255),f,b
  4515  001BDE  0E00               	movlw	low _bufferTXST7540UCAG
  4516  001BE0  0100               	movlb	0	; () banked
  4517  001BE2  2575               	addwf	??_CreateMessageST7540& (0+255),w,b
  4518  001BE4  6EE1               	movwf	fsr1l,c
  4519  001BE6  0E02               	movlw	high _bufferTXST7540UCAG
  4520  001BE8  0100               	movlb	0	; () banked
  4521  001BEA  2176               	addwfc	(??_CreateMessageST7540+1)& (0+255),w,b
  4522  001BEC  6EE2               	movwf	fsr1h,c
  4523  001BEE  CFDF FFE7          	movff	indf2,indf1
  4524                           
  4525                           ; BSR set to: 0
  4526  001BF2  0100               	movlb	0	; () banked
  4527  001BF4  2B79               	incf	CreateMessageST7540@dataBufLocUC& (0+255),f,b
  4528  001BF6                     l4159:
  4529                           
  4530                           ; BSR set to: 0
  4531  001BF6  0100               	movlb	0	; () banked
  4532  001BF8  5172               	movf	CreateMessageST7540@dataLenUC& (0+255),w,b
  4533  001BFA  0100               	movlb	0	; () banked
  4534  001BFC  5D79               	subwf	CreateMessageST7540@dataBufLocUC& (0+255),w,b
  4535  001BFE  A0D8               	btfss	status,0,c
  4536  001C00  D7D9               	goto	l4155
  4537                           
  4538                           ; BSR set to: 0
  4539                           ;ST7540.c: 289: dataBufLocUC += 11;
  4540                           
  4541                           ; BSR set to: 0
  4542  001C02  0E0B               	movlw	11
  4543  001C04  0100               	movlb	0	; () banked
  4544  001C06  2779               	addwf	CreateMessageST7540@dataBufLocUC& (0+255),f,b
  4545                           
  4546                           ; BSR set to: 0
  4547                           ;ST7540.c: 291: packetCRCUS = CRC16(bufferTXST7540UCAG + 4, 9 + dataLenUC - 2);
  4548  001C08  0E04               	movlw	low (_bufferTXST7540UCAG+4)
  4549  001C0A  0100               	movlb	0	; () banked
  4550  001C0C  6F60               	movwf	CRC16@data_p& (0+255),b
  4551  001C0E  0E02               	movlw	high (_bufferTXST7540UCAG+4)
  4552  001C10  0100               	movlb	0	; () banked
  4553  001C12  6F61               	movwf	(CRC16@data_p+1)& (0+255),b
  4554  001C14  0E07               	movlw	7
  4555  001C16  0100               	movlb	0	; () banked
  4556  001C18  2572               	addwf	CreateMessageST7540@dataLenUC& (0+255),w,b
  4557  001C1A  0100               	movlb	0	; () banked
  4558  001C1C  6F62               	movwf	CRC16@length& (0+255),b
  4559  001C1E  0100               	movlb	0	; () banked
  4560  001C20  6B63               	clrf	(CRC16@length+1)& (0+255),b
  4561  001C22  0E00               	movlw	0
  4562  001C24  2363               	addwfc	(CRC16@length+1)& (0+255),f,b
  4563  001C26  EC82  F00B         	call	_CRC16	;wreg free
  4564  001C2A  C060  F077         	movff	?_CRC16,CreateMessageST7540@packetCRCUS
  4565  001C2E  C061  F078         	movff	?_CRC16+1,CreateMessageST7540@packetCRCUS+1
  4566                           
  4567                           ;ST7540.c: 292: bufferTXST7540UCAG[dataBufLocUC++] = packetCRCUS >> 8;
  4568  001C32  0100               	movlb	0	; () banked
  4569  001C34  5179               	movf	CreateMessageST7540@dataBufLocUC& (0+255),w,b
  4570  001C36  0D01               	mullw	1
  4571  001C38  0E00               	movlw	low _bufferTXST7540UCAG
  4572  001C3A  24F3               	addwf	prodl,w,c
  4573  001C3C  6ED9               	movwf	fsr2l,c
  4574  001C3E  0E02               	movlw	high _bufferTXST7540UCAG
  4575  001C40  20F4               	addwfc	prodh,w,c
  4576  001C42  6EDA               	movwf	fsr2h,c
  4577  001C44  0100               	movlb	0	; () banked
  4578  001C46  5178               	movf	(CreateMessageST7540@packetCRCUS+1)& (0+255),w,b
  4579  001C48  6EDF               	movwf	indf2,c
  4580                           
  4581                           ; BSR set to: 0
  4582  001C4A  0100               	movlb	0	; () banked
  4583  001C4C  2B79               	incf	CreateMessageST7540@dataBufLocUC& (0+255),f,b
  4584                           
  4585                           ; BSR set to: 0
  4586                           ;ST7540.c: 293: bufferTXST7540UCAG[dataBufLocUC] = packetCRCUS;
  4587  001C4E  0100               	movlb	0	; () banked
  4588  001C50  5179               	movf	CreateMessageST7540@dataBufLocUC& (0+255),w,b
  4589  001C52  0D01               	mullw	1
  4590  001C54  0E00               	movlw	low _bufferTXST7540UCAG
  4591  001C56  24F3               	addwf	prodl,w,c
  4592  001C58  6ED9               	movwf	fsr2l,c
  4593  001C5A  0E02               	movlw	high _bufferTXST7540UCAG
  4594  001C5C  20F4               	addwfc	prodh,w,c
  4595  001C5E  6EDA               	movwf	fsr2h,c
  4596  001C60  C077  FFDF         	movff	CreateMessageST7540@packetCRCUS,indf2
  4597                           
  4598                           ; BSR set to: 0
  4599                           ;ST7540.c: 294: bufferTXLenUCG = dataBufLocUC;
  4600  001C64  C079  F04F         	movff	CreateMessageST7540@dataBufLocUC,_bufferTXLenUCG
  4601                           
  4602                           ; BSR set to: 0
  4603  001C68  0012               	return		;funcret
  4604  001C6A                     __end_of_CreateMessageST7540:
  4605                           	opt stack 0
  4606                           tblptru	equ	0xFF8
  4607                           prodh	equ	0xFF4
  4608                           prodl	equ	0xFF3
  4609                           postinc0	equ	0xFEE
  4610                           wreg	equ	0xFE8
  4611                           indf1	equ	0xFE7
  4612                           postinc1	equ	0xFE6
  4613                           postdec1	equ	0xFE5
  4614                           fsr1h	equ	0xFE2
  4615                           fsr1l	equ	0xFE1
  4616                           indf2	equ	0xFDF
  4617                           postinc2	equ	0xFDE
  4618                           postdec2	equ	0xFDD
  4619                           fsr2h	equ	0xFDA
  4620                           fsr2l	equ	0xFD9
  4621                           status	equ	0xFD8
  4622                           
  4623 ;; *************** function _CRC16 *****************
  4624 ;; Defined at:
  4625 ;;		line 19 in file "crc16.c"
  4626 ;; Parameters:    Size  Location     Type
  4627 ;;  data_p          2    0[BANK0 ] PTR unsigned char 
  4628 ;;		 -> bufferRXST7540UCAG(75), bufferTXST7540UCAG(79), 
  4629 ;;  length          2    2[BANK0 ] unsigned short 
  4630 ;; Auto vars:     Size  Location     Type
  4631 ;;  crc             2   11[BANK0 ] unsigned int 
  4632 ;;  data            2    8[BANK0 ] unsigned int 
  4633 ;;  i               1   10[BANK0 ] unsigned char 
  4634 ;; Return value:  Size  Location     Type
  4635 ;;                  2    0[BANK0 ] unsigned short 
  4636 ;; Registers used:
  4637 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4638 ;; Tracked objects:
  4639 ;;		On entry : 0/0
  4640 ;;		On exit  : 0/0
  4641 ;;		Unchanged: 0/0
  4642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4643 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4644 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4645 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4646 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4647 ;;Total ram usage:       13 bytes
  4648 ;; Hardware stack levels used:    1
  4649 ;; Hardware stack levels required when called:    7
  4650 ;; This function calls:
  4651 ;;		Nothing
  4652 ;; This function is called by:
  4653 ;;		_CreateMessageST7540
  4654 ;;		_CheckCRCST7540
  4655 ;; This function uses a non-reentrant model
  4656 ;;
  4657                           
  4658                           	psect	text22
  4659  001704                     __ptext22:
  4660                           	opt stack 0
  4661  001704                     _CRC16:
  4662                           	opt stack 18
  4663                           
  4664                           ;crc16.c: 21: unsigned char i;
  4665                           ;crc16.c: 22: unsigned int data;
  4666                           ;crc16.c: 23: unsigned int crc = 0xffff;
  4667                           
  4668                           ; BSR set to: 0
  4669                           ;incstack = 0
  4670  001704  0100               	movlb	0	; () banked
  4671  001706  696B               	setf	CRC16@crc& (0+255),b
  4672  001708  696C               	setf	(CRC16@crc+1)& (0+255),b
  4673                           
  4674                           ; BSR set to: 0
  4675                           ;crc16.c: 25: if (length == 0)
  4676  00170A  0100               	movlb	0	; () banked
  4677  00170C  5162               	movf	CRC16@length& (0+255),w,b
  4678  00170E  0100               	movlb	0	; () banked
  4679  001710  1163               	iorwf	(CRC16@length+1)& (0+255),w,b
  4680  001712  A4D8               	btfss	status,2,c
  4681  001714  D009               	goto	l3869
  4682                           
  4683                           ; BSR set to: 0
  4684                           ;crc16.c: 26: return (~crc);
  4685  001716  0100               	movlb	0	; () banked
  4686  001718  1D6B               	comf	CRC16@crc& (0+255),w,b
  4687  00171A  0100               	movlb	0	; () banked
  4688  00171C  6F60               	movwf	?_CRC16& (0+255),b
  4689  00171E  0100               	movlb	0	; () banked
  4690  001720  1D6C               	comf	(CRC16@crc+1)& (0+255),w,b
  4691  001722  0100               	movlb	0	; () banked
  4692  001724  6F61               	movwf	(?_CRC16+1)& (0+255),b
  4693                           
  4694                           ; BSR set to: 0
  4695  001726  0012               	return	
  4696  001728                     l3869:
  4697                           
  4698                           ; BSR set to: 0
  4699                           ;crc16.c: 29: {
  4700                           ;crc16.c: 30: for (i=0, data=(unsigned int)0xff & *data_p++;
  4701  001728  0E00               	movlw	0
  4702  00172A  0100               	movlb	0	; () banked
  4703  00172C  6F6A               	movwf	CRC16@i& (0+255),b
  4704                           
  4705                           ; BSR set to: 0
  4706  00172E  C060  FFD9         	movff	CRC16@data_p,fsr2l
  4707  001732  C061  FFDA         	movff	CRC16@data_p+1,fsr2h
  4708  001736  50DF               	movf	indf2,w,c
  4709  001738  0100               	movlb	0	; () banked
  4710  00173A  6F64               	movwf	??_CRC16& (0+255),b
  4711  00173C  0100               	movlb	0	; () banked
  4712  00173E  5164               	movf	??_CRC16& (0+255),w,b
  4713  001740  0100               	movlb	0	; () banked
  4714  001742  6F68               	movwf	CRC16@data& (0+255),b
  4715  001744  6B69               	clrf	(CRC16@data+1)& (0+255),b
  4716                           
  4717                           ; BSR set to: 0
  4718  001746  0100               	movlb	0	; () banked
  4719  001748  4B60               	infsnz	CRC16@data_p& (0+255),f,b
  4720  00174A  2B61               	incf	(CRC16@data_p+1)& (0+255),f,b
  4721  00174C                     l3875:
  4722                           
  4723                           ; BSR set to: 0
  4724                           ;crc16.c: 31: i < 8;
  4725                           ;crc16.c: 32: i++, data >>= 1)
  4726  00174C  0E07               	movlw	7
  4727  00174E  0100               	movlb	0	; () banked
  4728  001750  656A               	cpfsgt	CRC16@i& (0+255),b
  4729  001752  D001               	goto	l3879
  4730  001754  D041               	goto	l3887
  4731  001756                     l3879:
  4732                           
  4733                           ; BSR set to: 0
  4734                           ;crc16.c: 33: {
  4735                           ;crc16.c: 34: if ((crc & 0x0001) ^ (data & 0x0001))
  4736  001756  0E01               	movlw	1
  4737  001758  0100               	movlb	0	; () banked
  4738  00175A  1568               	andwf	CRC16@data& (0+255),w,b
  4739  00175C  0100               	movlb	0	; () banked
  4740  00175E  6F64               	movwf	??_CRC16& (0+255),b
  4741  001760  0E00               	movlw	0
  4742  001762  0100               	movlb	0	; () banked
  4743  001764  1569               	andwf	(CRC16@data+1)& (0+255),w,b
  4744  001766  0100               	movlb	0	; () banked
  4745  001768  6F65               	movwf	(??_CRC16+1)& (0+255),b
  4746  00176A  0E01               	movlw	1
  4747  00176C  0100               	movlb	0	; () banked
  4748  00176E  156B               	andwf	CRC16@crc& (0+255),w,b
  4749  001770  0100               	movlb	0	; () banked
  4750  001772  6F66               	movwf	(??_CRC16+2)& (0+255),b
  4751  001774  0E00               	movlw	0
  4752  001776  0100               	movlb	0	; () banked
  4753  001778  156C               	andwf	(CRC16@crc+1)& (0+255),w,b
  4754  00177A  0100               	movlb	0	; () banked
  4755  00177C  6F67               	movwf	(??_CRC16+3)& (0+255),b
  4756  00177E  0100               	movlb	0	; () banked
  4757  001780  5164               	movf	??_CRC16& (0+255),w,b
  4758  001782  0100               	movlb	0	; () banked
  4759  001784  1B66               	xorwf	(??_CRC16+2)& (0+255),f,b
  4760  001786  0100               	movlb	0	; () banked
  4761  001788  5165               	movf	(??_CRC16+1)& (0+255),w,b
  4762  00178A  0100               	movlb	0	; () banked
  4763  00178C  1B67               	xorwf	(??_CRC16+3)& (0+255),f,b
  4764  00178E  0100               	movlb	0	; () banked
  4765  001790  5166               	movf	(??_CRC16+2)& (0+255),w,b
  4766  001792  0100               	movlb	0	; () banked
  4767  001794  1167               	iorwf	(??_CRC16+3)& (0+255),w,b
  4768  001796  B4D8               	btfsc	status,2,c
  4769  001798  D014               	goto	l3883
  4770                           
  4771                           ; BSR set to: 0
  4772                           ;crc16.c: 35: crc = (crc >> 1) ^ 0x8408;
  4773  00179A  90D8               	bcf	status,0,c
  4774  00179C  0100               	movlb	0	; () banked
  4775  00179E  316C               	rrcf	(CRC16@crc+1)& (0+255),w,b
  4776  0017A0  0100               	movlb	0	; () banked
  4777  0017A2  6F65               	movwf	(??_CRC16+1)& (0+255),b
  4778  0017A4  0100               	movlb	0	; () banked
  4779  0017A6  316B               	rrcf	CRC16@crc& (0+255),w,b
  4780  0017A8  0100               	movlb	0	; () banked
  4781  0017AA  6F64               	movwf	??_CRC16& (0+255),b
  4782  0017AC  0E08               	movlw	8
  4783  0017AE  0100               	movlb	0	; () banked
  4784  0017B0  1964               	xorwf	??_CRC16& (0+255),w,b
  4785  0017B2  0100               	movlb	0	; () banked
  4786  0017B4  6F6B               	movwf	CRC16@crc& (0+255),b
  4787  0017B6  0E84               	movlw	132
  4788  0017B8  0100               	movlb	0	; () banked
  4789  0017BA  1965               	xorwf	(??_CRC16+1)& (0+255),w,b
  4790  0017BC  0100               	movlb	0	; () banked
  4791  0017BE  6F6C               	movwf	(CRC16@crc+1)& (0+255),b
  4792  0017C0  D004               	goto	l610
  4793  0017C2                     l3883:
  4794                           
  4795                           ; BSR set to: 0
  4796                           ;crc16.c: 36: else crc >>= 1;
  4797  0017C2  0100               	movlb	0	; () banked
  4798  0017C4  90D8               	bcf	status,0,c
  4799  0017C6  336C               	rrcf	(CRC16@crc+1)& (0+255),f,b
  4800  0017C8  336B               	rrcf	CRC16@crc& (0+255),f,b
  4801  0017CA                     l610:
  4802                           
  4803                           ; BSR set to: 0
  4804  0017CA  0100               	movlb	0	; () banked
  4805  0017CC  2B6A               	incf	CRC16@i& (0+255),f,b
  4806  0017CE  0100               	movlb	0	; () banked
  4807  0017D0  90D8               	bcf	status,0,c
  4808  0017D2  3369               	rrcf	(CRC16@data+1)& (0+255),f,b
  4809  0017D4  3368               	rrcf	CRC16@data& (0+255),f,b
  4810  0017D6  D7BA               	goto	l3875
  4811  0017D8                     l3887:
  4812                           
  4813                           ; BSR set to: 0
  4814                           ;crc16.c: 37: }
  4815                           ;crc16.c: 38: } while (--length);
  4816  0017D8  0100               	movlb	0	; () banked
  4817  0017DA  0762               	decf	CRC16@length& (0+255),f,b
  4818  0017DC  A0D8               	btfss	status,0,c
  4819  0017DE  0763               	decf	(CRC16@length+1)& (0+255),f,b
  4820  0017E0  0100               	movlb	0	; () banked
  4821  0017E2  5162               	movf	CRC16@length& (0+255),w,b
  4822  0017E4  0100               	movlb	0	; () banked
  4823  0017E6  1163               	iorwf	(CRC16@length+1)& (0+255),w,b
  4824  0017E8  A4D8               	btfss	status,2,c
  4825  0017EA  D79E               	goto	l3869
  4826                           
  4827                           ; BSR set to: 0
  4828                           ;crc16.c: 40: crc = ~crc;
  4829                           
  4830                           ; BSR set to: 0
  4831  0017EC  0100               	movlb	0	; () banked
  4832  0017EE  1F6B               	comf	CRC16@crc& (0+255),f,b
  4833  0017F0  1F6C               	comf	(CRC16@crc+1)& (0+255),f,b
  4834                           
  4835                           ; BSR set to: 0
  4836                           ;crc16.c: 41: data = crc;
  4837  0017F2  C06B  F068         	movff	CRC16@crc,CRC16@data
  4838  0017F6  C06C  F069         	movff	CRC16@crc+1,CRC16@data+1
  4839                           
  4840                           ; BSR set to: 0
  4841                           ;crc16.c: 42: crc = (crc << 8) | (data >> 8 & 0xff);
  4842  0017FA  C068  F064         	movff	CRC16@data,??_CRC16
  4843  0017FE  C069  F065         	movff	CRC16@data+1,??_CRC16+1
  4844  001802  C065  F064         	movff	??_CRC16+1,??_CRC16
  4845  001806  0100               	movlb	0	; () banked
  4846  001808  6B65               	clrf	(??_CRC16+1)& (0+255),b
  4847  00180A  0100               	movlb	0	; () banked
  4848  00180C  5164               	movf	??_CRC16& (0+255),w,b
  4849  00180E  C06B  F066         	movff	CRC16@crc,??_CRC16+2
  4850  001812  C06C  F067         	movff	CRC16@crc+1,??_CRC16+3
  4851  001816  C066  F067         	movff	??_CRC16+2,??_CRC16+3
  4852  00181A  0100               	movlb	0	; () banked
  4853  00181C  6B66               	clrf	(??_CRC16+2)& (0+255),b
  4854  00181E  0100               	movlb	0	; () banked
  4855  001820  1166               	iorwf	(??_CRC16+2)& (0+255),w,b
  4856  001822  0100               	movlb	0	; () banked
  4857  001824  6F6B               	movwf	CRC16@crc& (0+255),b
  4858  001826  0100               	movlb	0	; () banked
  4859  001828  5167               	movf	(??_CRC16+3)& (0+255),w,b
  4860  00182A  0100               	movlb	0	; () banked
  4861  00182C  6F6C               	movwf	(CRC16@crc+1)& (0+255),b
  4862                           
  4863                           ; BSR set to: 0
  4864                           ;crc16.c: 44: return (crc);
  4865  00182E  C06B  F060         	movff	CRC16@crc,?_CRC16
  4866  001832  C06C  F061         	movff	CRC16@crc+1,?_CRC16+1
  4867  001836  0012               	return	
  4868  001838                     __end_of_CRC16:
  4869                           	opt stack 0
  4870                           tblptru	equ	0xFF8
  4871                           prodh	equ	0xFF4
  4872                           prodl	equ	0xFF3
  4873                           postinc0	equ	0xFEE
  4874                           wreg	equ	0xFE8
  4875                           indf1	equ	0xFE7
  4876                           postinc1	equ	0xFE6
  4877                           postdec1	equ	0xFE5
  4878                           fsr1h	equ	0xFE2
  4879                           fsr1l	equ	0xFE1
  4880                           indf2	equ	0xFDF
  4881                           postinc2	equ	0xFDE
  4882                           postdec2	equ	0xFDD
  4883                           fsr2h	equ	0xFDA
  4884                           fsr2l	equ	0xFD9
  4885                           status	equ	0xFD8
  4886                           
  4887 ;; *************** function _CollisionCheck *****************
  4888 ;; Defined at:
  4889 ;;		line 204 in file "mastercomms.c"
  4890 ;; Parameters:    Size  Location     Type
  4891 ;;		None
  4892 ;; Auto vars:     Size  Location     Type
  4893 ;;  delayValueUS    2   15[BANK0 ] unsigned short 
  4894 ;; Return value:  Size  Location     Type
  4895 ;;                  1    wreg      void 
  4896 ;; Registers used:
  4897 ;;		wreg, status,2, status,0, cstack
  4898 ;; Tracked objects:
  4899 ;;		On entry : 0/0
  4900 ;;		On exit  : 0/0
  4901 ;;		Unchanged: 0/0
  4902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  4903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4904 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4906 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  4907 ;;Total ram usage:        2 bytes
  4908 ;; Hardware stack levels used:    1
  4909 ;; Hardware stack levels required when called:    9
  4910 ;; This function calls:
  4911 ;;		_LineIdleST7540
  4912 ;;		_MangleSerial
  4913 ;;		_WaitTickCount
  4914 ;; This function is called by:
  4915 ;;		_ProcessMasterComms
  4916 ;;		_CreateAndSend
  4917 ;; This function uses a non-reentrant model
  4918 ;;
  4919                           
  4920                           	psect	text23
  4921  002B66                     __ptext23:
  4922                           	opt stack 0
  4923  002B66                     _CollisionCheck:
  4924                           	opt stack 18
  4925                           
  4926                           ;mastercomms.c: 205: unsigned short delayValueUS;
  4927                           ;mastercomms.c: 207: delayValueUS = MangleSerial(iscSerialUSG) & 0b0000001111111111;
  4928                           
  4929                           ; BSR set to: 0
  4930                           ;incstack = 0
  4931  002B66  C0DC  F060         	movff	_iscSerialUSG,MangleSerial@mangleValueUS
  4932  002B6A  C0DD  F061         	movff	_iscSerialUSG+1,MangleSerial@mangleValueUS+1
  4933  002B6E  ECA8  F00C         	call	_MangleSerial	;wreg free
  4934  002B72  0EFF               	movlw	255
  4935  002B74  0100               	movlb	0	; () banked
  4936  002B76  1560               	andwf	?_MangleSerial& (0+255),w,b
  4937  002B78  0100               	movlb	0	; () banked
  4938  002B7A  6F6F               	movwf	CollisionCheck@delayValueUS& (0+255),b
  4939  002B7C  0E03               	movlw	3
  4940  002B7E  0100               	movlb	0	; () banked
  4941  002B80  1561               	andwf	(?_MangleSerial+1)& (0+255),w,b
  4942  002B82  0100               	movlb	0	; () banked
  4943  002B84  6F70               	movwf	(CollisionCheck@delayValueUS+1)& (0+255),b
  4944  002B86                     l849:
  4945                           
  4946                           ;mastercomms.c: 209: WaitTickCount(delayValueUS);
  4947  002B86  C06F  F060         	movff	CollisionCheck@delayValueUS,WaitTickCount@tickCountUS
  4948  002B8A  C070  F061         	movff	CollisionCheck@delayValueUS+1,WaitTickCount@tickCountUS+1
  4949  002B8E  EC48  F017         	call	_WaitTickCount	;wreg free
  4950                           
  4951                           ;mastercomms.c: 210: }while(!LineIdleST7540());
  4952  002B92  ECE9  F017         	call	_LineIdleST7540	;wreg free
  4953  002B96  0900               	iorlw	0
  4954  002B98  A4D8               	btfss	status,2,c
  4955  002B9A  0012               	return	
  4956  002B9C  D7F4               	goto	l849
  4957  002B9E                     __end_of_CollisionCheck:
  4958                           	opt stack 0
  4959                           tblptru	equ	0xFF8
  4960                           prodh	equ	0xFF4
  4961                           prodl	equ	0xFF3
  4962                           postinc0	equ	0xFEE
  4963                           wreg	equ	0xFE8
  4964                           indf1	equ	0xFE7
  4965                           postinc1	equ	0xFE6
  4966                           postdec1	equ	0xFE5
  4967                           fsr1h	equ	0xFE2
  4968                           fsr1l	equ	0xFE1
  4969                           indf2	equ	0xFDF
  4970                           postinc2	equ	0xFDE
  4971                           postdec2	equ	0xFDD
  4972                           fsr2h	equ	0xFDA
  4973                           fsr2l	equ	0xFD9
  4974                           status	equ	0xFD8
  4975                           
  4976 ;; *************** function _MangleSerial *****************
  4977 ;; Defined at:
  4978 ;;		line 178 in file "mastercomms.c"
  4979 ;; Parameters:    Size  Location     Type
  4980 ;;  mangleValueU    2    0[BANK0 ] unsigned short 
  4981 ;; Auto vars:     Size  Location     Type
  4982 ;;  cycleCountUC    1   14[BANK0 ] unsigned char 
  4983 ;;  b12UC           1   13[BANK0 ] unsigned char 
  4984 ;;  b10UC           1   12[BANK0 ] unsigned char 
  4985 ;;  b6UC            1   11[BANK0 ] unsigned char 
  4986 ;;  b4UC            1   10[BANK0 ] unsigned char 
  4987 ;;  b2UC            1    9[BANK0 ] unsigned char 
  4988 ;;  b1UC            1    8[BANK0 ] unsigned char 
  4989 ;;  b0UC            1    7[BANK0 ] unsigned char 
  4990 ;;  xorOutputUC     1    6[BANK0 ] unsigned char 
  4991 ;; Return value:  Size  Location     Type
  4992 ;;                  2    0[BANK0 ] unsigned short 
  4993 ;; Registers used:
  4994 ;;		wreg, status,2, status,0
  4995 ;; Tracked objects:
  4996 ;;		On entry : 0/0
  4997 ;;		On exit  : 0/0
  4998 ;;		Unchanged: 0/0
  4999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5000 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5001 ;;      Locals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5002 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5003 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5004 ;;Total ram usage:       15 bytes
  5005 ;; Hardware stack levels used:    1
  5006 ;; Hardware stack levels required when called:    7
  5007 ;; This function calls:
  5008 ;;		Nothing
  5009 ;; This function is called by:
  5010 ;;		_CollisionCheck
  5011 ;; This function uses a non-reentrant model
  5012 ;;
  5013                           
  5014                           	psect	text24
  5015  001950                     __ptext24:
  5016                           	opt stack 0
  5017  001950                     _MangleSerial:
  5018                           	opt stack 19
  5019                           
  5020                           ;mastercomms.c: 179: unsigned char cycleCountUC;
  5021                           ;mastercomms.c: 180: unsigned char xorOutputUC;
  5022                           ;mastercomms.c: 181: unsigned char b0UC, b1UC, b2UC, b4UC, b6UC, b10UC, b12UC;
  5023                           ;mastercomms.c: 183: __nop();
  5024                           
  5025                           ;incstack = 0
  5026  001950  F000               	nop	
  5027                           
  5028                           ;mastercomms.c: 185: for(cycleCountUC = 0; cycleCountUC < 160; cycleCountUC++){
  5029  001952  0E00               	movlw	0
  5030  001954  0100               	movlb	0	; () banked
  5031  001956  6F6E               	movwf	MangleSerial@cycleCountUC& (0+255),b
  5032  001958                     l3987:
  5033                           
  5034                           ; BSR set to: 0
  5035  001958  0E9F               	movlw	159
  5036  00195A  0100               	movlb	0	; () banked
  5037  00195C  656E               	cpfsgt	MangleSerial@cycleCountUC& (0+255),b
  5038  00195E  D001               	goto	l3991
  5039  001960  D077               	goto	l840
  5040  001962                     l3991:
  5041                           
  5042                           ; BSR set to: 0
  5043                           ;mastercomms.c: 186: b0UC = (mangleValueUS & 0b0000000000000001)?1:0;
  5044  001962  0100               	movlb	0	; () banked
  5045  001964  A160               	btfss	MangleSerial@mangleValueUS& (0+255),0,b
  5046  001966  D002               	goto	u3460
  5047  001968  0E01               	movlw	1
  5048  00196A  D001               	goto	u3470
  5049  00196C                     u3460:
  5050  00196C  0E00               	movlw	0
  5051  00196E                     u3470:
  5052  00196E  0100               	movlb	0	; () banked
  5053  001970  6F67               	movwf	MangleSerial@b0UC& (0+255),b
  5054                           
  5055                           ;mastercomms.c: 187: b1UC = (mangleValueUS & 0b0000000000000010)?1:0;
  5056  001972  0100               	movlb	0	; () banked
  5057  001974  A360               	btfss	MangleSerial@mangleValueUS& (0+255),1,b
  5058  001976  D002               	goto	u3480
  5059  001978  0E01               	movlw	1
  5060  00197A  D001               	goto	u3490
  5061  00197C                     u3480:
  5062  00197C  0E00               	movlw	0
  5063  00197E                     u3490:
  5064  00197E  0100               	movlb	0	; () banked
  5065  001980  6F68               	movwf	MangleSerial@b1UC& (0+255),b
  5066                           
  5067                           ;mastercomms.c: 188: b2UC = (mangleValueUS & 0b0000000000000100)?1:0;
  5068  001982  0100               	movlb	0	; () banked
  5069  001984  A560               	btfss	MangleSerial@mangleValueUS& (0+255),2,b
  5070  001986  D002               	goto	u3500
  5071  001988  0E01               	movlw	1
  5072  00198A  D001               	goto	u3510
  5073  00198C                     u3500:
  5074  00198C  0E00               	movlw	0
  5075  00198E                     u3510:
  5076  00198E  0100               	movlb	0	; () banked
  5077  001990  6F69               	movwf	MangleSerial@b2UC& (0+255),b
  5078                           
  5079                           ;mastercomms.c: 189: b4UC = (mangleValueUS & 0b0000000000010000)?1:0;
  5080  001992  0100               	movlb	0	; () banked
  5081  001994  A960               	btfss	MangleSerial@mangleValueUS& (0+255),4,b
  5082  001996  D002               	goto	u3520
  5083  001998  0E01               	movlw	1
  5084  00199A  D001               	goto	u3530
  5085  00199C                     u3520:
  5086  00199C  0E00               	movlw	0
  5087  00199E                     u3530:
  5088  00199E  0100               	movlb	0	; () banked
  5089  0019A0  6F6A               	movwf	MangleSerial@b4UC& (0+255),b
  5090                           
  5091                           ;mastercomms.c: 190: b6UC = (mangleValueUS & 0b0000000001000000)?1:0;
  5092  0019A2  0100               	movlb	0	; () banked
  5093  0019A4  AD60               	btfss	MangleSerial@mangleValueUS& (0+255),6,b
  5094  0019A6  D002               	goto	u3540
  5095  0019A8  0E01               	movlw	1
  5096  0019AA  D001               	goto	u3550
  5097  0019AC                     u3540:
  5098  0019AC  0E00               	movlw	0
  5099  0019AE                     u3550:
  5100  0019AE  0100               	movlb	0	; () banked
  5101  0019B0  6F6B               	movwf	MangleSerial@b6UC& (0+255),b
  5102                           
  5103                           ;mastercomms.c: 191: b10UC = (mangleValueUS & 0b0000010000000000)?1:0;
  5104  0019B2  0100               	movlb	0	; () banked
  5105  0019B4  A561               	btfss	(MangleSerial@mangleValueUS+1)& (0+255),2,b
  5106  0019B6  D002               	goto	u3560
  5107  0019B8  0E01               	movlw	1
  5108  0019BA  D001               	goto	u3570
  5109  0019BC                     u3560:
  5110  0019BC  0E00               	movlw	0
  5111  0019BE                     u3570:
  5112  0019BE  0100               	movlb	0	; () banked
  5113  0019C0  6F6C               	movwf	MangleSerial@b10UC& (0+255),b
  5114                           
  5115                           ;mastercomms.c: 192: b12UC = (mangleValueUS & 0b0001000000000000)?1:0;
  5116  0019C2  0100               	movlb	0	; () banked
  5117  0019C4  A961               	btfss	(MangleSerial@mangleValueUS+1)& (0+255),4,b
  5118  0019C6  D002               	goto	u3580
  5119  0019C8  0E01               	movlw	1
  5120  0019CA  D001               	goto	u3590
  5121  0019CC                     u3580:
  5122  0019CC  0E00               	movlw	0
  5123  0019CE                     u3590:
  5124  0019CE  0100               	movlb	0	; () banked
  5125  0019D0  6F6D               	movwf	MangleSerial@b12UC& (0+255),b
  5126                           
  5127                           ; BSR set to: 0
  5128                           ;mastercomms.c: 193: xorOutputUC = b0UC ^ b1UC ^ b2UC ^ b4UC ^ b6UC ^ b10UC ^ b12UC;
  5129  0019D2  0100               	movlb	0	; () banked
  5130  0019D4  5167               	movf	MangleSerial@b0UC& (0+255),w,b
  5131  0019D6  0100               	movlb	0	; () banked
  5132  0019D8  1968               	xorwf	MangleSerial@b1UC& (0+255),w,b
  5133  0019DA  0100               	movlb	0	; () banked
  5134  0019DC  1969               	xorwf	MangleSerial@b2UC& (0+255),w,b
  5135  0019DE  0100               	movlb	0	; () banked
  5136  0019E0  196A               	xorwf	MangleSerial@b4UC& (0+255),w,b
  5137  0019E2  0100               	movlb	0	; () banked
  5138  0019E4  196B               	xorwf	MangleSerial@b6UC& (0+255),w,b
  5139  0019E6  0100               	movlb	0	; () banked
  5140  0019E8  196C               	xorwf	MangleSerial@b10UC& (0+255),w,b
  5141  0019EA  0100               	movlb	0	; () banked
  5142  0019EC  196D               	xorwf	MangleSerial@b12UC& (0+255),w,b
  5143  0019EE  0100               	movlb	0	; () banked
  5144  0019F0  6F66               	movwf	MangleSerial@xorOutputUC& (0+255),b
  5145                           
  5146                           ; BSR set to: 0
  5147                           ;mastercomms.c: 194: mangleValueUS = (mangleValueUS >> 1) | (xorOutputUC?0b1000000000000
      +                          000:0);
  5148  0019F2  0100               	movlb	0	; () banked
  5149  0019F4  5166               	movf	MangleSerial@xorOutputUC& (0+255),w,b
  5150  0019F6  0100               	movlb	0	; () banked
  5151  0019F8  A4D8               	btfss	status,2,c
  5152  0019FA  D002               	goto	l3999
  5153                           
  5154                           ; BSR set to: 0
  5155  0019FC  0E00               	movlw	0
  5156  0019FE  D001               	goto	L4
  5157  001A00                     l3999:
  5158                           
  5159                           ; BSR set to: 0
  5160  001A00  0E80               	movlw	128
  5161  001A02                     L4:
  5162  001A02  0100               	movlb	0	; () banked
  5163  001A04  6F65               	movwf	(_MangleSerial$2745+1)& (0+255),b
  5164  001A06  0E00               	movlw	0
  5165  001A08  6F64               	movwf	_MangleSerial$2745& (0+255),b
  5166                           
  5167                           ; BSR set to: 0
  5168                           
  5169                           ; BSR set to: 0
  5170  001A0A  90D8               	bcf	status,0,c
  5171  001A0C  0100               	movlb	0	; () banked
  5172  001A0E  3161               	rrcf	(MangleSerial@mangleValueUS+1)& (0+255),w,b
  5173  001A10  0100               	movlb	0	; () banked
  5174  001A12  6F63               	movwf	(??_MangleSerial+1)& (0+255),b
  5175  001A14  0100               	movlb	0	; () banked
  5176  001A16  3160               	rrcf	MangleSerial@mangleValueUS& (0+255),w,b
  5177  001A18  0100               	movlb	0	; () banked
  5178  001A1A  6F62               	movwf	??_MangleSerial& (0+255),b
  5179  001A1C  0100               	movlb	0	; () banked
  5180  001A1E  5164               	movf	_MangleSerial$2745& (0+255),w,b
  5181  001A20  0100               	movlb	0	; () banked
  5182  001A22  1162               	iorwf	??_MangleSerial& (0+255),w,b
  5183  001A24  0100               	movlb	0	; () banked
  5184  001A26  6F60               	movwf	MangleSerial@mangleValueUS& (0+255),b
  5185  001A28  0100               	movlb	0	; () banked
  5186  001A2A  5165               	movf	(_MangleSerial$2745+1)& (0+255),w,b
  5187  001A2C  0100               	movlb	0	; () banked
  5188  001A2E  1163               	iorwf	(??_MangleSerial+1)& (0+255),w,b
  5189  001A30  0100               	movlb	0	; () banked
  5190  001A32  6F61               	movwf	(MangleSerial@mangleValueUS+1)& (0+255),b
  5191                           
  5192                           ; BSR set to: 0
  5193                           ;mastercomms.c: 195: if(!mangleValueUS)
  5194  001A34  0100               	movlb	0	; () banked
  5195  001A36  5160               	movf	MangleSerial@mangleValueUS& (0+255),w,b
  5196  001A38  0100               	movlb	0	; () banked
  5197  001A3A  1161               	iorwf	(MangleSerial@mangleValueUS+1)& (0+255),w,b
  5198  001A3C  A4D8               	btfss	status,2,c
  5199  001A3E  D005               	goto	l4007
  5200                           
  5201                           ; BSR set to: 0
  5202                           ;mastercomms.c: 196: mangleValueUS = 1;
  5203  001A40  0E00               	movlw	0
  5204  001A42  0100               	movlb	0	; () banked
  5205  001A44  6F61               	movwf	(MangleSerial@mangleValueUS+1)& (0+255),b
  5206  001A46  0E01               	movlw	1
  5207  001A48  6F60               	movwf	MangleSerial@mangleValueUS& (0+255),b
  5208  001A4A                     l4007:
  5209                           
  5210                           ; BSR set to: 0
  5211  001A4A  0100               	movlb	0	; () banked
  5212  001A4C  2B6E               	incf	MangleSerial@cycleCountUC& (0+255),f,b
  5213  001A4E  D784               	goto	l3987
  5214  001A50                     l840:
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;mastercomms.c: 197: }
  5218                           ;mastercomms.c: 199: __nop();
  5219  001A50  F000               	nop	
  5220                           
  5221                           ;mastercomms.c: 201: return mangleValueUS;
  5222  001A52  C060  F060         	movff	MangleSerial@mangleValueUS,?_MangleSerial
  5223  001A56  C061  F061         	movff	MangleSerial@mangleValueUS+1,?_MangleSerial+1
  5224  001A5A  0012               	return		;funcret
  5225  001A5C                     __end_of_MangleSerial:
  5226                           	opt stack 0
  5227                           tblptru	equ	0xFF8
  5228                           prodh	equ	0xFF4
  5229                           prodl	equ	0xFF3
  5230                           postinc0	equ	0xFEE
  5231                           wreg	equ	0xFE8
  5232                           indf1	equ	0xFE7
  5233                           postinc1	equ	0xFE6
  5234                           postdec1	equ	0xFE5
  5235                           fsr1h	equ	0xFE2
  5236                           fsr1l	equ	0xFE1
  5237                           indf2	equ	0xFDF
  5238                           postinc2	equ	0xFDE
  5239                           postdec2	equ	0xFDD
  5240                           fsr2h	equ	0xFDA
  5241                           fsr2l	equ	0xFD9
  5242                           status	equ	0xFD8
  5243                           
  5244 ;; *************** function _LineIdleST7540 *****************
  5245 ;; Defined at:
  5246 ;;		line 240 in file "ST7540.c"
  5247 ;; Parameters:    Size  Location     Type
  5248 ;;		None
  5249 ;; Auto vars:     Size  Location     Type
  5250 ;;		None
  5251 ;; Return value:  Size  Location     Type
  5252 ;;                  1    wreg      unsigned char 
  5253 ;; Registers used:
  5254 ;;		wreg
  5255 ;; Tracked objects:
  5256 ;;		On entry : 0/0
  5257 ;;		On exit  : 0/0
  5258 ;;		Unchanged: 0/0
  5259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5261 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5263 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5264 ;;Total ram usage:        0 bytes
  5265 ;; Hardware stack levels used:    1
  5266 ;; Hardware stack levels required when called:    7
  5267 ;; This function calls:
  5268 ;;		Nothing
  5269 ;; This function is called by:
  5270 ;;		_RetransmitMessageSt7540
  5271 ;;		_CollisionCheck
  5272 ;;		_CreateAndSend
  5273 ;; This function uses a non-reentrant model
  5274 ;;
  5275                           
  5276                           	psect	text25
  5277  002FD2                     __ptext25:
  5278                           	opt stack 0
  5279  002FD2                     _LineIdleST7540:
  5280                           	opt stack 20
  5281                           
  5282                           ;ST7540.c: 241: if(PORTCbits.RC2)
  5283                           
  5284                           ;incstack = 0
  5285  002FD2  A482               	btfss	3970,2,c	;volatile
  5286  002FD4  D002               	goto	l3919
  5287                           
  5288                           ;ST7540.c: 242: return 0;
  5289  002FD6  0E00               	movlw	0
  5290  002FD8  0012               	return	
  5291  002FDA                     l3919:
  5292                           
  5293                           ;ST7540.c: 243: return 1;
  5294  002FDA  0E01               	movlw	1
  5295  002FDC  0012               	return	
  5296  002FDE                     __end_of_LineIdleST7540:
  5297                           	opt stack 0
  5298                           tblptru	equ	0xFF8
  5299                           prodh	equ	0xFF4
  5300                           prodl	equ	0xFF3
  5301                           postinc0	equ	0xFEE
  5302                           wreg	equ	0xFE8
  5303                           indf1	equ	0xFE7
  5304                           postinc1	equ	0xFE6
  5305                           postdec1	equ	0xFE5
  5306                           fsr1h	equ	0xFE2
  5307                           fsr1l	equ	0xFE1
  5308                           indf2	equ	0xFDF
  5309                           postinc2	equ	0xFDE
  5310                           postdec2	equ	0xFDD
  5311                           fsr2h	equ	0xFDA
  5312                           fsr2l	equ	0xFD9
  5313                           status	equ	0xFD8
  5314                           
  5315 ;; *************** function _ForceFiringMode *****************
  5316 ;; Defined at:
  5317 ;;		line 145 in file "mastercomms.c"
  5318 ;; Parameters:    Size  Location     Type
  5319 ;;  forceModeUC     1    wreg     unsigned char 
  5320 ;; Auto vars:     Size  Location     Type
  5321 ;;  forceModeUC     1    2[BANK0 ] unsigned char 
  5322 ;; Return value:  Size  Location     Type
  5323 ;;                  1    wreg      void 
  5324 ;; Registers used:
  5325 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5326 ;; Tracked objects:
  5327 ;;		On entry : 0/0
  5328 ;;		On exit  : 0/0
  5329 ;;		Unchanged: 0/0
  5330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5332 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5334 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5335 ;;Total ram usage:        1 bytes
  5336 ;; Hardware stack levels used:    1
  5337 ;; Hardware stack levels required when called:    9
  5338 ;; This function calls:
  5339 ;;		_ClearPastValues
  5340 ;;		_ResetBoosterStates
  5341 ;; This function is called by:
  5342 ;;		_ProcessMasterComms
  5343 ;; This function uses a non-reentrant model
  5344 ;;
  5345                           
  5346                           	psect	text26
  5347  002C0E                     __ptext26:
  5348                           	opt stack 0
  5349  002C0E                     _ForceFiringMode:
  5350                           	opt stack 20
  5351                           
  5352                           ;incstack = 0
  5353                           ;ForceFiringMode@forceModeUC stored from wreg
  5354  002C0E  0100               	movlb	0	; () banked
  5355  002C10  6F62               	movwf	ForceFiringMode@forceModeUC& (0+255),b
  5356                           
  5357                           ;mastercomms.c: 147: if(forceModeUC == 0 && !(statusFlagsUSLG & 0b0100000000000000000000
      +                          00)){
  5358  002C12  0100               	movlb	0	; () banked
  5359  002C14  5162               	movf	ForceFiringMode@forceModeUC& (0+255),w,b
  5360  002C16  0100               	movlb	0	; () banked
  5361  002C18  B4D8               	btfsc	status,2,c
  5362                           
  5363                           ; BSR set to: 0
  5364  002C1A  BC38               	btfsc	_statusFlagsUSLG+2,6,c	;volatile
  5365  002C1C  D006               	goto	l5089
  5366                           
  5367                           ; BSR set to: 0
  5368                           ;mastercomms.c: 148: LATDbits.LATD7 = 0;
  5369  002C1E  9E8C               	bcf	3980,7,c	;volatile
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;mastercomms.c: 149: ResetBoosterStates();
  5373  002C20  EC39  F017         	call	_ResetBoosterStates	;wreg free
  5374                           
  5375                           ;mastercomms.c: 150: ClearPastValues();
  5376  002C24  EC2A  F017         	call	_ClearPastValues	;wreg free
  5377                           
  5378                           ;mastercomms.c: 151: }else{
  5379  002C28  0012               	return	
  5380  002C2A                     l5089:
  5381                           
  5382                           ;mastercomms.c: 152: statusFlagsUSLG |= 0b000000000000000000000010;
  5383  002C2A  8236               	bsf	_statusFlagsUSLG,1,c	;volatile
  5384                           
  5385                           ;mastercomms.c: 153: statusFlagsUSLG &= ~0b001000000000000000000000;
  5386  002C2C  9A38               	bcf	_statusFlagsUSLG+2,5,c	;volatile
  5387                           
  5388                           ;mastercomms.c: 154: statusFlagsUSLG |= 0b000000001000000000000000;
  5389  002C2E  8E37               	bsf	_statusFlagsUSLG+1,7,c	;volatile
  5390                           
  5391                           ;mastercomms.c: 155: if(!(statusFlagsUSLG & 0b000000000000000000100000) ||((statusFlagsU
      +                          SLG & 0b000000000000000000100000)&& (ISO_COUNTER >= 15)))
  5392  002C30  AA36               	btfss	_statusFlagsUSLG,5,c	;volatile
  5393  002C32  D005               	goto	l829
  5394  002C34  AA36               	btfss	_statusFlagsUSLG,5,c	;volatile
  5395  002C36  D004               	goto	l827
  5396  002C38  0E0E               	movlw	14
  5397  002C3A  644A               	cpfsgt	_ISO_COUNTER,c
  5398  002C3C  D001               	goto	l827
  5399  002C3E                     l829:
  5400                           
  5401                           ;mastercomms.c: 156: LATDbits.LATD7 = 1;
  5402  002C3E  8E8C               	bsf	3980,7,c	;volatile
  5403  002C40                     l827:
  5404                           
  5405                           ;mastercomms.c: 157: LATBbits.LATB3 = 0;
  5406  002C40  968A               	bcf	3978,3,c	;volatile
  5407  002C42  0012               	return	
  5408  002C44                     __end_of_ForceFiringMode:
  5409                           	opt stack 0
  5410                           tblptru	equ	0xFF8
  5411                           prodh	equ	0xFF4
  5412                           prodl	equ	0xFF3
  5413                           postinc0	equ	0xFEE
  5414                           wreg	equ	0xFE8
  5415                           indf1	equ	0xFE7
  5416                           postinc1	equ	0xFE6
  5417                           postdec1	equ	0xFE5
  5418                           fsr1h	equ	0xFE2
  5419                           fsr1l	equ	0xFE1
  5420                           indf2	equ	0xFDF
  5421                           postinc2	equ	0xFDE
  5422                           postdec2	equ	0xFDD
  5423                           fsr2h	equ	0xFDA
  5424                           fsr2l	equ	0xFD9
  5425                           status	equ	0xFD8
  5426                           
  5427 ;; *************** function _ClearPastValues *****************
  5428 ;; Defined at:
  5429 ;;		line 277 in file "mastercomms.c"
  5430 ;; Parameters:    Size  Location     Type
  5431 ;;		None
  5432 ;; Auto vars:     Size  Location     Type
  5433 ;;  boosterCount    1    1[BANK0 ] unsigned char 
  5434 ;; Return value:  Size  Location     Type
  5435 ;;                  1    wreg      void 
  5436 ;; Registers used:
  5437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5438 ;; Tracked objects:
  5439 ;;		On entry : 0/0
  5440 ;;		On exit  : 0/0
  5441 ;;		Unchanged: 0/0
  5442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5443 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5444 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5445 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5446 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5447 ;;Total ram usage:        1 bytes
  5448 ;; Hardware stack levels used:    1
  5449 ;; Hardware stack levels required when called:    8
  5450 ;; This function calls:
  5451 ;;		_ClearPastValue
  5452 ;; This function is called by:
  5453 ;;		_ForceFiringMode
  5454 ;; This function uses a non-reentrant model
  5455 ;;
  5456                           
  5457                           	psect	text27
  5458  002E54                     __ptext27:
  5459                           	opt stack 0
  5460  002E54                     _ClearPastValues:
  5461                           	opt stack 20
  5462                           
  5463                           ;mastercomms.c: 278: unsigned char boosterCountUC;
  5464                           ;mastercomms.c: 280: for(boosterCountUC = 0; boosterCountUC < 31; boosterCountUC++)
  5465                           
  5466                           ;incstack = 0
  5467  002E54  0E00               	movlw	0
  5468  002E56  0100               	movlb	0	; () banked
  5469  002E58  6F61               	movwf	ClearPastValues@boosterCountUC& (0+255),b
  5470  002E5A                     l4511:
  5471                           
  5472                           ; BSR set to: 0
  5473  002E5A  0E1E               	movlw	30
  5474  002E5C  0100               	movlb	0	; () banked
  5475  002E5E  6561               	cpfsgt	ClearPastValues@boosterCountUC& (0+255),b
  5476  002E60  D001               	goto	l4515
  5477  002E62  0012               	return	
  5478  002E64                     l4515:
  5479                           
  5480                           ; BSR set to: 0
  5481                           ;mastercomms.c: 281: ClearPastValue(boosterCountUC);
  5482  002E64  0100               	movlb	0	; () banked
  5483  002E66  5161               	movf	ClearPastValues@boosterCountUC& (0+255),w,b
  5484  002E68  EC8E  F013         	call	_ClearPastValue
  5485  002E6C  0100               	movlb	0	; () banked
  5486  002E6E  2B61               	incf	ClearPastValues@boosterCountUC& (0+255),f,b
  5487  002E70  D7F4               	goto	l4511
  5488  002E72                     __end_of_ClearPastValues:
  5489                           	opt stack 0
  5490                           tblptru	equ	0xFF8
  5491                           prodh	equ	0xFF4
  5492                           prodl	equ	0xFF3
  5493                           postinc0	equ	0xFEE
  5494                           wreg	equ	0xFE8
  5495                           indf1	equ	0xFE7
  5496                           postinc1	equ	0xFE6
  5497                           postdec1	equ	0xFE5
  5498                           fsr1h	equ	0xFE2
  5499                           fsr1l	equ	0xFE1
  5500                           indf2	equ	0xFDF
  5501                           postinc2	equ	0xFDE
  5502                           postdec2	equ	0xFDD
  5503                           fsr2h	equ	0xFDA
  5504                           fsr2l	equ	0xFD9
  5505                           status	equ	0xFD8
  5506                           
  5507 ;; *************** function _ClearPastValue *****************
  5508 ;; Defined at:
  5509 ;;		line 270 in file "mastercomms.c"
  5510 ;; Parameters:    Size  Location     Type
  5511 ;;  valuePosUC      1    wreg     unsigned char 
  5512 ;; Auto vars:     Size  Location     Type
  5513 ;;  valuePosUC      1    0[BANK0 ] unsigned char 
  5514 ;; Return value:  Size  Location     Type
  5515 ;;                  1    wreg      void 
  5516 ;; Registers used:
  5517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5518 ;; Tracked objects:
  5519 ;;		On entry : 0/0
  5520 ;;		On exit  : 0/0
  5521 ;;		Unchanged: 0/0
  5522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5523 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5524 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5525 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5526 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5527 ;;Total ram usage:        1 bytes
  5528 ;; Hardware stack levels used:    1
  5529 ;; Hardware stack levels required when called:    7
  5530 ;; This function calls:
  5531 ;;		Nothing
  5532 ;; This function is called by:
  5533 ;;		_ClearPastValues
  5534 ;; This function uses a non-reentrant model
  5535 ;;
  5536                           
  5537                           	psect	text28
  5538  00271C                     __ptext28:
  5539                           	opt stack 0
  5540  00271C                     _ClearPastValue:
  5541                           	opt stack 20
  5542                           
  5543                           ; BSR set to: 0
  5544                           ;incstack = 0
  5545                           ;ClearPastValue@valuePosUC stored from wreg
  5546  00271C  0100               	movlb	0	; () banked
  5547  00271E  6F60               	movwf	ClearPastValue@valuePosUC& (0+255),b
  5548                           
  5549                           ;mastercomms.c: 271: pastBoosterValuesUSAG[0][valuePosUC] = 0;
  5550  002720  0100               	movlb	0	; () banked
  5551  002722  5160               	movf	ClearPastValue@valuePosUC& (0+255),w,b
  5552  002724  0D02               	mullw	2
  5553  002726  0E00               	movlw	low _pastBoosterValuesUSAG
  5554  002728  24F3               	addwf	prodl,w,c
  5555  00272A  6ED9               	movwf	fsr2l,c
  5556  00272C  0E05               	movlw	high _pastBoosterValuesUSAG
  5557  00272E  20F4               	addwfc	prodh,w,c
  5558  002730  6EDA               	movwf	fsr2h,c
  5559  002732  0E00               	movlw	0
  5560  002734  6EDE               	movwf	postinc2,c
  5561  002736  0E00               	movlw	0
  5562  002738  6EDD               	movwf	postdec2,c
  5563                           
  5564                           ;mastercomms.c: 272: pastBoosterValuesUSAG[1][valuePosUC] = 0;
  5565  00273A  0100               	movlb	0	; () banked
  5566  00273C  5160               	movf	ClearPastValue@valuePosUC& (0+255),w,b
  5567  00273E  0D02               	mullw	2
  5568  002740  0E3E               	movlw	low (_pastBoosterValuesUSAG+62)
  5569  002742  24F3               	addwf	prodl,w,c
  5570  002744  6ED9               	movwf	fsr2l,c
  5571  002746  0E05               	movlw	high (_pastBoosterValuesUSAG+62)
  5572  002748  20F4               	addwfc	prodh,w,c
  5573  00274A  6EDA               	movwf	fsr2h,c
  5574  00274C  0E00               	movlw	0
  5575  00274E  6EDE               	movwf	postinc2,c
  5576  002750  0E00               	movlw	0
  5577  002752  6EDD               	movwf	postdec2,c
  5578                           
  5579                           ;mastercomms.c: 273: pastBoosterValuesUSAG[2][valuePosUC] = 0;
  5580  002754  0100               	movlb	0	; () banked
  5581  002756  5160               	movf	ClearPastValue@valuePosUC& (0+255),w,b
  5582  002758  0D02               	mullw	2
  5583  00275A  0E7C               	movlw	low (_pastBoosterValuesUSAG+124)
  5584  00275C  24F3               	addwf	prodl,w,c
  5585  00275E  6ED9               	movwf	fsr2l,c
  5586  002760  0E05               	movlw	high (_pastBoosterValuesUSAG+124)
  5587  002762  20F4               	addwfc	prodh,w,c
  5588  002764  6EDA               	movwf	fsr2h,c
  5589  002766  0E00               	movlw	0
  5590  002768  6EDE               	movwf	postinc2,c
  5591  00276A  0E00               	movlw	0
  5592  00276C  6EDD               	movwf	postdec2,c
  5593                           
  5594                           ;mastercomms.c: 274: pastBoosterValuesUSAG[3][valuePosUC] = 0;
  5595  00276E  0100               	movlb	0	; () banked
  5596  002770  5160               	movf	ClearPastValue@valuePosUC& (0+255),w,b
  5597  002772  0D02               	mullw	2
  5598  002774  0EBA               	movlw	low (_pastBoosterValuesUSAG+186)
  5599  002776  24F3               	addwf	prodl,w,c
  5600  002778  6ED9               	movwf	fsr2l,c
  5601  00277A  0E05               	movlw	high (_pastBoosterValuesUSAG+186)
  5602  00277C  20F4               	addwfc	prodh,w,c
  5603  00277E  6EDA               	movwf	fsr2h,c
  5604  002780  0E00               	movlw	0
  5605  002782  6EDE               	movwf	postinc2,c
  5606  002784  0E00               	movlw	0
  5607  002786  6EDD               	movwf	postdec2,c
  5608                           
  5609                           ; BSR set to: 0
  5610  002788  0012               	return		;funcret
  5611  00278A                     __end_of_ClearPastValue:
  5612                           	opt stack 0
  5613                           tblptru	equ	0xFF8
  5614                           prodh	equ	0xFF4
  5615                           prodl	equ	0xFF3
  5616                           postinc0	equ	0xFEE
  5617                           wreg	equ	0xFE8
  5618                           indf1	equ	0xFE7
  5619                           postinc1	equ	0xFE6
  5620                           postdec1	equ	0xFE5
  5621                           fsr1h	equ	0xFE2
  5622                           fsr1l	equ	0xFE1
  5623                           indf2	equ	0xFDF
  5624                           postinc2	equ	0xFDE
  5625                           postdec2	equ	0xFDD
  5626                           fsr2h	equ	0xFDA
  5627                           fsr2l	equ	0xFD9
  5628                           status	equ	0xFD8
  5629                           
  5630 ;; *************** function _DataReadyST7540 *****************
  5631 ;; Defined at:
  5632 ;;		line 354 in file "ST7540.c"
  5633 ;; Parameters:    Size  Location     Type
  5634 ;;		None
  5635 ;; Auto vars:     Size  Location     Type
  5636 ;;		None
  5637 ;; Return value:  Size  Location     Type
  5638 ;;                  1    wreg      unsigned char 
  5639 ;; Registers used:
  5640 ;;		wreg, status,2, status,0
  5641 ;; Tracked objects:
  5642 ;;		On entry : 0/0
  5643 ;;		On exit  : 0/0
  5644 ;;		Unchanged: 0/0
  5645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5650 ;;Total ram usage:        0 bytes
  5651 ;; Hardware stack levels used:    1
  5652 ;; Hardware stack levels required when called:    7
  5653 ;; This function calls:
  5654 ;;		Nothing
  5655 ;; This function is called by:
  5656 ;;		_ProcessMasterComms
  5657 ;; This function uses a non-reentrant model
  5658 ;;
  5659                           
  5660                           	psect	text29
  5661  003016                     __ptext29:
  5662                           	opt stack 0
  5663  003016                     _DataReadyST7540:
  5664                           	opt stack 22
  5665                           
  5666                           ;ST7540.c: 355: return (flagST7540UCG & 4);
  5667                           
  5668                           ; BSR set to: 0
  5669                           ;incstack = 0
  5670  003016  5055               	movf	_flagST7540UCG,w,c
  5671  003018  0B04               	andlw	4
  5672  00301A  0012               	return	
  5673  00301C                     __end_of_DataReadyST7540:
  5674                           	opt stack 0
  5675                           tblptru	equ	0xFF8
  5676                           prodh	equ	0xFF4
  5677                           prodl	equ	0xFF3
  5678                           postinc0	equ	0xFEE
  5679                           wreg	equ	0xFE8
  5680                           indf1	equ	0xFE7
  5681                           postinc1	equ	0xFE6
  5682                           postdec1	equ	0xFE5
  5683                           fsr1h	equ	0xFE2
  5684                           fsr1l	equ	0xFE1
  5685                           indf2	equ	0xFDF
  5686                           postinc2	equ	0xFDE
  5687                           postdec2	equ	0xFDD
  5688                           fsr2h	equ	0xFDA
  5689                           fsr2l	equ	0xFD9
  5690                           status	equ	0xFD8
  5691                           
  5692 ;; *************** function _InitSystem *****************
  5693 ;; Defined at:
  5694 ;;		line 89 in file "main.c"
  5695 ;; Parameters:    Size  Location     Type
  5696 ;;		None
  5697 ;; Auto vars:     Size  Location     Type
  5698 ;;		None
  5699 ;; Return value:  Size  Location     Type
  5700 ;;                  1    wreg      void 
  5701 ;; Registers used:
  5702 ;;		wreg, status,2, status,0
  5703 ;; Tracked objects:
  5704 ;;		On entry : 0/0
  5705 ;;		On exit  : 0/0
  5706 ;;		Unchanged: 0/0
  5707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5712 ;;Total ram usage:        0 bytes
  5713 ;; Hardware stack levels used:    1
  5714 ;; Hardware stack levels required when called:    7
  5715 ;; This function calls:
  5716 ;;		Nothing
  5717 ;; This function is called by:
  5718 ;;		_main
  5719 ;; This function uses a non-reentrant model
  5720 ;;
  5721                           
  5722                           	psect	text30
  5723  002546                     __ptext30:
  5724                           	opt stack 0
  5725  002546                     _InitSystem:
  5726                           	opt stack 23
  5727                           
  5728                           ;main.c: 94: OSCTUNEbits.PLLEN = 1;
  5729                           
  5730                           ;incstack = 0
  5731  002546  8C9B               	bsf	3995,6,c	;volatile
  5732                           
  5733                           ;main.c: 95: OSCCONbits.IRCF = 0b110;
  5734  002548  50D3               	movf	4051,w,c	;volatile
  5735  00254A  0B8F               	andlw	-113
  5736  00254C  0960               	iorlw	96
  5737  00254E  6ED3               	movwf	4051,c	;volatile
  5738                           
  5739                           ;main.c: 98: PR2 = 150;
  5740  002550  0E96               	movlw	150
  5741  002552  6ECB               	movwf	4043,c	;volatile
  5742                           
  5743                           ;main.c: 99: T2CONbits.T2OUTPS = 0b0111;
  5744  002554  50CA               	movf	4042,w,c	;volatile
  5745  002556  0B87               	andlw	-121
  5746  002558  0938               	iorlw	56
  5747  00255A  6ECA               	movwf	4042,c	;volatile
  5748                           
  5749                           ;main.c: 100: PIR1bits.TMR2IF = 0;
  5750  00255C  929E               	bcf	3998,1,c	;volatile
  5751                           
  5752                           ;main.c: 101: PIE1bits.TMR2IE = 1;
  5753  00255E  829D               	bsf	3997,1,c	;volatile
  5754                           
  5755                           ;main.c: 102: T2CONbits.TMR2ON = 1;
  5756  002560  84CA               	bsf	4042,2,c	;volatile
  5757                           
  5758                           ;main.c: 103: INTCONbits.PEIE = 1;
  5759  002562  8CF2               	bsf	intcon,6,c	;volatile
  5760                           
  5761                           ;main.c: 104: INTCONbits.GIE = 1;
  5762  002564  8EF2               	bsf	intcon,7,c	;volatile
  5763                           
  5764                           ;main.c: 107: ADCON1bits.ACQT = 0b001;
  5765  002566  50C1               	movf	4033,w,c	;volatile
  5766  002568  0BC7               	andlw	-57
  5767  00256A  0908               	iorlw	8
  5768  00256C  6EC1               	movwf	4033,c	;volatile
  5769                           
  5770                           ;main.c: 108: ADCON1bits.ADCS = 0b110;
  5771  00256E  50C1               	movf	4033,w,c	;volatile
  5772  002570  0BF8               	andlw	-8
  5773  002572  0906               	iorlw	6
  5774  002574  6EC1               	movwf	4033,c	;volatile
  5775                           
  5776                           ;main.c: 109: ADCON1bits.ADFM = 1;
  5777  002576  8EC1               	bsf	4033,7,c	;volatile
  5778                           
  5779                           ;main.c: 110: ADCON0bits.ADON = 1;
  5780  002578  80C2               	bsf	4034,0,c	;volatile
  5781                           
  5782                           ;main.c: 112: TRISAbits.TRISA5 = 1;
  5783  00257A  8A92               	bsf	3986,5,c	;volatile
  5784                           
  5785                           ;main.c: 115: TRISBbits.TRISB7 =0;
  5786  00257C  9E93               	bcf	3987,7,c	;volatile
  5787                           
  5788                           ;main.c: 116: TRISBbits.TRISB6 =0;
  5789  00257E  9C93               	bcf	3987,6,c	;volatile
  5790                           
  5791                           ;main.c: 117: LATBbits.LATB7 =0;
  5792  002580  9E8A               	bcf	3978,7,c	;volatile
  5793                           
  5794                           ;main.c: 118: LATBbits.LATB6 =0;
  5795  002582  9C8A               	bcf	3978,6,c	;volatile
  5796                           
  5797                           ;main.c: 121: TRISAbits.TRISA6 = 0;
  5798  002584  9C92               	bcf	3986,6,c	;volatile
  5799                           
  5800                           ;main.c: 122: TRISBbits.TRISB3 = 0;
  5801  002586  9693               	bcf	3987,3,c	;volatile
  5802                           
  5803                           ;main.c: 123: TRISCbits.TRISC0 = 0;
  5804  002588  9094               	bcf	3988,0,c	;volatile
  5805                           
  5806                           ;main.c: 124: LATAbits.LATA6 = 0;
  5807  00258A  9C89               	bcf	3977,6,c	;volatile
  5808                           
  5809                           ;main.c: 125: LATBbits.LATB3 = 0;
  5810  00258C  968A               	bcf	3978,3,c	;volatile
  5811                           
  5812                           ;main.c: 126: LATCbits.LATC0 = 0;
  5813  00258E  908B               	bcf	3979,0,c	;volatile
  5814                           
  5815                           ;main.c: 130: TRISCbits.TRISC4 = 0;
  5816  002590  9894               	bcf	3988,4,c	;volatile
  5817                           
  5818                           ;main.c: 131: LATCbits.LATC4 = 0;
  5819  002592  988B               	bcf	3979,4,c	;volatile
  5820                           
  5821                           ;main.c: 134: TRISDbits.TRISD7 = 0;
  5822  002594  9E95               	bcf	3989,7,c	;volatile
  5823                           
  5824                           ;main.c: 135: LATDbits.LATD7 = 0;
  5825  002596  9E8C               	bcf	3980,7,c	;volatile
  5826                           
  5827                           ;main.c: 137: TRISAbits.TRISA5 = 0;
  5828  002598  9A92               	bcf	3986,5,c	;volatile
  5829                           
  5830                           ;main.c: 138: LATAbits.LATA5 = 0;
  5831  00259A  9A89               	bcf	3977,5,c	;volatile
  5832                           
  5833                           ;main.c: 139: statusFlagsUSLG |= 0b000000010000000000000000;
  5834  00259C  8038               	bsf	_statusFlagsUSLG+2,0,c	;volatile
  5835                           
  5836                           ;main.c: 142: TRISAbits.TRISA2 = 0;
  5837  00259E  9492               	bcf	3986,2,c	;volatile
  5838                           
  5839                           ;main.c: 143: LATAbits.LATA2 = 0;
  5840  0025A0  9489               	bcf	3977,2,c	;volatile
  5841                           
  5842                           ;main.c: 145: TRISBbits.TRISB2 = 0;
  5843  0025A2  9493               	bcf	3987,2,c	;volatile
  5844                           
  5845                           ;main.c: 146: LATBbits.LATB2 = 1;
  5846  0025A4  848A               	bsf	3978,2,c	;volatile
  5847                           
  5848                           ;main.c: 148: TRISDbits.TRISD1 = 0;
  5849  0025A6  9295               	bcf	3989,1,c	;volatile
  5850                           
  5851                           ;main.c: 149: LATDbits.LATD1 = 1;
  5852  0025A8  828C               	bsf	3980,1,c	;volatile
  5853                           
  5854                           ;main.c: 151: TRISBbits.TRISB1 = 1;
  5855  0025AA  8293               	bsf	3987,1,c	;volatile
  5856                           
  5857                           ;main.c: 152: ANCON1bits.PCFG10 = 0;
  5858  0025AC  010F               	movlb	15	; () banked
  5859  0025AE  9549               	bcf	73,2,b	;volatile
  5860                           
  5861                           ; BSR set to: 15
  5862                           ;main.c: 155: TRISAbits.TRISA1 = 1;
  5863  0025B0  8292               	bsf	3986,1,c	;volatile
  5864                           
  5865                           ; BSR set to: 15
  5866                           ;main.c: 156: ANCON0bits.PCFG1 = 0;
  5867  0025B2  010F               	movlb	15	; () banked
  5868  0025B4  9348               	bcf	72,1,b	;volatile
  5869                           
  5870                           ; BSR set to: 15
  5871                           ;main.c: 158: TRISEbits.TRISE1 = 1;
  5872  0025B6  8296               	bsf	3990,1,c	;volatile
  5873                           
  5874                           ; BSR set to: 15
  5875                           ;main.c: 159: ANCON0bits.PCFG6 = 0;
  5876  0025B8  010F               	movlb	15	; () banked
  5877  0025BA  9D48               	bcf	72,6,b	;volatile
  5878                           
  5879                           ; BSR set to: 15
  5880                           ;main.c: 162: TRISEbits.TRISE0 = 0;
  5881  0025BC  9096               	bcf	3990,0,c	;volatile
  5882                           
  5883                           ; BSR set to: 15
  5884                           ;main.c: 163: LATEbits.LATE0 = 0;
  5885  0025BE  908D               	bcf	3981,0,c	;volatile
  5886                           
  5887                           ; BSR set to: 15
  5888                           ;main.c: 166: LATDbits.LATD7 = 1;
  5889  0025C0  8E8C               	bsf	3980,7,c	;volatile
  5890                           
  5891                           ; BSR set to: 15
  5892  0025C2  0012               	return		;funcret
  5893  0025C4                     __end_of_InitSystem:
  5894                           	opt stack 0
  5895                           tblptru	equ	0xFF8
  5896                           prodh	equ	0xFF4
  5897                           prodl	equ	0xFF3
  5898                           intcon	equ	0xFF2
  5899                           postinc0	equ	0xFEE
  5900                           wreg	equ	0xFE8
  5901                           indf1	equ	0xFE7
  5902                           postinc1	equ	0xFE6
  5903                           postdec1	equ	0xFE5
  5904                           fsr1h	equ	0xFE2
  5905                           fsr1l	equ	0xFE1
  5906                           indf2	equ	0xFDF
  5907                           postinc2	equ	0xFDE
  5908                           postdec2	equ	0xFDD
  5909                           fsr2h	equ	0xFDA
  5910                           fsr2l	equ	0xFD9
  5911                           status	equ	0xFD8
  5912                           
  5913 ;; *************** function _InitStates *****************
  5914 ;; Defined at:
  5915 ;;		line 169 in file "main.c"
  5916 ;; Parameters:    Size  Location     Type
  5917 ;;		None
  5918 ;; Auto vars:     Size  Location     Type
  5919 ;;		None
  5920 ;; Return value:  Size  Location     Type
  5921 ;;                  1    wreg      void 
  5922 ;; Registers used:
  5923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5924 ;; Tracked objects:
  5925 ;;		On entry : 0/0
  5926 ;;		On exit  : 0/0
  5927 ;;		Unchanged: 0/0
  5928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  5933 ;;Total ram usage:        0 bytes
  5934 ;; Hardware stack levels used:    1
  5935 ;; Hardware stack levels required when called:   11
  5936 ;; This function calls:
  5937 ;;		_ClearPacketNumbers
  5938 ;;		_ReadFlashValues
  5939 ;;		_ResetBoosterStates
  5940 ;; This function is called by:
  5941 ;;		_main
  5942 ;; This function uses a non-reentrant model
  5943 ;;
  5944                           
  5945                           	psect	text31
  5946  002FB6                     __ptext31:
  5947                           	opt stack 0
  5948  002FB6                     _InitStates:
  5949                           	opt stack 19
  5950                           
  5951                           ;main.c: 171: ResetBoosterStates();
  5952                           
  5953                           ; BSR set to: 15
  5954                           ;incstack = 0
  5955  002FB6  EC39  F017         	call	_ResetBoosterStates	;wreg free
  5956                           
  5957                           ;main.c: 172: ReadFlashValues();
  5958  002FBA  EC0F  F011         	call	_ReadFlashValues	;wreg free
  5959                           
  5960                           ;main.c: 173: ClearPacketNumbers();
  5961  002FBE  ECA9  F014         	call	_ClearPacketNumbers	;wreg free
  5962  002FC2  0012               	return		;funcret
  5963  002FC4                     __end_of_InitStates:
  5964                           	opt stack 0
  5965                           tblptru	equ	0xFF8
  5966                           prodh	equ	0xFF4
  5967                           prodl	equ	0xFF3
  5968                           intcon	equ	0xFF2
  5969                           postinc0	equ	0xFEE
  5970                           wreg	equ	0xFE8
  5971                           indf1	equ	0xFE7
  5972                           postinc1	equ	0xFE6
  5973                           postdec1	equ	0xFE5
  5974                           fsr1h	equ	0xFE2
  5975                           fsr1l	equ	0xFE1
  5976                           indf2	equ	0xFDF
  5977                           postinc2	equ	0xFDE
  5978                           postdec2	equ	0xFDD
  5979                           fsr2h	equ	0xFDA
  5980                           fsr2l	equ	0xFD9
  5981                           status	equ	0xFD8
  5982                           
  5983 ;; *************** function _ResetBoosterStates *****************
  5984 ;; Defined at:
  5985 ;;		line 589 in file "boostercomms.c"
  5986 ;; Parameters:    Size  Location     Type
  5987 ;;		None
  5988 ;; Auto vars:     Size  Location     Type
  5989 ;;  boosterCount    1    1[BANK0 ] unsigned char 
  5990 ;; Return value:  Size  Location     Type
  5991 ;;                  1    wreg      void 
  5992 ;; Registers used:
  5993 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5994 ;; Tracked objects:
  5995 ;;		On entry : 0/0
  5996 ;;		On exit  : 0/0
  5997 ;;		Unchanged: 0/0
  5998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  5999 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6000 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6002 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6003 ;;Total ram usage:        1 bytes
  6004 ;; Hardware stack levels used:    1
  6005 ;; Hardware stack levels required when called:    8
  6006 ;; This function calls:
  6007 ;;		_ResetSingleBoosterState
  6008 ;; This function is called by:
  6009 ;;		_InitStates
  6010 ;;		_ForceFiringMode
  6011 ;; This function uses a non-reentrant model
  6012 ;;
  6013                           
  6014                           	psect	text32
  6015  002E72                     __ptext32:
  6016                           	opt stack 0
  6017  002E72                     _ResetBoosterStates:
  6018                           	opt stack 20
  6019                           
  6020                           ;boostercomms.c: 590: unsigned char boosterCountUC;
  6021                           ;boostercomms.c: 592: for(boosterCountUC = 0; boosterCountUC < 30; boosterCountUC++)
  6022                           
  6023                           ;incstack = 0
  6024  002E72  0E00               	movlw	0
  6025  002E74  0100               	movlb	0	; () banked
  6026  002E76  6F61               	movwf	ResetBoosterStates@boosterCountUC& (0+255),b
  6027  002E78                     l4425:
  6028                           
  6029                           ; BSR set to: 0
  6030  002E78  0E1D               	movlw	29
  6031  002E7A  0100               	movlb	0	; () banked
  6032  002E7C  6561               	cpfsgt	ResetBoosterStates@boosterCountUC& (0+255),b
  6033  002E7E  D001               	goto	l4429
  6034  002E80  0012               	return	
  6035  002E82                     l4429:
  6036                           
  6037                           ; BSR set to: 0
  6038                           ;boostercomms.c: 593: ResetSingleBoosterState(boosterCountUC);
  6039  002E82  0100               	movlb	0	; () banked
  6040  002E84  5161               	movf	ResetBoosterStates@boosterCountUC& (0+255),w,b
  6041  002E86  EC27  F00F         	call	_ResetSingleBoosterState
  6042  002E8A  0100               	movlb	0	; () banked
  6043  002E8C  2B61               	incf	ResetBoosterStates@boosterCountUC& (0+255),f,b
  6044  002E8E  D7F4               	goto	l4425
  6045  002E90                     __end_of_ResetBoosterStates:
  6046                           	opt stack 0
  6047                           tblptru	equ	0xFF8
  6048                           prodh	equ	0xFF4
  6049                           prodl	equ	0xFF3
  6050                           intcon	equ	0xFF2
  6051                           postinc0	equ	0xFEE
  6052                           wreg	equ	0xFE8
  6053                           indf1	equ	0xFE7
  6054                           postinc1	equ	0xFE6
  6055                           postdec1	equ	0xFE5
  6056                           fsr1h	equ	0xFE2
  6057                           fsr1l	equ	0xFE1
  6058                           indf2	equ	0xFDF
  6059                           postinc2	equ	0xFDE
  6060                           postdec2	equ	0xFDD
  6061                           fsr2h	equ	0xFDA
  6062                           fsr2l	equ	0xFD9
  6063                           status	equ	0xFD8
  6064                           
  6065 ;; *************** function _ResetSingleBoosterState *****************
  6066 ;; Defined at:
  6067 ;;		line 577 in file "boostercomms.c"
  6068 ;; Parameters:    Size  Location     Type
  6069 ;;  boosterNumbe    1    wreg     unsigned char 
  6070 ;; Auto vars:     Size  Location     Type
  6071 ;;  boosterNumbe    1    0[BANK0 ] unsigned char 
  6072 ;; Return value:  Size  Location     Type
  6073 ;;                  1    wreg      void 
  6074 ;; Registers used:
  6075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6076 ;; Tracked objects:
  6077 ;;		On entry : 0/0
  6078 ;;		On exit  : 0/0
  6079 ;;		Unchanged: 0/0
  6080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6082 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6083 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6084 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6085 ;;Total ram usage:        1 bytes
  6086 ;; Hardware stack levels used:    1
  6087 ;; Hardware stack levels required when called:    7
  6088 ;; This function calls:
  6089 ;;		Nothing
  6090 ;; This function is called by:
  6091 ;;		_ResetBoosterStates
  6092 ;; This function uses a non-reentrant model
  6093 ;;
  6094                           
  6095                           	psect	text33
  6096  001E4E                     __ptext33:
  6097                           	opt stack 0
  6098  001E4E                     _ResetSingleBoosterState:
  6099                           	opt stack 20
  6100                           
  6101                           ; BSR set to: 0
  6102                           ;incstack = 0
  6103                           ;ResetSingleBoosterState@boosterNumberUC stored from wreg
  6104  001E4E  0100               	movlb	0	; () banked
  6105  001E50  6F60               	movwf	ResetSingleBoosterState@boosterNumberUC& (0+255),b
  6106                           
  6107                           ;boostercomms.c: 578: boosterCommsData[4][boosterNumberUC] = 10;
  6108  001E52  0100               	movlb	0	; () banked
  6109  001E54  5160               	movf	ResetSingleBoosterState@boosterNumberUC& (0+255),w,b
  6110  001E56  0D01               	mullw	1
  6111  001E58  0E78               	movlw	low (_boosterCommsData+120)
  6112  001E5A  24F3               	addwf	prodl,w,c
  6113  001E5C  6ED9               	movwf	fsr2l,c
  6114  001E5E  0E03               	movlw	high (_boosterCommsData+120)
  6115  001E60  20F4               	addwfc	prodh,w,c
  6116  001E62  6EDA               	movwf	fsr2h,c
  6117  001E64  0E0A               	movlw	10
  6118  001E66  6EDF               	movwf	indf2,c
  6119                           
  6120                           ;boostercomms.c: 579: boosterCommsData[5][boosterNumberUC] = 0;
  6121  001E68  0100               	movlb	0	; () banked
  6122  001E6A  5160               	movf	ResetSingleBoosterState@boosterNumberUC& (0+255),w,b
  6123  001E6C  0D01               	mullw	1
  6124  001E6E  0E96               	movlw	low (_boosterCommsData+150)
  6125  001E70  24F3               	addwf	prodl,w,c
  6126  001E72  6ED9               	movwf	fsr2l,c
  6127  001E74  0E03               	movlw	high (_boosterCommsData+150)
  6128  001E76  20F4               	addwfc	prodh,w,c
  6129  001E78  6EDA               	movwf	fsr2h,c
  6130  001E7A  0E00               	movlw	0
  6131  001E7C  6EDF               	movwf	indf2,c
  6132                           
  6133                           ;boostercomms.c: 580: boosterCommsData[6][boosterNumberUC] = 0;
  6134  001E7E  0100               	movlb	0	; () banked
  6135  001E80  5160               	movf	ResetSingleBoosterState@boosterNumberUC& (0+255),w,b
  6136  001E82  0D01               	mullw	1
  6137  001E84  0EB4               	movlw	low (_boosterCommsData+180)
  6138  001E86  24F3               	addwf	prodl,w,c
  6139  001E88  6ED9               	movwf	fsr2l,c
  6140  001E8A  0E03               	movlw	high (_boosterCommsData+180)
  6141  001E8C  20F4               	addwfc	prodh,w,c
  6142  001E8E  6EDA               	movwf	fsr2h,c
  6143  001E90  0E00               	movlw	0
  6144  001E92  6EDF               	movwf	indf2,c
  6145                           
  6146                           ;boostercomms.c: 581: boosterCommsData[7][boosterNumberUC] = 0;
  6147  001E94  0100               	movlb	0	; () banked
  6148  001E96  5160               	movf	ResetSingleBoosterState@boosterNumberUC& (0+255),w,b
  6149  001E98  0D01               	mullw	1
  6150  001E9A  0ED2               	movlw	low (_boosterCommsData+210)
  6151  001E9C  24F3               	addwf	prodl,w,c
  6152  001E9E  6ED9               	movwf	fsr2l,c
  6153  001EA0  0E03               	movlw	high (_boosterCommsData+210)
  6154  001EA2  20F4               	addwfc	prodh,w,c
  6155  001EA4  6EDA               	movwf	fsr2h,c
  6156  001EA6  0E00               	movlw	0
  6157  001EA8  6EDF               	movwf	indf2,c
  6158                           
  6159                           ;boostercomms.c: 582: boosterCommsData[0][boosterNumberUC] = 0;
  6160  001EAA  0100               	movlb	0	; () banked
  6161  001EAC  5160               	movf	ResetSingleBoosterState@boosterNumberUC& (0+255),w,b
  6162  001EAE  0D01               	mullw	1
  6163  001EB0  0E00               	movlw	low _boosterCommsData
  6164  001EB2  24F3               	addwf	prodl,w,c
  6165  001EB4  6ED9               	movwf	fsr2l,c
  6166  001EB6  0E03               	movlw	high _boosterCommsData
  6167  001EB8  20F4               	addwfc	prodh,w,c
  6168  001EBA  6EDA               	movwf	fsr2h,c
  6169  001EBC  0E00               	movlw	0
  6170  001EBE  6EDF               	movwf	indf2,c
  6171                           
  6172                           ;boostercomms.c: 583: boosterCommsData[1][boosterNumberUC] = 0;
  6173  001EC0  0100               	movlb	0	; () banked
  6174  001EC2  5160               	movf	ResetSingleBoosterState@boosterNumberUC& (0+255),w,b
  6175  001EC4  0D01               	mullw	1
  6176  001EC6  0E1E               	movlw	low (_boosterCommsData+30)
  6177  001EC8  24F3               	addwf	prodl,w,c
  6178  001ECA  6ED9               	movwf	fsr2l,c
  6179  001ECC  0E03               	movlw	high (_boosterCommsData+30)
  6180  001ECE  20F4               	addwfc	prodh,w,c
  6181  001ED0  6EDA               	movwf	fsr2h,c
  6182  001ED2  0E00               	movlw	0
  6183  001ED4  6EDF               	movwf	indf2,c
  6184                           
  6185                           ;boostercomms.c: 584: boosterCommsData[2][boosterNumberUC] = 0;
  6186  001ED6  0100               	movlb	0	; () banked
  6187  001ED8  5160               	movf	ResetSingleBoosterState@boosterNumberUC& (0+255),w,b
  6188  001EDA  0D01               	mullw	1
  6189  001EDC  0E3C               	movlw	low (_boosterCommsData+60)
  6190  001EDE  24F3               	addwf	prodl,w,c
  6191  001EE0  6ED9               	movwf	fsr2l,c
  6192  001EE2  0E03               	movlw	high (_boosterCommsData+60)
  6193  001EE4  20F4               	addwfc	prodh,w,c
  6194  001EE6  6EDA               	movwf	fsr2h,c
  6195  001EE8  0E00               	movlw	0
  6196  001EEA  6EDF               	movwf	indf2,c
  6197                           
  6198                           ;boostercomms.c: 585: boosterCommsData[3][boosterNumberUC] = 0;
  6199  001EEC  0100               	movlb	0	; () banked
  6200  001EEE  5160               	movf	ResetSingleBoosterState@boosterNumberUC& (0+255),w,b
  6201  001EF0  0D01               	mullw	1
  6202  001EF2  0E5A               	movlw	low (_boosterCommsData+90)
  6203  001EF4  24F3               	addwf	prodl,w,c
  6204  001EF6  6ED9               	movwf	fsr2l,c
  6205  001EF8  0E03               	movlw	high (_boosterCommsData+90)
  6206  001EFA  20F4               	addwfc	prodh,w,c
  6207  001EFC  6EDA               	movwf	fsr2h,c
  6208  001EFE  0E00               	movlw	0
  6209  001F00  6EDF               	movwf	indf2,c
  6210                           
  6211                           ;boostercomms.c: 586: boosterCommsDataSerial[boosterNumberUC] = 0;
  6212  001F02  0100               	movlb	0	; () banked
  6213  001F04  5160               	movf	ResetSingleBoosterState@boosterNumberUC& (0+255),w,b
  6214  001F06  0D02               	mullw	2
  6215  001F08  0E84               	movlw	low _boosterCommsDataSerial
  6216  001F0A  24F3               	addwf	prodl,w,c
  6217  001F0C  6ED9               	movwf	fsr2l,c
  6218  001F0E  0E01               	movlw	high _boosterCommsDataSerial
  6219  001F10  20F4               	addwfc	prodh,w,c
  6220  001F12  6EDA               	movwf	fsr2h,c
  6221  001F14  0E00               	movlw	0
  6222  001F16  6EDE               	movwf	postinc2,c
  6223  001F18  0E00               	movlw	0
  6224  001F1A  6EDD               	movwf	postdec2,c
  6225                           
  6226                           ; BSR set to: 0
  6227  001F1C  0012               	return		;funcret
  6228  001F1E                     __end_of_ResetSingleBoosterState:
  6229                           	opt stack 0
  6230                           tblptru	equ	0xFF8
  6231                           prodh	equ	0xFF4
  6232                           prodl	equ	0xFF3
  6233                           intcon	equ	0xFF2
  6234                           postinc0	equ	0xFEE
  6235                           wreg	equ	0xFE8
  6236                           indf1	equ	0xFE7
  6237                           postinc1	equ	0xFE6
  6238                           postdec1	equ	0xFE5
  6239                           fsr1h	equ	0xFE2
  6240                           fsr1l	equ	0xFE1
  6241                           indf2	equ	0xFDF
  6242                           postinc2	equ	0xFDE
  6243                           postdec2	equ	0xFDD
  6244                           fsr2h	equ	0xFDA
  6245                           fsr2l	equ	0xFD9
  6246                           status	equ	0xFD8
  6247                           
  6248 ;; *************** function _ReadFlashValues *****************
  6249 ;; Defined at:
  6250 ;;		line 186 in file "peripherals.c"
  6251 ;; Parameters:    Size  Location     Type
  6252 ;;		None
  6253 ;; Auto vars:     Size  Location     Type
  6254 ;;		None
  6255 ;; Return value:  Size  Location     Type
  6256 ;;                  1    wreg      void 
  6257 ;; Registers used:
  6258 ;;		wreg, status,2, status,0, cstack
  6259 ;; Tracked objects:
  6260 ;;		On entry : 0/0
  6261 ;;		On exit  : 0/0
  6262 ;;		Unchanged: 0/0
  6263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6264 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6265 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6266 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6267 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6268 ;;Total ram usage:        3 bytes
  6269 ;; Hardware stack levels used:    1
  6270 ;; Hardware stack levels required when called:   10
  6271 ;; This function calls:
  6272 ;;		_FlashReadAddress
  6273 ;;		_WriteFlashValues
  6274 ;; This function is called by:
  6275 ;;		_InitStates
  6276 ;; This function uses a non-reentrant model
  6277 ;;
  6278                           
  6279                           	psect	text34
  6280  00221E                     __ptext34:
  6281                           	opt stack 0
  6282  00221E                     _ReadFlashValues:
  6283                           	opt stack 19
  6284                           
  6285                           ;peripherals.c: 187: nextSerialUSG = FlashReadAddress(0xFBFE);
  6286                           
  6287                           ; BSR set to: 0
  6288                           ;incstack = 0
  6289  00221E  0EFB               	movlw	251
  6290  002220  0100               	movlb	0	; () banked
  6291  002222  6F61               	movwf	(FlashReadAddress@flashAddressUS+1)& (0+255),b
  6292  002224  0EFE               	movlw	254
  6293  002226  6F60               	movwf	FlashReadAddress@flashAddressUS& (0+255),b
  6294  002228  ECAF  F017         	call	_FlashReadAddress	;wreg free
  6295  00222C  0100               	movlb	0	; () banked
  6296  00222E  6F65               	movwf	??_ReadFlashValues& (0+255),b
  6297  002230  0100               	movlb	0	; () banked
  6298  002232  5165               	movf	??_ReadFlashValues& (0+255),w,b
  6299  002234  6E41               	movwf	_nextSerialUSG,c
  6300  002236  6A42               	clrf	_nextSerialUSG+1,c
  6301                           
  6302                           ;peripherals.c: 188: nextSerialUSG |= ((unsigned short) FlashReadAddress(0xFBFE+1)) << 8
      +                          ;
  6303  002238  0EFB               	movlw	251
  6304  00223A  0100               	movlb	0	; () banked
  6305  00223C  6F61               	movwf	(FlashReadAddress@flashAddressUS+1)& (0+255),b
  6306  00223E  6960               	setf	FlashReadAddress@flashAddressUS& (0+255),b
  6307  002240  ECAF  F017         	call	_FlashReadAddress	;wreg free
  6308  002244  0100               	movlb	0	; () banked
  6309  002246  6F65               	movwf	??_ReadFlashValues& (0+255),b
  6310  002248  0100               	movlb	0	; () banked
  6311  00224A  5165               	movf	??_ReadFlashValues& (0+255),w,b
  6312  00224C  0100               	movlb	0	; () banked
  6313  00224E  6F67               	movwf	(??_ReadFlashValues+2)& (0+255),b
  6314  002250  6B66               	clrf	(??_ReadFlashValues+1)& (0+255),b
  6315  002252  0100               	movlb	0	; () banked
  6316  002254  5166               	movf	(??_ReadFlashValues+1)& (0+255),w,b
  6317  002256  1241               	iorwf	_nextSerialUSG,f,c
  6318  002258  0100               	movlb	0	; () banked
  6319  00225A  5167               	movf	(??_ReadFlashValues+2)& (0+255),w,b
  6320  00225C  1242               	iorwf	_nextSerialUSG+1,f,c
  6321                           
  6322                           ;peripherals.c: 189: iscSerialUSG = FlashReadAddress(0xFBFC);
  6323  00225E  0EFB               	movlw	251
  6324  002260  0100               	movlb	0	; () banked
  6325  002262  6F61               	movwf	(FlashReadAddress@flashAddressUS+1)& (0+255),b
  6326  002264  0EFC               	movlw	252
  6327  002266  6F60               	movwf	FlashReadAddress@flashAddressUS& (0+255),b
  6328  002268  ECAF  F017         	call	_FlashReadAddress	;wreg free
  6329  00226C  0100               	movlb	0	; () banked
  6330  00226E  6F65               	movwf	??_ReadFlashValues& (0+255),b
  6331  002270  0100               	movlb	0	; () banked
  6332  002272  5165               	movf	??_ReadFlashValues& (0+255),w,b
  6333  002274  0100               	movlb	0	; () banked
  6334  002276  6FDC               	movwf	_iscSerialUSG& (0+255),b
  6335  002278  6BDD               	clrf	(_iscSerialUSG+1)& (0+255),b
  6336                           
  6337                           ;peripherals.c: 190: iscSerialUSG |= ((unsigned short) FlashReadAddress(0xFBFC+1)) << 8;
  6338  00227A  0EFB               	movlw	251
  6339  00227C  0100               	movlb	0	; () banked
  6340  00227E  6F61               	movwf	(FlashReadAddress@flashAddressUS+1)& (0+255),b
  6341  002280  0EFD               	movlw	253
  6342  002282  6F60               	movwf	FlashReadAddress@flashAddressUS& (0+255),b
  6343  002284  ECAF  F017         	call	_FlashReadAddress	;wreg free
  6344  002288  0100               	movlb	0	; () banked
  6345  00228A  6F65               	movwf	??_ReadFlashValues& (0+255),b
  6346  00228C  0100               	movlb	0	; () banked
  6347  00228E  5165               	movf	??_ReadFlashValues& (0+255),w,b
  6348  002290  0100               	movlb	0	; () banked
  6349  002292  6F67               	movwf	(??_ReadFlashValues+2)& (0+255),b
  6350  002294  6B66               	clrf	(??_ReadFlashValues+1)& (0+255),b
  6351  002296  0100               	movlb	0	; () banked
  6352  002298  5166               	movf	(??_ReadFlashValues+1)& (0+255),w,b
  6353  00229A  0100               	movlb	0	; () banked
  6354  00229C  13DC               	iorwf	_iscSerialUSG& (0+255),f,b
  6355  00229E  0100               	movlb	0	; () banked
  6356  0022A0  5167               	movf	(??_ReadFlashValues+2)& (0+255),w,b
  6357  0022A2  0100               	movlb	0	; () banked
  6358  0022A4  13DD               	iorwf	(_iscSerialUSG+1)& (0+255),f,b
  6359                           
  6360                           ; BSR set to: 0
  6361                           ;peripherals.c: 192: if(nextSerialUSG == 0xFFFF){
  6362  0022A6  2841               	incf	_nextSerialUSG,w,c
  6363  0022A8  E10F               	bnz	l1053
  6364  0022AA  2842               	incf	_nextSerialUSG+1,w,c
  6365  0022AC  A4D8               	btfss	status,2,c
  6366  0022AE  0012               	return	
  6367                           
  6368                           ; BSR set to: 0
  6369                           ;peripherals.c: 193: nextSerialUSG = 1;
  6370  0022B0  0E00               	movlw	0
  6371  0022B2  6E42               	movwf	_nextSerialUSG+1,c
  6372  0022B4  0E01               	movlw	1
  6373  0022B6  6E41               	movwf	_nextSerialUSG,c
  6374                           
  6375                           ;peripherals.c: 194: iscSerialUSG = 0x0057;
  6376  0022B8  0E00               	movlw	0
  6377  0022BA  0100               	movlb	0	; () banked
  6378  0022BC  6FDD               	movwf	(_iscSerialUSG+1)& (0+255),b
  6379  0022BE  0E57               	movlw	87
  6380  0022C0  6FDC               	movwf	_iscSerialUSG& (0+255),b
  6381                           
  6382                           ; BSR set to: 0
  6383                           ;peripherals.c: 195: WriteFlashValues();
  6384  0022C2  EC15  F015         	call	_WriteFlashValues	;wreg free
  6385  0022C6  0012               	return	
  6386  0022C8                     l1053:
  6387  0022C8  0012               	return		;funcret
  6388  0022CA                     __end_of_ReadFlashValues:
  6389                           	opt stack 0
  6390                           tblptru	equ	0xFF8
  6391                           prodh	equ	0xFF4
  6392                           prodl	equ	0xFF3
  6393                           intcon	equ	0xFF2
  6394                           postinc0	equ	0xFEE
  6395                           wreg	equ	0xFE8
  6396                           indf1	equ	0xFE7
  6397                           postinc1	equ	0xFE6
  6398                           postdec1	equ	0xFE5
  6399                           fsr1h	equ	0xFE2
  6400                           fsr1l	equ	0xFE1
  6401                           indf2	equ	0xFDF
  6402                           postinc2	equ	0xFDE
  6403                           postdec2	equ	0xFDD
  6404                           fsr2h	equ	0xFDA
  6405                           fsr2l	equ	0xFD9
  6406                           status	equ	0xFD8
  6407                           
  6408 ;; *************** function _WriteFlashValues *****************
  6409 ;; Defined at:
  6410 ;;		line 180 in file "peripherals.c"
  6411 ;; Parameters:    Size  Location     Type
  6412 ;;		None
  6413 ;; Auto vars:     Size  Location     Type
  6414 ;;		None
  6415 ;; Return value:  Size  Location     Type
  6416 ;;                  1    wreg      void 
  6417 ;; Registers used:
  6418 ;;		wreg, status,2, status,0, cstack
  6419 ;; Tracked objects:
  6420 ;;		On entry : 0/0
  6421 ;;		On exit  : 0/0
  6422 ;;		Unchanged: 0/0
  6423 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6424 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6425 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6426 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6427 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6428 ;;Total ram usage:        0 bytes
  6429 ;; Hardware stack levels used:    1
  6430 ;; Hardware stack levels required when called:    9
  6431 ;; This function calls:
  6432 ;;		_FlashEraseBlock
  6433 ;;		_FlashWriteWord
  6434 ;; This function is called by:
  6435 ;;		_SetSerialNumber
  6436 ;;		_ReadFlashValues
  6437 ;; This function uses a non-reentrant model
  6438 ;;
  6439                           
  6440                           	psect	text35
  6441  002A2A                     __ptext35:
  6442                           	opt stack 0
  6443  002A2A                     _WriteFlashValues:
  6444                           	opt stack 19
  6445                           
  6446                           ;peripherals.c: 181: FlashEraseBlock(0xFBFE);
  6447                           
  6448                           ;incstack = 0
  6449  002A2A  0EFB               	movlw	251
  6450  002A2C  0100               	movlb	0	; () banked
  6451  002A2E  6F61               	movwf	(FlashEraseBlock@flashAddressUS+1)& (0+255),b
  6452  002A30  0EFE               	movlw	254
  6453  002A32  6F60               	movwf	FlashEraseBlock@flashAddressUS& (0+255),b
  6454  002A34  EC22  F016         	call	_FlashEraseBlock	;wreg free
  6455                           
  6456                           ;peripherals.c: 182: FlashWriteWord(0xFBFE, nextSerialUSG, nextSerialUSG >> 8);
  6457  002A38  0EFB               	movlw	251
  6458  002A3A  0100               	movlb	0	; () banked
  6459  002A3C  6F61               	movwf	(FlashWriteWord@flashAddressUS+1)& (0+255),b
  6460  002A3E  0EFE               	movlw	254
  6461  002A40  6F60               	movwf	FlashWriteWord@flashAddressUS& (0+255),b
  6462  002A42  C041  F062         	movff	_nextSerialUSG,FlashWriteWord@lsbUC
  6463  002A46  5042               	movf	_nextSerialUSG+1,w,c
  6464  002A48  0100               	movlb	0	; () banked
  6465  002A4A  6F63               	movwf	FlashWriteWord@msbUC& (0+255),b
  6466  002A4C  EC57  F015         	call	_FlashWriteWord	;wreg free
  6467                           
  6468                           ;peripherals.c: 183: FlashWriteWord(0xFBFC, iscSerialUSG, iscSerialUSG >> 8);
  6469  002A50  0EFB               	movlw	251
  6470  002A52  0100               	movlb	0	; () banked
  6471  002A54  6F61               	movwf	(FlashWriteWord@flashAddressUS+1)& (0+255),b
  6472  002A56  0EFC               	movlw	252
  6473  002A58  6F60               	movwf	FlashWriteWord@flashAddressUS& (0+255),b
  6474  002A5A  C0DC  F062         	movff	_iscSerialUSG,FlashWriteWord@lsbUC
  6475  002A5E  0100               	movlb	0	; () banked
  6476  002A60  51DD               	movf	(_iscSerialUSG+1)& (0+255),w,b
  6477  002A62  0100               	movlb	0	; () banked
  6478  002A64  6F63               	movwf	FlashWriteWord@msbUC& (0+255),b
  6479  002A66  EC57  F015         	call	_FlashWriteWord	;wreg free
  6480  002A6A  0012               	return		;funcret
  6481  002A6C                     __end_of_WriteFlashValues:
  6482                           	opt stack 0
  6483                           tblptru	equ	0xFF8
  6484                           prodh	equ	0xFF4
  6485                           prodl	equ	0xFF3
  6486                           intcon	equ	0xFF2
  6487                           postinc0	equ	0xFEE
  6488                           wreg	equ	0xFE8
  6489                           indf1	equ	0xFE7
  6490                           postinc1	equ	0xFE6
  6491                           postdec1	equ	0xFE5
  6492                           fsr1h	equ	0xFE2
  6493                           fsr1l	equ	0xFE1
  6494                           indf2	equ	0xFDF
  6495                           postinc2	equ	0xFDE
  6496                           postdec2	equ	0xFDD
  6497                           fsr2h	equ	0xFDA
  6498                           fsr2l	equ	0xFD9
  6499                           status	equ	0xFD8
  6500                           
  6501 ;; *************** function _FlashWriteWord *****************
  6502 ;; Defined at:
  6503 ;;		line 148 in file "peripherals.c"
  6504 ;; Parameters:    Size  Location     Type
  6505 ;;  flashAddress    2    0[BANK0 ] unsigned short 
  6506 ;;  lsbUC           1    2[BANK0 ] unsigned char 
  6507 ;;  msbUC           1    3[BANK0 ] unsigned char 
  6508 ;; Auto vars:     Size  Location     Type
  6509 ;;  intStatusUC     1    4[BANK0 ] unsigned char 
  6510 ;; Return value:  Size  Location     Type
  6511 ;;                  1    wreg      void 
  6512 ;; Registers used:
  6513 ;;		wreg, status,2, cstack
  6514 ;; Tracked objects:
  6515 ;;		On entry : 0/0
  6516 ;;		On exit  : 0/0
  6517 ;;		Unchanged: 0/0
  6518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6519 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6520 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6522 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6523 ;;Total ram usage:        5 bytes
  6524 ;; Hardware stack levels used:    1
  6525 ;; Hardware stack levels required when called:    8
  6526 ;; This function calls:
  6527 ;;		_FlashUnlockSequence
  6528 ;; This function is called by:
  6529 ;;		_WriteFlashValues
  6530 ;; This function uses a non-reentrant model
  6531 ;;
  6532                           
  6533                           	psect	text36
  6534  002AAE                     __ptext36:
  6535                           	opt stack 0
  6536  002AAE                     _FlashWriteWord:
  6537                           	opt stack 19
  6538                           
  6539                           ;peripherals.c: 149: unsigned char intStatusUC;
  6540                           ;peripherals.c: 151: intStatusUC = INTCONbits.GIE;
  6541                           
  6542                           ;incstack = 0
  6543  002AAE  0E00               	movlw	0
  6544  002AB0  BEF2               	btfsc	intcon,7,c	;volatile
  6545  002AB2  0E01               	movlw	1
  6546  002AB4  0100               	movlb	0	; () banked
  6547  002AB6  6F64               	movwf	FlashWriteWord@intStatusUC& (0+255),b
  6548                           
  6549                           ; BSR set to: 0
  6550                           ;peripherals.c: 152: INTCONbits.GIE = 0;
  6551  002AB8  9EF2               	bcf	intcon,7,c	;volatile
  6552                           
  6553                           ; BSR set to: 0
  6554                           ;peripherals.c: 154: TBLPTRU = 0;
  6555  002ABA  0E00               	movlw	0
  6556  002ABC  6EF8               	movwf	tblptru,c	;volatile
  6557                           
  6558                           ; BSR set to: 0
  6559                           ;peripherals.c: 155: TBLPTRH = flashAddressUS >> 8;
  6560  002ABE  0100               	movlb	0	; () banked
  6561  002AC0  5161               	movf	(FlashWriteWord@flashAddressUS+1)& (0+255),w,b
  6562  002AC2  6EF7               	movwf	tblptrh,c	;volatile
  6563                           
  6564                           ; BSR set to: 0
  6565                           ;peripherals.c: 156: TBLPTRL = flashAddressUS;
  6566  002AC4  C060  FFF6         	movff	FlashWriteWord@flashAddressUS,tblptrl	;volatile
  6567                           
  6568                           ; BSR set to: 0
  6569                           ;peripherals.c: 158: TABLAT = lsbUC;
  6570  002AC8  C062  FFF5         	movff	FlashWriteWord@lsbUC,tablat	;volatile
  6571  002ACC  000D               	tblwt		*+	;# 
  6572                           
  6573                           ;peripherals.c: 164: TABLAT = msbUC;
  6574  002ACE  C063  FFF5         	movff	FlashWriteWord@msbUC,tablat	;volatile
  6575  002AD2  000C               	tblwt		*	;# 
  6576                           
  6577                           ;peripherals.c: 170: EECON1bits.WPROG = 1;
  6578  002AD4  8AA6               	bsf	4006,5,c	;volatile
  6579                           
  6580                           ;peripherals.c: 171: EECON1bits.WREN = 1;
  6581  002AD6  84A6               	bsf	4006,2,c	;volatile
  6582                           
  6583                           ;peripherals.c: 172: FlashUnlockSequence();
  6584  002AD8  ECEF  F017         	call	_FlashUnlockSequence	;wreg free
  6585                           
  6586                           ;peripherals.c: 173: EECON1bits.WPROG = 0;
  6587  002ADC  9AA6               	bcf	4006,5,c	;volatile
  6588                           
  6589                           ;peripherals.c: 174: EECON1bits.WREN = 0;
  6590  002ADE  94A6               	bcf	4006,2,c	;volatile
  6591                           
  6592                           ;peripherals.c: 176: if(intStatusUC)
  6593  002AE0  0100               	movlb	0	; () banked
  6594  002AE2  5164               	movf	FlashWriteWord@intStatusUC& (0+255),w,b
  6595  002AE4  0100               	movlb	0	; () banked
  6596  002AE6  B4D8               	btfsc	status,2,c
  6597  002AE8  0012               	return	
  6598                           
  6599                           ; BSR set to: 0
  6600                           ;peripherals.c: 177: INTCONbits.GIE = 1;
  6601  002AEA  8EF2               	bsf	intcon,7,c	;volatile
  6602  002AEC  0012               	return	
  6603  002AEE                     __end_of_FlashWriteWord:
  6604                           	opt stack 0
  6605                           tblptru	equ	0xFF8
  6606                           tblptrh	equ	0xFF7
  6607                           tblptrl	equ	0xFF6
  6608                           tablat	equ	0xFF5
  6609                           prodh	equ	0xFF4
  6610                           prodl	equ	0xFF3
  6611                           intcon	equ	0xFF2
  6612                           postinc0	equ	0xFEE
  6613                           wreg	equ	0xFE8
  6614                           indf1	equ	0xFE7
  6615                           postinc1	equ	0xFE6
  6616                           postdec1	equ	0xFE5
  6617                           fsr1h	equ	0xFE2
  6618                           fsr1l	equ	0xFE1
  6619                           indf2	equ	0xFDF
  6620                           postinc2	equ	0xFDE
  6621                           postdec2	equ	0xFDD
  6622                           fsr2h	equ	0xFDA
  6623                           fsr2l	equ	0xFD9
  6624                           status	equ	0xFD8
  6625                           
  6626 ;; *************** function _FlashEraseBlock *****************
  6627 ;; Defined at:
  6628 ;;		line 123 in file "peripherals.c"
  6629 ;; Parameters:    Size  Location     Type
  6630 ;;  flashAddress    2    0[BANK0 ] unsigned short 
  6631 ;; Auto vars:     Size  Location     Type
  6632 ;;  intStatusUC     1    2[BANK0 ] unsigned char 
  6633 ;; Return value:  Size  Location     Type
  6634 ;;                  1    wreg      void 
  6635 ;; Registers used:
  6636 ;;		wreg, status,2, status,0, cstack
  6637 ;; Tracked objects:
  6638 ;;		On entry : 0/0
  6639 ;;		On exit  : 0/0
  6640 ;;		Unchanged: 0/0
  6641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6642 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6643 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6645 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6646 ;;Total ram usage:        3 bytes
  6647 ;; Hardware stack levels used:    1
  6648 ;; Hardware stack levels required when called:    8
  6649 ;; This function calls:
  6650 ;;		_FlashUnlockSequence
  6651 ;; This function is called by:
  6652 ;;		_WriteFlashValues
  6653 ;; This function uses a non-reentrant model
  6654 ;;
  6655                           
  6656                           	psect	text37
  6657  002C44                     __ptext37:
  6658                           	opt stack 0
  6659  002C44                     _FlashEraseBlock:
  6660                           	opt stack 19
  6661                           
  6662                           ;peripherals.c: 124: unsigned char intStatusUC;
  6663                           ;peripherals.c: 126: intStatusUC = INTCONbits.GIE;
  6664                           
  6665                           ; BSR set to: 0
  6666                           ;incstack = 0
  6667  002C44  0E00               	movlw	0
  6668  002C46  BEF2               	btfsc	intcon,7,c	;volatile
  6669  002C48  0E01               	movlw	1
  6670  002C4A  0100               	movlb	0	; () banked
  6671  002C4C  6F62               	movwf	FlashEraseBlock@intStatusUC& (0+255),b
  6672                           
  6673                           ; BSR set to: 0
  6674                           ;peripherals.c: 127: INTCONbits.GIE = 0;
  6675  002C4E  9EF2               	bcf	intcon,7,c	;volatile
  6676                           
  6677                           ; BSR set to: 0
  6678                           ;peripherals.c: 129: TBLPTRU = 0;
  6679  002C50  0E00               	movlw	0
  6680  002C52  6EF8               	movwf	tblptru,c	;volatile
  6681                           
  6682                           ; BSR set to: 0
  6683                           ;peripherals.c: 130: TBLPTRH = (flashAddressUS >> 8) & ~0b11;
  6684  002C54  0100               	movlb	0	; () banked
  6685  002C56  5161               	movf	(FlashEraseBlock@flashAddressUS+1)& (0+255),w,b
  6686  002C58  0BFC               	andlw	252
  6687  002C5A  6EF7               	movwf	tblptrh,c	;volatile
  6688                           
  6689                           ; BSR set to: 0
  6690                           ;peripherals.c: 131: TBLPTRU = 0;
  6691  002C5C  0E00               	movlw	0
  6692  002C5E  6EF8               	movwf	tblptru,c	;volatile
  6693                           
  6694                           ; BSR set to: 0
  6695                           ;peripherals.c: 133: EECON1bits.WREN = 1;
  6696  002C60  84A6               	bsf	4006,2,c	;volatile
  6697                           
  6698                           ; BSR set to: 0
  6699                           ;peripherals.c: 134: EECON1bits.FREE = 1;
  6700  002C62  88A6               	bsf	4006,4,c	;volatile
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;peripherals.c: 135: FlashUnlockSequence();
  6704  002C64  ECEF  F017         	call	_FlashUnlockSequence	;wreg free
  6705                           
  6706                           ;peripherals.c: 136: EECON1bits.WREN = 0;
  6707  002C68  94A6               	bcf	4006,2,c	;volatile
  6708                           
  6709                           ;peripherals.c: 138: if(intStatusUC)
  6710  002C6A  0100               	movlb	0	; () banked
  6711  002C6C  5162               	movf	FlashEraseBlock@intStatusUC& (0+255),w,b
  6712  002C6E  0100               	movlb	0	; () banked
  6713  002C70  B4D8               	btfsc	status,2,c
  6714  002C72  0012               	return	
  6715                           
  6716                           ; BSR set to: 0
  6717                           ;peripherals.c: 139: INTCONbits.GIE = 1;
  6718  002C74  8EF2               	bsf	intcon,7,c	;volatile
  6719  002C76  0012               	return	
  6720  002C78                     __end_of_FlashEraseBlock:
  6721                           	opt stack 0
  6722                           tblptru	equ	0xFF8
  6723                           tblptrh	equ	0xFF7
  6724                           tblptrl	equ	0xFF6
  6725                           tablat	equ	0xFF5
  6726                           prodh	equ	0xFF4
  6727                           prodl	equ	0xFF3
  6728                           intcon	equ	0xFF2
  6729                           postinc0	equ	0xFEE
  6730                           wreg	equ	0xFE8
  6731                           indf1	equ	0xFE7
  6732                           postinc1	equ	0xFE6
  6733                           postdec1	equ	0xFE5
  6734                           fsr1h	equ	0xFE2
  6735                           fsr1l	equ	0xFE1
  6736                           indf2	equ	0xFDF
  6737                           postinc2	equ	0xFDE
  6738                           postdec2	equ	0xFDD
  6739                           fsr2h	equ	0xFDA
  6740                           fsr2l	equ	0xFD9
  6741                           status	equ	0xFD8
  6742                           
  6743 ;; *************** function _FlashUnlockSequence *****************
  6744 ;; Defined at:
  6745 ;;		line 142 in file "peripherals.c"
  6746 ;; Parameters:    Size  Location     Type
  6747 ;;		None
  6748 ;; Auto vars:     Size  Location     Type
  6749 ;;		None
  6750 ;; Return value:  Size  Location     Type
  6751 ;;                  1    wreg      void 
  6752 ;; Registers used:
  6753 ;;		wreg, status,2
  6754 ;; Tracked objects:
  6755 ;;		On entry : 0/0
  6756 ;;		On exit  : 0/0
  6757 ;;		Unchanged: 0/0
  6758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6760 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6762 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6763 ;;Total ram usage:        0 bytes
  6764 ;; Hardware stack levels used:    1
  6765 ;; Hardware stack levels required when called:    7
  6766 ;; This function calls:
  6767 ;;		Nothing
  6768 ;; This function is called by:
  6769 ;;		_FlashEraseBlock
  6770 ;;		_FlashWriteWord
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774                           	psect	text38
  6775  002FDE                     __ptext38:
  6776                           	opt stack 0
  6777  002FDE                     _FlashUnlockSequence:
  6778                           	opt stack 19
  6779                           
  6780                           ;peripherals.c: 143: EECON2 = 0x55;
  6781                           
  6782                           ; BSR set to: 0
  6783                           ;incstack = 0
  6784  002FDE  0E55               	movlw	85
  6785  002FE0  6EA7               	movwf	4007,c	;volatile
  6786                           
  6787                           ;peripherals.c: 144: EECON2 = 0xAA;
  6788  002FE2  0EAA               	movlw	170
  6789  002FE4  6EA7               	movwf	4007,c	;volatile
  6790                           
  6791                           ;peripherals.c: 145: EECON1bits.WR = 1;
  6792  002FE6  82A6               	bsf	4006,1,c	;volatile
  6793  002FE8  0012               	return		;funcret
  6794  002FEA                     __end_of_FlashUnlockSequence:
  6795                           	opt stack 0
  6796                           tblptru	equ	0xFF8
  6797                           tblptrh	equ	0xFF7
  6798                           tblptrl	equ	0xFF6
  6799                           tablat	equ	0xFF5
  6800                           prodh	equ	0xFF4
  6801                           prodl	equ	0xFF3
  6802                           intcon	equ	0xFF2
  6803                           postinc0	equ	0xFEE
  6804                           wreg	equ	0xFE8
  6805                           indf1	equ	0xFE7
  6806                           postinc1	equ	0xFE6
  6807                           postdec1	equ	0xFE5
  6808                           fsr1h	equ	0xFE2
  6809                           fsr1l	equ	0xFE1
  6810                           indf2	equ	0xFDF
  6811                           postinc2	equ	0xFDE
  6812                           postdec2	equ	0xFDD
  6813                           fsr2h	equ	0xFDA
  6814                           fsr2l	equ	0xFD9
  6815                           status	equ	0xFD8
  6816                           
  6817 ;; *************** function _FlashReadAddress *****************
  6818 ;; Defined at:
  6819 ;;		line 110 in file "peripherals.c"
  6820 ;; Parameters:    Size  Location     Type
  6821 ;;  flashAddress    2    0[BANK0 ] unsigned short 
  6822 ;; Auto vars:     Size  Location     Type
  6823 ;;		None
  6824 ;; Return value:  Size  Location     Type
  6825 ;;                  1    wreg      unsigned char 
  6826 ;; Registers used:
  6827 ;;		wreg, status,2
  6828 ;; Tracked objects:
  6829 ;;		On entry : 0/0
  6830 ;;		On exit  : 0/0
  6831 ;;		Unchanged: 0/0
  6832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6833 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6834 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6836 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6837 ;;Total ram usage:        2 bytes
  6838 ;; Hardware stack levels used:    1
  6839 ;; Hardware stack levels required when called:    7
  6840 ;; This function calls:
  6841 ;;		Nothing
  6842 ;; This function is called by:
  6843 ;;		_ReadFlashValues
  6844 ;; This function uses a non-reentrant model
  6845 ;;
  6846                           
  6847                           	psect	text39
  6848  002F5E                     __ptext39:
  6849                           	opt stack 0
  6850  002F5E                     _FlashReadAddress:
  6851                           	opt stack 21
  6852                           
  6853                           ;peripherals.c: 112: TBLPTRU = 0;
  6854                           
  6855                           ;incstack = 0
  6856  002F5E  0E00               	movlw	0
  6857  002F60  6EF8               	movwf	tblptru,c	;volatile
  6858                           
  6859                           ;peripherals.c: 113: TBLPTRH = flashAddressUS >> 8;
  6860  002F62  0100               	movlb	0	; () banked
  6861  002F64  5161               	movf	(FlashReadAddress@flashAddressUS+1)& (0+255),w,b
  6862  002F66  6EF7               	movwf	tblptrh,c	;volatile
  6863                           
  6864                           ; BSR set to: 0
  6865                           ;peripherals.c: 114: TBLPTRL = flashAddressUS;
  6866  002F68  C060  FFF6         	movff	FlashReadAddress@flashAddressUS,tblptrl	;volatile
  6867  002F6C  0008               	tblrd		*	;# 
  6868                           
  6869                           ;peripherals.c: 120: return TABLAT;
  6870  002F6E  50F5               	movf	tablat,w,c	;volatile
  6871  002F70  0012               	return	
  6872  002F72                     __end_of_FlashReadAddress:
  6873                           	opt stack 0
  6874                           tblptru	equ	0xFF8
  6875                           tblptrh	equ	0xFF7
  6876                           tblptrl	equ	0xFF6
  6877                           tablat	equ	0xFF5
  6878                           prodh	equ	0xFF4
  6879                           prodl	equ	0xFF3
  6880                           intcon	equ	0xFF2
  6881                           postinc0	equ	0xFEE
  6882                           wreg	equ	0xFE8
  6883                           indf1	equ	0xFE7
  6884                           postinc1	equ	0xFE6
  6885                           postdec1	equ	0xFE5
  6886                           fsr1h	equ	0xFE2
  6887                           fsr1l	equ	0xFE1
  6888                           indf2	equ	0xFDF
  6889                           postinc2	equ	0xFDE
  6890                           postdec2	equ	0xFDD
  6891                           fsr2h	equ	0xFDA
  6892                           fsr2l	equ	0xFD9
  6893                           status	equ	0xFD8
  6894                           
  6895 ;; *************** function _ClearPacketNumbers *****************
  6896 ;; Defined at:
  6897 ;;		line 213 in file "mastercomms.c"
  6898 ;; Parameters:    Size  Location     Type
  6899 ;;		None
  6900 ;; Auto vars:     Size  Location     Type
  6901 ;;  iscCountUC      1    0[BANK0 ] unsigned char 
  6902 ;; Return value:  Size  Location     Type
  6903 ;;                  1    wreg      void 
  6904 ;; Registers used:
  6905 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6906 ;; Tracked objects:
  6907 ;;		On entry : 0/0
  6908 ;;		On exit  : 0/0
  6909 ;;		Unchanged: 0/0
  6910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  6911 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6912 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6914 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  6915 ;;Total ram usage:        1 bytes
  6916 ;; Hardware stack levels used:    1
  6917 ;; Hardware stack levels required when called:    7
  6918 ;; This function calls:
  6919 ;;		Nothing
  6920 ;; This function is called by:
  6921 ;;		_InitStates
  6922 ;;		_SavePacketNumber
  6923 ;; This function uses a non-reentrant model
  6924 ;;
  6925                           
  6926                           	psect	text40
  6927  002952                     __ptext40:
  6928                           	opt stack 0
  6929  002952                     _ClearPacketNumbers:
  6930                           	opt stack 20
  6931                           
  6932                           ;mastercomms.c: 214: unsigned char iscCountUC;
  6933                           ;mastercomms.c: 216: for(iscCountUC = 0; iscCountUC < 31; iscCountUC++){
  6934                           
  6935                           ;incstack = 0
  6936  002952  0E00               	movlw	0
  6937  002954  0100               	movlb	0	; () banked
  6938  002956  6F60               	movwf	ClearPacketNumbers@iscCountUC& (0+255),b
  6939  002958                     l3973:
  6940                           
  6941                           ; BSR set to: 0
  6942  002958  0E1E               	movlw	30
  6943  00295A  0100               	movlb	0	; () banked
  6944  00295C  6560               	cpfsgt	ClearPacketNumbers@iscCountUC& (0+255),b
  6945  00295E  D001               	goto	l3977
  6946  002960  0012               	return	
  6947  002962                     l3977:
  6948                           
  6949                           ; BSR set to: 0
  6950                           ;mastercomms.c: 217: packetNumbersUSAG[1][iscCountUC] = 0;
  6951  002962  0100               	movlb	0	; () banked
  6952  002964  5160               	movf	ClearPacketNumbers@iscCountUC& (0+255),w,b
  6953  002966  0D02               	mullw	2
  6954  002968  0E3E               	movlw	low (_packetNumbersUSAG+62)
  6955  00296A  24F3               	addwf	prodl,w,c
  6956  00296C  6ED9               	movwf	fsr2l,c
  6957  00296E  0E04               	movlw	high (_packetNumbersUSAG+62)
  6958  002970  20F4               	addwfc	prodh,w,c
  6959  002972  6EDA               	movwf	fsr2h,c
  6960  002974  0E00               	movlw	0
  6961  002976  6EDE               	movwf	postinc2,c
  6962  002978  0E00               	movlw	0
  6963  00297A  6EDD               	movwf	postdec2,c
  6964                           
  6965                           ;mastercomms.c: 218: packetNumbersUSAG[0][iscCountUC] = 0;
  6966  00297C  0100               	movlb	0	; () banked
  6967  00297E  5160               	movf	ClearPacketNumbers@iscCountUC& (0+255),w,b
  6968  002980  0D02               	mullw	2
  6969  002982  0E00               	movlw	low _packetNumbersUSAG
  6970  002984  24F3               	addwf	prodl,w,c
  6971  002986  6ED9               	movwf	fsr2l,c
  6972  002988  0E04               	movlw	high _packetNumbersUSAG
  6973  00298A  20F4               	addwfc	prodh,w,c
  6974  00298C  6EDA               	movwf	fsr2h,c
  6975  00298E  0E00               	movlw	0
  6976  002990  6EDE               	movwf	postinc2,c
  6977  002992  0E00               	movlw	0
  6978  002994  6EDD               	movwf	postdec2,c
  6979                           
  6980                           ; BSR set to: 0
  6981  002996  0100               	movlb	0	; () banked
  6982  002998  2B60               	incf	ClearPacketNumbers@iscCountUC& (0+255),f,b
  6983  00299A  D7DE               	goto	l3973
  6984  00299C                     __end_of_ClearPacketNumbers:
  6985                           	opt stack 0
  6986                           tblptru	equ	0xFF8
  6987                           tblptrh	equ	0xFF7
  6988                           tblptrl	equ	0xFF6
  6989                           tablat	equ	0xFF5
  6990                           prodh	equ	0xFF4
  6991                           prodl	equ	0xFF3
  6992                           intcon	equ	0xFF2
  6993                           postinc0	equ	0xFEE
  6994                           wreg	equ	0xFE8
  6995                           indf1	equ	0xFE7
  6996                           postinc1	equ	0xFE6
  6997                           postdec1	equ	0xFE5
  6998                           fsr1h	equ	0xFE2
  6999                           fsr1l	equ	0xFE1
  7000                           indf2	equ	0xFDF
  7001                           postinc2	equ	0xFDE
  7002                           postdec2	equ	0xFDD
  7003                           fsr2h	equ	0xFDA
  7004                           fsr2l	equ	0xFD9
  7005                           status	equ	0xFD8
  7006                           
  7007 ;; *************** function _InitST7540Wrapper *****************
  7008 ;; Defined at:
  7009 ;;		line 176 in file "main.c"
  7010 ;; Parameters:    Size  Location     Type
  7011 ;;		None
  7012 ;; Auto vars:     Size  Location     Type
  7013 ;;  initCountUC     1   25[BANK0 ] unsigned char 
  7014 ;; Return value:  Size  Location     Type
  7015 ;;                  1    wreg      void 
  7016 ;; Registers used:
  7017 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7018 ;; Tracked objects:
  7019 ;;		On entry : 0/0
  7020 ;;		On exit  : 0/0
  7021 ;;		Unchanged: 0/0
  7022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7023 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7024 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7025 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7026 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7027 ;;Total ram usage:        1 bytes
  7028 ;; Hardware stack levels used:    1
  7029 ;; Hardware stack levels required when called:   11
  7030 ;; This function calls:
  7031 ;;		_InitST7540
  7032 ;; This function is called by:
  7033 ;;		_main
  7034 ;; This function uses a non-reentrant model
  7035 ;;
  7036                           
  7037                           	psect	text41
  7038  002E0E                     __ptext41:
  7039                           	opt stack 0
  7040  002E0E                     _InitST7540Wrapper:
  7041                           	opt stack 19
  7042                           
  7043                           ;main.c: 177: unsigned char initCountUC;
  7044                           ;main.c: 179: for(initCountUC = 0; initCountUC < 5; initCountUC++){
  7045                           
  7046                           ; BSR set to: 0
  7047                           ;incstack = 0
  7048  002E0E  0E00               	movlw	0
  7049  002E10  0100               	movlb	0	; () banked
  7050  002E12  6F79               	movwf	InitST7540Wrapper@initCountUC& (0+255),b
  7051  002E14                     l5905:
  7052                           
  7053                           ; BSR set to: 0
  7054  002E14  0E04               	movlw	4
  7055  002E16  0100               	movlb	0	; () banked
  7056  002E18  6579               	cpfsgt	InitST7540Wrapper@initCountUC& (0+255),b
  7057  002E1A  D001               	goto	l5909
  7058  002E1C  0012               	return	
  7059  002E1E                     l5909:
  7060                           
  7061                           ; BSR set to: 0
  7062                           ;main.c: 180: if(InitST7540()){
  7063  002E1E  EC35  F00E         	call	_InitST7540	;wreg free
  7064  002E22  0900               	iorlw	0
  7065  002E24  B4D8               	btfsc	status,2,c
  7066  002E26  D002               	goto	l5913
  7067                           
  7068                           ;main.c: 182: statusFlagsUSLG |= 0b000000000000000000000010;
  7069  002E28  8236               	bsf	_statusFlagsUSLG,1,c	;volatile
  7070                           
  7071                           ;main.c: 183: break;
  7072  002E2A  0012               	return	
  7073  002E2C                     l5913:
  7074  002E2C  0100               	movlb	0	; () banked
  7075  002E2E  2B79               	incf	InitST7540Wrapper@initCountUC& (0+255),f,b
  7076  002E30  D7F1               	goto	l5905
  7077  002E32                     __end_of_InitST7540Wrapper:
  7078                           	opt stack 0
  7079                           tblptru	equ	0xFF8
  7080                           tblptrh	equ	0xFF7
  7081                           tblptrl	equ	0xFF6
  7082                           tablat	equ	0xFF5
  7083                           prodh	equ	0xFF4
  7084                           prodl	equ	0xFF3
  7085                           intcon	equ	0xFF2
  7086                           postinc0	equ	0xFEE
  7087                           wreg	equ	0xFE8
  7088                           indf1	equ	0xFE7
  7089                           postinc1	equ	0xFE6
  7090                           postdec1	equ	0xFE5
  7091                           fsr1h	equ	0xFE2
  7092                           fsr1l	equ	0xFE1
  7093                           indf2	equ	0xFDF
  7094                           postinc2	equ	0xFDE
  7095                           postdec2	equ	0xFDD
  7096                           fsr2h	equ	0xFDA
  7097                           fsr2l	equ	0xFD9
  7098                           status	equ	0xFD8
  7099                           
  7100 ;; *************** function _InitST7540 *****************
  7101 ;; Defined at:
  7102 ;;		line 88 in file "ST7540.c"
  7103 ;; Parameters:    Size  Location     Type
  7104 ;;		None
  7105 ;; Auto vars:     Size  Location     Type
  7106 ;;  configDataRX    3   22[BANK0 ] unsigned um
  7107 ;;  frameDataRXU    3   19[BANK0 ] unsigned um
  7108 ;;  configDataTX    3   16[BANK0 ] unsigned um
  7109 ;;  frameDataTXU    3   13[BANK0 ] unsigned um
  7110 ;; Return value:  Size  Location     Type
  7111 ;;                  1    wreg      unsigned char 
  7112 ;; Registers used:
  7113 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7114 ;; Tracked objects:
  7115 ;;		On entry : 0/0
  7116 ;;		On exit  : 0/0
  7117 ;;		Unchanged: 0/0
  7118 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7119 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7120 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7122 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7123 ;;Total ram usage:       12 bytes
  7124 ;; Hardware stack levels used:    1
  7125 ;; Hardware stack levels required when called:   10
  7126 ;; This function calls:
  7127 ;;		_InitST7540Pins
  7128 ;;		_ReadConfigST7540
  7129 ;;		_WriteConfigST7540
  7130 ;; This function is called by:
  7131 ;;		_InitST7540Wrapper
  7132 ;; This function uses a non-reentrant model
  7133 ;;
  7134                           
  7135                           	psect	text42
  7136  001C6A                     __ptext42:
  7137                           	opt stack 0
  7138  001C6A                     _InitST7540:
  7139                           	opt stack 19
  7140                           
  7141                           ;ST7540.c: 89: unsigned long short frameDataTXUS;
  7142                           ;ST7540.c: 90: unsigned long short frameDataRXUS = 0;
  7143                           
  7144                           ;incstack = 0
  7145  001C6A  0E00               	movlw	0
  7146  001C6C  0100               	movlb	0	; () banked
  7147  001C6E  6F73               	movwf	InitST7540@frameDataRXUS& (0+255),b
  7148  001C70  0E00               	movlw	0
  7149  001C72  0100               	movlb	0	; () banked
  7150  001C74  6F74               	movwf	(InitST7540@frameDataRXUS+1)& (0+255),b
  7151  001C76  0E00               	movlw	0
  7152  001C78  0100               	movlb	0	; () banked
  7153  001C7A  6F75               	movwf	(InitST7540@frameDataRXUS+2)& (0+255),b
  7154                           
  7155                           ;ST7540.c: 91: unsigned long short configDataTXUS;
  7156                           ;ST7540.c: 92: unsigned long short configDataRXUS = 0;
  7157  001C7C  0E00               	movlw	0
  7158  001C7E  0100               	movlb	0	; () banked
  7159  001C80  6F76               	movwf	InitST7540@configDataRXUS& (0+255),b
  7160  001C82  0E00               	movlw	0
  7161  001C84  0100               	movlb	0	; () banked
  7162  001C86  6F77               	movwf	(InitST7540@configDataRXUS+1)& (0+255),b
  7163  001C88  0E00               	movlw	0
  7164  001C8A  0100               	movlb	0	; () banked
  7165  001C8C  6F78               	movwf	(InitST7540@configDataRXUS+2)& (0+255),b
  7166                           
  7167                           ; BSR set to: 0
  7168                           ;ST7540.c: 94: InitST7540Pins();
  7169  001C8E  EC95  F015         	call	_InitST7540Pins	;wreg free
  7170                           
  7171                           ;ST7540.c: 96: frameDataTXUS = (unsigned long short) 0x9b58;
  7172  001C92  0E58               	movlw	88
  7173  001C94  0100               	movlb	0	; () banked
  7174  001C96  6F6D               	movwf	InitST7540@frameDataTXUS& (0+255),b
  7175  001C98  0E9B               	movlw	155
  7176  001C9A  0100               	movlb	0	; () banked
  7177  001C9C  6F6E               	movwf	(InitST7540@frameDataTXUS+1)& (0+255),b
  7178  001C9E  0E00               	movlw	0
  7179  001CA0  0100               	movlb	0	; () banked
  7180  001CA2  6F6F               	movwf	(InitST7540@frameDataTXUS+2)& (0+255),b
  7181                           
  7182                           ; BSR set to: 0
  7183                           ;ST7540.c: 97: configDataTXUS = 0b000000000000000000000110 |
  7184                           ;ST7540.c: 98: 0b000000000000000000010000 |
  7185                           ;ST7540.c: 99: 0b000000000000000000000000 |
  7186                           ;ST7540.c: 100: 0b000000000000000000000000 |
  7187                           ;ST7540.c: 101: 0b000000000000000010000000 |
  7188                           ;ST7540.c: 102: 0b000000000000001000000000 |
  7189                           ;ST7540.c: 103: 0b000000000001000000000000 |
  7190                           ;ST7540.c: 104: 0b000000000000000000000000 |
  7191                           ;ST7540.c: 105: 0b000000001000000000000000 |
  7192                           ;ST7540.c: 106: 0b000000100000000000000000 |
  7193                           ;ST7540.c: 107: 0b000001000000000000000000 |
  7194                           ;ST7540.c: 108: 0b000000000000000000000000 |
  7195  001CA4  0E96               	movlw	150
  7196  001CA6  0100               	movlb	0	; () banked
  7197  001CA8  6F70               	movwf	InitST7540@configDataTXUS& (0+255),b
  7198  001CAA  0E92               	movlw	146
  7199  001CAC  0100               	movlb	0	; () banked
  7200  001CAE  6F71               	movwf	(InitST7540@configDataTXUS+1)& (0+255),b
  7201  001CB0  0E76               	movlw	118
  7202  001CB2  0100               	movlb	0	; () banked
  7203  001CB4  6F72               	movwf	(InitST7540@configDataTXUS+2)& (0+255),b
  7204                           
  7205                           ; BSR set to: 0
  7206                           ;ST7540.c: 114: SSP2STATbits.SMP = 0;
  7207  001CB6  9E73               	bcf	3955,7,c	;volatile
  7208                           
  7209                           ; BSR set to: 0
  7210                           ;ST7540.c: 115: SSP2STATbits.CKE = 1;
  7211  001CB8  8C73               	bsf	3955,6,c	;volatile
  7212                           
  7213                           ; BSR set to: 0
  7214                           ;ST7540.c: 116: SSP2CON1bits.CKP = 0;
  7215  001CBA  9872               	bcf	3954,4,c	;volatile
  7216                           
  7217                           ; BSR set to: 0
  7218                           ;ST7540.c: 117: SSP2CON1bits.SSPM = 0b0100;
  7219  001CBC  5072               	movf	3954,w,c	;volatile
  7220  001CBE  0BF0               	andlw	-16
  7221  001CC0  0904               	iorlw	4
  7222  001CC2  6E72               	movwf	3954,c	;volatile
  7223                           
  7224                           ; BSR set to: 0
  7225                           ;ST7540.c: 127: WriteConfigST7540(frameDataTXUS, configDataTXUS);
  7226  001CC4  C06D  F062         	movff	InitST7540@frameDataTXUS,WriteConfigST7540@frameDataUS
  7227  001CC8  C06E  F063         	movff	InitST7540@frameDataTXUS+1,WriteConfigST7540@frameDataUS+1
  7228  001CCC  C06F  F064         	movff	InitST7540@frameDataTXUS+2,WriteConfigST7540@frameDataUS+2
  7229  001CD0  C070  F065         	movff	InitST7540@configDataTXUS,WriteConfigST7540@configDataUS
  7230  001CD4  C071  F066         	movff	InitST7540@configDataTXUS+1,WriteConfigST7540@configDataUS+1
  7231  001CD8  C072  F067         	movff	InitST7540@configDataTXUS+2,WriteConfigST7540@configDataUS+2
  7232  001CDC  EC65  F011         	call	_WriteConfigST7540	;wreg free
  7233                           
  7234                           ;ST7540.c: 128: WriteConfigST7540(frameDataTXUS, configDataTXUS);
  7235  001CE0  C06D  F062         	movff	InitST7540@frameDataTXUS,WriteConfigST7540@frameDataUS
  7236  001CE4  C06E  F063         	movff	InitST7540@frameDataTXUS+1,WriteConfigST7540@frameDataUS+1
  7237  001CE8  C06F  F064         	movff	InitST7540@frameDataTXUS+2,WriteConfigST7540@frameDataUS+2
  7238  001CEC  C070  F065         	movff	InitST7540@configDataTXUS,WriteConfigST7540@configDataUS
  7239  001CF0  C071  F066         	movff	InitST7540@configDataTXUS+1,WriteConfigST7540@configDataUS+1
  7240  001CF4  C072  F067         	movff	InitST7540@configDataTXUS+2,WriteConfigST7540@configDataUS+2
  7241  001CF8  EC65  F011         	call	_WriteConfigST7540	;wreg free
  7242                           
  7243                           ;ST7540.c: 129: ReadConfigST7540(&frameDataRXUS, &configDataRXUS);
  7244  001CFC  0E73               	movlw	low InitST7540@frameDataRXUS
  7245  001CFE  0100               	movlb	0	; () banked
  7246  001D00  6F60               	movwf	ReadConfigST7540@frameDataUS& (0+255),b
  7247  001D02  0E00               	movlw	high InitST7540@frameDataRXUS
  7248  001D04  0100               	movlb	0	; () banked
  7249  001D06  6F61               	movwf	(ReadConfigST7540@frameDataUS+1)& (0+255),b
  7250  001D08  0E76               	movlw	low InitST7540@configDataRXUS
  7251  001D0A  0100               	movlb	0	; () banked
  7252  001D0C  6F62               	movwf	ReadConfigST7540@configDataUS& (0+255),b
  7253  001D0E  0E00               	movlw	high InitST7540@configDataRXUS
  7254  001D10  0100               	movlb	0	; () banked
  7255  001D12  6F63               	movwf	(ReadConfigST7540@configDataUS+1)& (0+255),b
  7256  001D14  ECD6  F00A         	call	_ReadConfigST7540	;wreg free
  7257                           
  7258                           ;ST7540.c: 131: if((frameDataTXUS != frameDataRXUS) && (configDataTXUS != configDataRXUS
      +                          ))
  7259  001D18  0100               	movlb	0	; () banked
  7260  001D1A  5173               	movf	InitST7540@frameDataRXUS& (0+255),w,b
  7261  001D1C  0100               	movlb	0	; () banked
  7262  001D1E  196D               	xorwf	InitST7540@frameDataTXUS& (0+255),w,b
  7263  001D20  E10B               	bnz	u4190
  7264  001D22  0100               	movlb	0	; () banked
  7265  001D24  5174               	movf	(InitST7540@frameDataRXUS+1)& (0+255),w,b
  7266  001D26  0100               	movlb	0	; () banked
  7267  001D28  196E               	xorwf	(InitST7540@frameDataTXUS+1)& (0+255),w,b
  7268  001D2A  E106               	bnz	u4190
  7269  001D2C  0100               	movlb	0	; () banked
  7270  001D2E  5175               	movf	(InitST7540@frameDataRXUS+2)& (0+255),w,b
  7271  001D30  0100               	movlb	0	; () banked
  7272  001D32  196F               	xorwf	(InitST7540@frameDataTXUS+2)& (0+255),w,b
  7273  001D34  B4D8               	btfsc	status,2,c
  7274  001D36  D012               	goto	l81
  7275  001D38                     u4190:
  7276                           
  7277                           ; BSR set to: 0
  7278  001D38  0100               	movlb	0	; () banked
  7279  001D3A  5176               	movf	InitST7540@configDataRXUS& (0+255),w,b
  7280  001D3C  0100               	movlb	0	; () banked
  7281  001D3E  1970               	xorwf	InitST7540@configDataTXUS& (0+255),w,b
  7282  001D40  E10B               	bnz	u4200
  7283  001D42  0100               	movlb	0	; () banked
  7284  001D44  5177               	movf	(InitST7540@configDataRXUS+1)& (0+255),w,b
  7285  001D46  0100               	movlb	0	; () banked
  7286  001D48  1971               	xorwf	(InitST7540@configDataTXUS+1)& (0+255),w,b
  7287  001D4A  E106               	bnz	u4200
  7288  001D4C  0100               	movlb	0	; () banked
  7289  001D4E  5178               	movf	(InitST7540@configDataRXUS+2)& (0+255),w,b
  7290  001D50  0100               	movlb	0	; () banked
  7291  001D52  1972               	xorwf	(InitST7540@configDataTXUS+2)& (0+255),w,b
  7292  001D54  B4D8               	btfsc	status,2,c
  7293  001D56  D002               	goto	l81
  7294  001D58                     u4200:
  7295                           
  7296                           ; BSR set to: 0
  7297                           ;ST7540.c: 132: return 0;
  7298  001D58  0E00               	movlw	0
  7299                           
  7300                           ; BSR set to: 0
  7301  001D5A  0012               	return	
  7302  001D5C                     l81:
  7303                           
  7304                           ; BSR set to: 0
  7305                           ;ST7540.c: 134: PIR3bits.SSP2IF = 0;
  7306  001D5C  9EA4               	bcf	4004,7,c	;volatile
  7307                           
  7308                           ;ST7540.c: 135: PIE3bits.SSP2IE = 1;
  7309  001D5E  8EA3               	bsf	4003,7,c	;volatile
  7310                           
  7311                           ;ST7540.c: 136: INTCONbits.PEIE = 1;
  7312  001D60  8CF2               	bsf	intcon,6,c	;volatile
  7313                           
  7314                           ; BSR set to: 0
  7315                           ;ST7540.c: 138: return 1;
  7316  001D62  0E01               	movlw	1
  7317  001D64  0012               	return	
  7318  001D66                     __end_of_InitST7540:
  7319                           	opt stack 0
  7320                           tblptru	equ	0xFF8
  7321                           tblptrh	equ	0xFF7
  7322                           tblptrl	equ	0xFF6
  7323                           tablat	equ	0xFF5
  7324                           prodh	equ	0xFF4
  7325                           prodl	equ	0xFF3
  7326                           intcon	equ	0xFF2
  7327                           postinc0	equ	0xFEE
  7328                           wreg	equ	0xFE8
  7329                           indf1	equ	0xFE7
  7330                           postinc1	equ	0xFE6
  7331                           postdec1	equ	0xFE5
  7332                           fsr1h	equ	0xFE2
  7333                           fsr1l	equ	0xFE1
  7334                           indf2	equ	0xFDF
  7335                           postinc2	equ	0xFDE
  7336                           postdec2	equ	0xFDD
  7337                           fsr2h	equ	0xFDA
  7338                           fsr2l	equ	0xFD9
  7339                           status	equ	0xFD8
  7340                           
  7341 ;; *************** function _WriteConfigST7540 *****************
  7342 ;; Defined at:
  7343 ;;		line 141 in file "ST7540.c"
  7344 ;; Parameters:    Size  Location     Type
  7345 ;;  frameDataUS     3    2[BANK0 ] unsigned um
  7346 ;;  configDataUS    3    5[BANK0 ] unsigned um
  7347 ;; Auto vars:     Size  Location     Type
  7348 ;;  bitsSentUC      1   12[BANK0 ] unsigned char 
  7349 ;;  discardUC       1   11[BANK0 ] unsigned char 
  7350 ;; Return value:  Size  Location     Type
  7351 ;;                  1    wreg      void 
  7352 ;; Registers used:
  7353 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7354 ;; Tracked objects:
  7355 ;;		On entry : 0/0
  7356 ;;		On exit  : 0/0
  7357 ;;		Unchanged: 0/0
  7358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7359 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7360 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7361 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7362 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7363 ;;Total ram usage:       11 bytes
  7364 ;; Hardware stack levels used:    1
  7365 ;; Hardware stack levels required when called:    9
  7366 ;; This function calls:
  7367 ;;		_WaitTickCount
  7368 ;; This function is called by:
  7369 ;;		_InitST7540
  7370 ;; This function uses a non-reentrant model
  7371 ;;
  7372                           
  7373                           	psect	text43
  7374  0022CA                     __ptext43:
  7375                           	opt stack 0
  7376  0022CA                     _WriteConfigST7540:
  7377                           	opt stack 19
  7378                           
  7379                           ;ST7540.c: 142: unsigned char discardUC;
  7380                           ;ST7540.c: 143: unsigned char bitsSentUC;
  7381                           ;ST7540.c: 145: bufferTXST7540UCAG[0] = (frameDataUS & 0b111111110000000000000000) >> 16
      +                          ;
  7382                           
  7383                           ; BSR set to: 0
  7384                           ;incstack = 0
  7385  0022CA  C064  F200         	movff	WriteConfigST7540@frameDataUS+2,_bufferTXST7540UCAG
  7386                           
  7387                           ;ST7540.c: 146: bufferTXST7540UCAG[1] = (frameDataUS & 0b000000001111111100000000) >> 8;
  7388  0022CE  C062  F068         	movff	WriteConfigST7540@frameDataUS,??_WriteConfigST7540
  7389  0022D2  C063  F069         	movff	WriteConfigST7540@frameDataUS+1,??_WriteConfigST7540+1
  7390  0022D6  C064  F06A         	movff	WriteConfigST7540@frameDataUS+2,??_WriteConfigST7540+2
  7391  0022DA  C069  F068         	movff	??_WriteConfigST7540+1,??_WriteConfigST7540
  7392  0022DE  C06A  F069         	movff	??_WriteConfigST7540+2,??_WriteConfigST7540+1
  7393  0022E2  0100               	movlb	0	; () banked
  7394  0022E4  6B6A               	clrf	(??_WriteConfigST7540+2)& (0+255),b
  7395  0022E6  0100               	movlb	0	; () banked
  7396  0022E8  5168               	movf	??_WriteConfigST7540& (0+255),w,b
  7397  0022EA  0102               	movlb	2	; () banked
  7398  0022EC  6F01               	movwf	(_bufferTXST7540UCAG+1)& (0+255),b
  7399                           
  7400                           ; BSR set to: 2
  7401                           ;ST7540.c: 147: bufferTXST7540UCAG[2] = frameDataUS & 0b000000000000000011111111;
  7402  0022EE  C062  F202         	movff	WriteConfigST7540@frameDataUS,_bufferTXST7540UCAG+2
  7403                           
  7404                           ; BSR set to: 2
  7405                           ;ST7540.c: 148: bufferTXST7540UCAG[3] = (configDataUS & 0b111111110000000000000000) >> 1
      +                          6;
  7406  0022F2  C067  F203         	movff	WriteConfigST7540@configDataUS+2,_bufferTXST7540UCAG+3
  7407                           
  7408                           ;ST7540.c: 149: bufferTXST7540UCAG[4] = (configDataUS & 0b000000001111111100000000) >> 8
      +                          ;
  7409  0022F6  C065  F068         	movff	WriteConfigST7540@configDataUS,??_WriteConfigST7540
  7410  0022FA  C066  F069         	movff	WriteConfigST7540@configDataUS+1,??_WriteConfigST7540+1
  7411  0022FE  C067  F06A         	movff	WriteConfigST7540@configDataUS+2,??_WriteConfigST7540+2
  7412  002302  C069  F068         	movff	??_WriteConfigST7540+1,??_WriteConfigST7540
  7413  002306  C06A  F069         	movff	??_WriteConfigST7540+2,??_WriteConfigST7540+1
  7414  00230A  0100               	movlb	0	; () banked
  7415  00230C  6B6A               	clrf	(??_WriteConfigST7540+2)& (0+255),b
  7416  00230E  0100               	movlb	0	; () banked
  7417  002310  5168               	movf	??_WriteConfigST7540& (0+255),w,b
  7418  002312  0102               	movlb	2	; () banked
  7419  002314  6F04               	movwf	(_bufferTXST7540UCAG+4)& (0+255),b
  7420                           
  7421                           ; BSR set to: 2
  7422                           ;ST7540.c: 150: bufferTXST7540UCAG[5] = configDataUS & 0b000000000000000011111111;
  7423  002316  C065  F205         	movff	WriteConfigST7540@configDataUS,_bufferTXST7540UCAG+5
  7424                           
  7425                           ; BSR set to: 2
  7426                           ;ST7540.c: 152: LATDbits.LATD2 = 1;
  7427  00231A  848C               	bsf	3980,2,c	;volatile
  7428                           
  7429                           ; BSR set to: 2
  7430                           ;ST7540.c: 153: LATCbits.LATC3 = 0;
  7431  00231C  968B               	bcf	3979,3,c	;volatile
  7432  00231E                     l85:
  7433  00231E  BA83               	btfsc	3971,5,c	;volatile
  7434  002320  D7FE               	goto	l85
  7435                           
  7436                           ;ST7540.c: 155: SSP2CON1bits.SSPEN = 1;
  7437  002322  8A72               	bsf	3954,5,c	;volatile
  7438                           
  7439                           ;ST7540.c: 157: for(bitsSentUC = 0; bitsSentUC < 6; bitsSentUC++){
  7440  002324  0E00               	movlw	0
  7441  002326  0100               	movlb	0	; () banked
  7442  002328  6F6C               	movwf	WriteConfigST7540@bitsSentUC& (0+255),b
  7443  00232A                     l4369:
  7444                           
  7445                           ; BSR set to: 0
  7446  00232A  0E05               	movlw	5
  7447  00232C  0100               	movlb	0	; () banked
  7448  00232E  656C               	cpfsgt	WriteConfigST7540@bitsSentUC& (0+255),b
  7449  002330  D001               	goto	l88
  7450  002332  D012               	goto	l89
  7451  002334                     l88:
  7452                           
  7453                           ; BSR set to: 0
  7454                           ;ST7540.c: 158: discardUC = SSP2BUF;
  7455  002334  CF75 F06B          	movff	3957,WriteConfigST7540@discardUC	;volatile
  7456                           
  7457                           ; BSR set to: 0
  7458                           ;ST7540.c: 159: SSP2BUF = bufferTXST7540UCAG[bitsSentUC];
  7459  002338  0100               	movlb	0	; () banked
  7460  00233A  516C               	movf	WriteConfigST7540@bitsSentUC& (0+255),w,b
  7461  00233C  0D01               	mullw	1
  7462  00233E  0E00               	movlw	low _bufferTXST7540UCAG
  7463  002340  24F3               	addwf	prodl,w,c
  7464  002342  6ED9               	movwf	fsr2l,c
  7465  002344  0E02               	movlw	high _bufferTXST7540UCAG
  7466  002346  20F4               	addwfc	prodh,w,c
  7467  002348  6EDA               	movwf	fsr2h,c
  7468  00234A  50DF               	movf	indf2,w,c
  7469  00234C  6E75               	movwf	3957,c	;volatile
  7470  00234E                     l90:
  7471  00234E  A073               	btfss	3955,0,c	;volatile
  7472  002350  D7FE               	goto	l90
  7473  002352  0100               	movlb	0	; () banked
  7474  002354  2B6C               	incf	WriteConfigST7540@bitsSentUC& (0+255),f,b
  7475  002356  D7E9               	goto	l4369
  7476  002358                     l89:
  7477                           
  7478                           ; BSR set to: 0
  7479                           ;ST7540.c: 161: }
  7480                           ;ST7540.c: 163: LATDbits.LATD2 = 0;
  7481  002358  948C               	bcf	3980,2,c	;volatile
  7482                           
  7483                           ;ST7540.c: 164: LATCbits.LATC3 = 1;
  7484  00235A  868B               	bsf	3979,3,c	;volatile
  7485                           
  7486                           ;ST7540.c: 165: SSP2CON1bits.SSPEN = 0;
  7487  00235C  9A72               	bcf	3954,5,c	;volatile
  7488                           
  7489                           ; BSR set to: 0
  7490                           ;ST7540.c: 166: WaitTickCount(20);
  7491  00235E  0E00               	movlw	0
  7492  002360  0100               	movlb	0	; () banked
  7493  002362  6F61               	movwf	(WaitTickCount@tickCountUS+1)& (0+255),b
  7494  002364  0E14               	movlw	20
  7495  002366  6F60               	movwf	WaitTickCount@tickCountUS& (0+255),b
  7496  002368  EC48  F017         	call	_WaitTickCount	;wreg free
  7497  00236C  0012               	return		;funcret
  7498  00236E                     __end_of_WriteConfigST7540:
  7499                           	opt stack 0
  7500                           tblptru	equ	0xFF8
  7501                           tblptrh	equ	0xFF7
  7502                           tblptrl	equ	0xFF6
  7503                           tablat	equ	0xFF5
  7504                           prodh	equ	0xFF4
  7505                           prodl	equ	0xFF3
  7506                           intcon	equ	0xFF2
  7507                           postinc0	equ	0xFEE
  7508                           wreg	equ	0xFE8
  7509                           indf1	equ	0xFE7
  7510                           postinc1	equ	0xFE6
  7511                           postdec1	equ	0xFE5
  7512                           fsr1h	equ	0xFE2
  7513                           fsr1l	equ	0xFE1
  7514                           indf2	equ	0xFDF
  7515                           postinc2	equ	0xFDE
  7516                           postdec2	equ	0xFDD
  7517                           fsr2h	equ	0xFDA
  7518                           fsr2l	equ	0xFD9
  7519                           status	equ	0xFD8
  7520                           
  7521 ;; *************** function _WaitTickCount *****************
  7522 ;; Defined at:
  7523 ;;		line 23 in file "peripherals.c"
  7524 ;; Parameters:    Size  Location     Type
  7525 ;;  tickCountUS     2    0[BANK0 ] unsigned short 
  7526 ;; Auto vars:     Size  Location     Type
  7527 ;;		None
  7528 ;; Return value:  Size  Location     Type
  7529 ;;                  1    wreg      void 
  7530 ;; Registers used:
  7531 ;;		wreg, status,2, status,0, cstack
  7532 ;; Tracked objects:
  7533 ;;		On entry : 0/0
  7534 ;;		On exit  : 0/0
  7535 ;;		Unchanged: 0/0
  7536 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7537 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7538 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7540 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7541 ;;Total ram usage:        2 bytes
  7542 ;; Hardware stack levels used:    1
  7543 ;; Hardware stack levels required when called:    8
  7544 ;; This function calls:
  7545 ;;		_WaitNewTick
  7546 ;; This function is called by:
  7547 ;;		_WriteConfigST7540
  7548 ;;		_CollisionCheck
  7549 ;; This function uses a non-reentrant model
  7550 ;;
  7551                           
  7552                           	psect	text44
  7553  002E90                     __ptext44:
  7554                           	opt stack 0
  7555  002E90                     _WaitTickCount:
  7556                           	opt stack 18
  7557                           
  7558                           ;peripherals.c: 24: while(tickCountUS--)
  7559                           
  7560                           ;incstack = 0
  7561  002E90  D002               	goto	l3911
  7562  002E92                     l3909:
  7563                           
  7564                           ;peripherals.c: 25: WaitNewTick();
  7565  002E92  EC01  F018         	call	_WaitNewTick	;wreg free
  7566  002E96                     l3911:
  7567  002E96  0100               	movlb	0	; () banked
  7568  002E98  0760               	decf	WaitTickCount@tickCountUS& (0+255),f,b
  7569  002E9A  A0D8               	btfss	status,0,c
  7570  002E9C  0761               	decf	(WaitTickCount@tickCountUS+1)& (0+255),f,b
  7571  002E9E  0100               	movlb	0	; () banked
  7572  002EA0  2960               	incf	WaitTickCount@tickCountUS& (0+255),w,b
  7573  002EA2  E1F7               	bnz	l3909
  7574  002EA4  0100               	movlb	0	; () banked
  7575  002EA6  2961               	incf	(WaitTickCount@tickCountUS+1)& (0+255),w,b
  7576  002EA8  B4D8               	btfsc	status,2,c
  7577  002EAA  0012               	return	
  7578  002EAC  D7F2               	goto	l3909
  7579  002EAE                     __end_of_WaitTickCount:
  7580                           	opt stack 0
  7581                           tblptru	equ	0xFF8
  7582                           tblptrh	equ	0xFF7
  7583                           tblptrl	equ	0xFF6
  7584                           tablat	equ	0xFF5
  7585                           prodh	equ	0xFF4
  7586                           prodl	equ	0xFF3
  7587                           intcon	equ	0xFF2
  7588                           postinc0	equ	0xFEE
  7589                           wreg	equ	0xFE8
  7590                           indf1	equ	0xFE7
  7591                           postinc1	equ	0xFE6
  7592                           postdec1	equ	0xFE5
  7593                           fsr1h	equ	0xFE2
  7594                           fsr1l	equ	0xFE1
  7595                           indf2	equ	0xFDF
  7596                           postinc2	equ	0xFDE
  7597                           postdec2	equ	0xFDD
  7598                           fsr2h	equ	0xFDA
  7599                           fsr2l	equ	0xFD9
  7600                           status	equ	0xFD8
  7601                           
  7602 ;; *************** function _WaitNewTick *****************
  7603 ;; Defined at:
  7604 ;;		line 18 in file "peripherals.c"
  7605 ;; Parameters:    Size  Location     Type
  7606 ;;		None
  7607 ;; Auto vars:     Size  Location     Type
  7608 ;;		None
  7609 ;; Return value:  Size  Location     Type
  7610 ;;                  1    wreg      void 
  7611 ;; Registers used:
  7612 ;;		status,2, status,0
  7613 ;; Tracked objects:
  7614 ;;		On entry : 0/0
  7615 ;;		On exit  : 0/0
  7616 ;;		Unchanged: 0/0
  7617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7622 ;;Total ram usage:        0 bytes
  7623 ;; Hardware stack levels used:    1
  7624 ;; Hardware stack levels required when called:    7
  7625 ;; This function calls:
  7626 ;;		Nothing
  7627 ;; This function is called by:
  7628 ;;		_WaitTickCount
  7629 ;; This function uses a non-reentrant model
  7630 ;;
  7631                           
  7632                           	psect	text45
  7633  003002                     __ptext45:
  7634                           	opt stack 0
  7635  003002                     _WaitNewTick:
  7636                           	opt stack 18
  7637  003002                     l990:
  7638  003002  A036               	btfss	_statusFlagsUSLG,0,c	;volatile
  7639  003004  D7FE               	goto	l990
  7640                           
  7641                           ;peripherals.c: 20: statusFlagsUSLG &= ~0b000000000000000000000001;
  7642  003006  9036               	bcf	_statusFlagsUSLG,0,c	;volatile
  7643  003008  0012               	return		;funcret
  7644  00300A                     __end_of_WaitNewTick:
  7645                           	opt stack 0
  7646                           tblptru	equ	0xFF8
  7647                           tblptrh	equ	0xFF7
  7648                           tblptrl	equ	0xFF6
  7649                           tablat	equ	0xFF5
  7650                           prodh	equ	0xFF4
  7651                           prodl	equ	0xFF3
  7652                           intcon	equ	0xFF2
  7653                           postinc0	equ	0xFEE
  7654                           wreg	equ	0xFE8
  7655                           indf1	equ	0xFE7
  7656                           postinc1	equ	0xFE6
  7657                           postdec1	equ	0xFE5
  7658                           fsr1h	equ	0xFE2
  7659                           fsr1l	equ	0xFE1
  7660                           indf2	equ	0xFDF
  7661                           postinc2	equ	0xFDE
  7662                           postdec2	equ	0xFDD
  7663                           fsr2h	equ	0xFDA
  7664                           fsr2l	equ	0xFD9
  7665                           status	equ	0xFD8
  7666                           
  7667 ;; *************** function _ReadConfigST7540 *****************
  7668 ;; Defined at:
  7669 ;;		line 169 in file "ST7540.c"
  7670 ;; Parameters:    Size  Location     Type
  7671 ;;  frameDataUS     2    0[BANK0 ] PTR unsigned um
  7672 ;;		 -> InitST7540@frameDataRXUS(3), 
  7673 ;;  configDataUS    2    2[BANK0 ] PTR unsigned um
  7674 ;;		 -> InitST7540@configDataRXUS(3), 
  7675 ;; Auto vars:     Size  Location     Type
  7676 ;;  bitsReceived    1    8[BANK0 ] unsigned char 
  7677 ;;  discardUC       1    7[BANK0 ] unsigned char 
  7678 ;; Return value:  Size  Location     Type
  7679 ;;                  1    wreg      void 
  7680 ;; Registers used:
  7681 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7682 ;; Tracked objects:
  7683 ;;		On entry : 0/0
  7684 ;;		On exit  : 0/0
  7685 ;;		Unchanged: 0/0
  7686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7687 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7688 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7689 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7690 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7691 ;;Total ram usage:        9 bytes
  7692 ;; Hardware stack levels used:    1
  7693 ;; Hardware stack levels required when called:    7
  7694 ;; This function calls:
  7695 ;;		Nothing
  7696 ;; This function is called by:
  7697 ;;		_InitST7540
  7698 ;; This function uses a non-reentrant model
  7699 ;;
  7700                           
  7701                           	psect	text46
  7702  0015AC                     __ptext46:
  7703                           	opt stack 0
  7704  0015AC                     _ReadConfigST7540:
  7705                           	opt stack 21
  7706                           
  7707                           ;ST7540.c: 170: unsigned char bitsReceivedUC;
  7708                           ;ST7540.c: 171: unsigned char discardUC;
  7709                           ;ST7540.c: 173: LATDbits.LATD2 = 1;
  7710                           
  7711                           ;incstack = 0
  7712  0015AC  848C               	bsf	3980,2,c	;volatile
  7713                           
  7714                           ;ST7540.c: 174: LATCbits.LATC3 = 1;
  7715  0015AE  868B               	bsf	3979,3,c	;volatile
  7716  0015B0                     l96:
  7717  0015B0  BA83               	btfsc	3971,5,c	;volatile
  7718  0015B2  D7FE               	goto	l96
  7719                           
  7720                           ;ST7540.c: 176: SSP2CON1bits.SSPEN = 1;
  7721  0015B4  8A72               	bsf	3954,5,c	;volatile
  7722                           
  7723                           ;ST7540.c: 178: discardUC = SSP2BUF;
  7724  0015B6  CF75 F067          	movff	3957,ReadConfigST7540@discardUC	;volatile
  7725                           
  7726                           ;ST7540.c: 179: SSP2BUF = 0;
  7727  0015BA  0E00               	movlw	0
  7728  0015BC  6E75               	movwf	3957,c	;volatile
  7729                           
  7730                           ;ST7540.c: 180: for(bitsReceivedUC = 0; bitsReceivedUC < 6; bitsReceivedUC++){
  7731  0015BE  0E00               	movlw	0
  7732  0015C0  0100               	movlb	0	; () banked
  7733  0015C2  6F68               	movwf	ReadConfigST7540@bitsReceivedUC& (0+255),b
  7734  0015C4                     l4385:
  7735                           
  7736                           ; BSR set to: 0
  7737  0015C4  0E05               	movlw	5
  7738  0015C6  0100               	movlb	0	; () banked
  7739  0015C8  6568               	cpfsgt	ReadConfigST7540@bitsReceivedUC& (0+255),b
  7740  0015CA  D001               	goto	l101
  7741  0015CC  D012               	goto	l100
  7742  0015CE                     l101:
  7743  0015CE  A073               	btfss	3955,0,c	;volatile
  7744  0015D0  D7FE               	goto	l101
  7745                           
  7746                           ;ST7540.c: 182: bufferRXST7540UCAG[bitsReceivedUC] = SSP2BUF;
  7747  0015D2  0100               	movlb	0	; () banked
  7748  0015D4  5168               	movf	ReadConfigST7540@bitsReceivedUC& (0+255),w,b
  7749  0015D6  0D01               	mullw	1
  7750  0015D8  0E4F               	movlw	low _bufferRXST7540UCAG
  7751  0015DA  24F3               	addwf	prodl,w,c
  7752  0015DC  6ED9               	movwf	fsr2l,c
  7753  0015DE  0E02               	movlw	high _bufferRXST7540UCAG
  7754  0015E0  20F4               	addwfc	prodh,w,c
  7755  0015E2  6EDA               	movwf	fsr2h,c
  7756  0015E4  CF75 FFDF          	movff	3957,indf2	;volatile
  7757                           
  7758                           ; BSR set to: 0
  7759                           ;ST7540.c: 183: SSP2BUF = 0;
  7760  0015E8  0E00               	movlw	0
  7761  0015EA  6E75               	movwf	3957,c	;volatile
  7762                           
  7763                           ; BSR set to: 0
  7764  0015EC  0100               	movlb	0	; () banked
  7765  0015EE  2B68               	incf	ReadConfigST7540@bitsReceivedUC& (0+255),f,b
  7766  0015F0  D7E9               	goto	l4385
  7767  0015F2                     l100:
  7768                           
  7769                           ; BSR set to: 0
  7770                           ;ST7540.c: 184: }
  7771                           ;ST7540.c: 186: LATDbits.LATD2 = 0;
  7772  0015F2  948C               	bcf	3980,2,c	;volatile
  7773                           
  7774                           ;ST7540.c: 187: SSP2CON1bits.SSPEN = 0;
  7775  0015F4  9A72               	bcf	3954,5,c	;volatile
  7776                           
  7777                           ; BSR set to: 0
  7778                           ;ST7540.c: 189: *frameDataUS = 0;
  7779  0015F6  C060  FFD9         	movff	ReadConfigST7540@frameDataUS,fsr2l
  7780  0015FA  C061  FFDA         	movff	ReadConfigST7540@frameDataUS+1,fsr2h
  7781  0015FE  0E00               	movlw	0
  7782  001600  6EDE               	movwf	postinc2,c
  7783  001602  0E00               	movlw	0
  7784  001604  6EDE               	movwf	postinc2,c
  7785  001606  0E00               	movlw	0
  7786  001608  6EDE               	movwf	postinc2,c
  7787                           
  7788                           ;ST7540.c: 190: *configDataUS = 0;
  7789  00160A  C062  FFD9         	movff	ReadConfigST7540@configDataUS,fsr2l
  7790  00160E  C063  FFDA         	movff	ReadConfigST7540@configDataUS+1,fsr2h
  7791  001612  0E00               	movlw	0
  7792  001614  6EDE               	movwf	postinc2,c
  7793  001616  0E00               	movlw	0
  7794  001618  6EDE               	movwf	postinc2,c
  7795  00161A  0E00               	movlw	0
  7796  00161C  6EDE               	movwf	postinc2,c
  7797                           
  7798                           ;ST7540.c: 192: *frameDataUS |= ((unsigned long short) bufferRXST7540UCAG[0] << 16);
  7799  00161E  0102               	movlb	2	; () banked
  7800  001620  514F               	movf	_bufferRXST7540UCAG& (0+255),w,b
  7801  001622  0100               	movlb	0	; () banked
  7802  001624  6F66               	movwf	(??_ReadConfigST7540+2)& (0+255),b
  7803  001626  6B65               	clrf	(??_ReadConfigST7540+1)& (0+255),b
  7804  001628  6B64               	clrf	??_ReadConfigST7540& (0+255),b
  7805  00162A  C060  FFD9         	movff	ReadConfigST7540@frameDataUS,fsr2l
  7806  00162E  C061  FFDA         	movff	ReadConfigST7540@frameDataUS+1,fsr2h
  7807  001632  0100               	movlb	0	; () banked
  7808  001634  5164               	movf	??_ReadConfigST7540& (0+255),w,b
  7809  001636  12DE               	iorwf	postinc2,f,c
  7810  001638  5165               	movf	(??_ReadConfigST7540+1)& (0+255),w,b
  7811  00163A  12DE               	iorwf	postinc2,f,c
  7812  00163C  5166               	movf	(??_ReadConfigST7540+2)& (0+255),w,b
  7813  00163E  12DE               	iorwf	postinc2,f,c
  7814                           
  7815                           ; BSR set to: 0
  7816                           ;ST7540.c: 193: *frameDataUS |= ((unsigned long short) bufferRXST7540UCAG[1] << 8);
  7817  001640  0102               	movlb	2	; () banked
  7818  001642  5150               	movf	(_bufferRXST7540UCAG+1)& (0+255),w,b
  7819  001644  0100               	movlb	0	; () banked
  7820  001646  6F64               	movwf	??_ReadConfigST7540& (0+255),b
  7821  001648  6B65               	clrf	(??_ReadConfigST7540+1)& (0+255),b
  7822  00164A  6B66               	clrf	(??_ReadConfigST7540+2)& (0+255),b
  7823  00164C  C065  F066         	movff	??_ReadConfigST7540+1,??_ReadConfigST7540+2
  7824  001650  C064  F065         	movff	??_ReadConfigST7540,??_ReadConfigST7540+1
  7825  001654  0100               	movlb	0	; () banked
  7826  001656  6B64               	clrf	??_ReadConfigST7540& (0+255),b
  7827  001658  C060  FFD9         	movff	ReadConfigST7540@frameDataUS,fsr2l
  7828  00165C  C061  FFDA         	movff	ReadConfigST7540@frameDataUS+1,fsr2h
  7829  001660  0100               	movlb	0	; () banked
  7830  001662  5164               	movf	??_ReadConfigST7540& (0+255),w,b
  7831  001664  12DE               	iorwf	postinc2,f,c
  7832  001666  5165               	movf	(??_ReadConfigST7540+1)& (0+255),w,b
  7833  001668  12DE               	iorwf	postinc2,f,c
  7834  00166A  5166               	movf	(??_ReadConfigST7540+2)& (0+255),w,b
  7835  00166C  12DE               	iorwf	postinc2,f,c
  7836                           
  7837                           ; BSR set to: 0
  7838                           ;ST7540.c: 194: *frameDataUS |= bufferRXST7540UCAG[2];
  7839  00166E  0102               	movlb	2	; () banked
  7840  001670  5151               	movf	(_bufferRXST7540UCAG+2)& (0+255),w,b
  7841  001672  0100               	movlb	0	; () banked
  7842  001674  6F64               	movwf	??_ReadConfigST7540& (0+255),b
  7843  001676  6B65               	clrf	(??_ReadConfigST7540+1)& (0+255),b
  7844  001678  6B66               	clrf	(??_ReadConfigST7540+2)& (0+255),b
  7845  00167A  C060  FFD9         	movff	ReadConfigST7540@frameDataUS,fsr2l
  7846  00167E  C061  FFDA         	movff	ReadConfigST7540@frameDataUS+1,fsr2h
  7847  001682  0100               	movlb	0	; () banked
  7848  001684  5164               	movf	??_ReadConfigST7540& (0+255),w,b
  7849  001686  12DE               	iorwf	postinc2,f,c
  7850  001688  5165               	movf	(??_ReadConfigST7540+1)& (0+255),w,b
  7851  00168A  12DE               	iorwf	postinc2,f,c
  7852  00168C  5166               	movf	(??_ReadConfigST7540+2)& (0+255),w,b
  7853  00168E  12DE               	iorwf	postinc2,f,c
  7854                           
  7855                           ;ST7540.c: 195: *configDataUS |= ((unsigned long short) bufferRXST7540UCAG[3] << 16);
  7856  001690  0102               	movlb	2	; () banked
  7857  001692  5152               	movf	(_bufferRXST7540UCAG+3)& (0+255),w,b
  7858  001694  0100               	movlb	0	; () banked
  7859  001696  6F66               	movwf	(??_ReadConfigST7540+2)& (0+255),b
  7860  001698  6B65               	clrf	(??_ReadConfigST7540+1)& (0+255),b
  7861  00169A  6B64               	clrf	??_ReadConfigST7540& (0+255),b
  7862  00169C  C062  FFD9         	movff	ReadConfigST7540@configDataUS,fsr2l
  7863  0016A0  C063  FFDA         	movff	ReadConfigST7540@configDataUS+1,fsr2h
  7864  0016A4  0100               	movlb	0	; () banked
  7865  0016A6  5164               	movf	??_ReadConfigST7540& (0+255),w,b
  7866  0016A8  12DE               	iorwf	postinc2,f,c
  7867  0016AA  5165               	movf	(??_ReadConfigST7540+1)& (0+255),w,b
  7868  0016AC  12DE               	iorwf	postinc2,f,c
  7869  0016AE  5166               	movf	(??_ReadConfigST7540+2)& (0+255),w,b
  7870  0016B0  12DE               	iorwf	postinc2,f,c
  7871                           
  7872                           ; BSR set to: 0
  7873                           ;ST7540.c: 196: *configDataUS |= ((unsigned long short) bufferRXST7540UCAG[4] << 8);
  7874  0016B2  0102               	movlb	2	; () banked
  7875  0016B4  5153               	movf	(_bufferRXST7540UCAG+4)& (0+255),w,b
  7876  0016B6  0100               	movlb	0	; () banked
  7877  0016B8  6F64               	movwf	??_ReadConfigST7540& (0+255),b
  7878  0016BA  6B65               	clrf	(??_ReadConfigST7540+1)& (0+255),b
  7879  0016BC  6B66               	clrf	(??_ReadConfigST7540+2)& (0+255),b
  7880  0016BE  C065  F066         	movff	??_ReadConfigST7540+1,??_ReadConfigST7540+2
  7881  0016C2  C064  F065         	movff	??_ReadConfigST7540,??_ReadConfigST7540+1
  7882  0016C6  0100               	movlb	0	; () banked
  7883  0016C8  6B64               	clrf	??_ReadConfigST7540& (0+255),b
  7884  0016CA  C062  FFD9         	movff	ReadConfigST7540@configDataUS,fsr2l
  7885  0016CE  C063  FFDA         	movff	ReadConfigST7540@configDataUS+1,fsr2h
  7886  0016D2  0100               	movlb	0	; () banked
  7887  0016D4  5164               	movf	??_ReadConfigST7540& (0+255),w,b
  7888  0016D6  12DE               	iorwf	postinc2,f,c
  7889  0016D8  5165               	movf	(??_ReadConfigST7540+1)& (0+255),w,b
  7890  0016DA  12DE               	iorwf	postinc2,f,c
  7891  0016DC  5166               	movf	(??_ReadConfigST7540+2)& (0+255),w,b
  7892  0016DE  12DE               	iorwf	postinc2,f,c
  7893                           
  7894                           ; BSR set to: 0
  7895                           ;ST7540.c: 197: *configDataUS |= bufferRXST7540UCAG[5];
  7896  0016E0  0102               	movlb	2	; () banked
  7897  0016E2  5154               	movf	(_bufferRXST7540UCAG+5)& (0+255),w,b
  7898  0016E4  0100               	movlb	0	; () banked
  7899  0016E6  6F64               	movwf	??_ReadConfigST7540& (0+255),b
  7900  0016E8  6B65               	clrf	(??_ReadConfigST7540+1)& (0+255),b
  7901  0016EA  6B66               	clrf	(??_ReadConfigST7540+2)& (0+255),b
  7902  0016EC  C062  FFD9         	movff	ReadConfigST7540@configDataUS,fsr2l
  7903  0016F0  C063  FFDA         	movff	ReadConfigST7540@configDataUS+1,fsr2h
  7904  0016F4  0100               	movlb	0	; () banked
  7905  0016F6  5164               	movf	??_ReadConfigST7540& (0+255),w,b
  7906  0016F8  12DE               	iorwf	postinc2,f,c
  7907  0016FA  5165               	movf	(??_ReadConfigST7540+1)& (0+255),w,b
  7908  0016FC  12DE               	iorwf	postinc2,f,c
  7909  0016FE  5166               	movf	(??_ReadConfigST7540+2)& (0+255),w,b
  7910  001700  12DE               	iorwf	postinc2,f,c
  7911                           
  7912                           ; BSR set to: 0
  7913  001702  0012               	return		;funcret
  7914  001704                     __end_of_ReadConfigST7540:
  7915                           	opt stack 0
  7916                           tblptru	equ	0xFF8
  7917                           tblptrh	equ	0xFF7
  7918                           tblptrl	equ	0xFF6
  7919                           tablat	equ	0xFF5
  7920                           prodh	equ	0xFF4
  7921                           prodl	equ	0xFF3
  7922                           intcon	equ	0xFF2
  7923                           postinc0	equ	0xFEE
  7924                           wreg	equ	0xFE8
  7925                           indf1	equ	0xFE7
  7926                           postinc1	equ	0xFE6
  7927                           postdec1	equ	0xFE5
  7928                           fsr1h	equ	0xFE2
  7929                           fsr1l	equ	0xFE1
  7930                           indf2	equ	0xFDF
  7931                           postinc2	equ	0xFDE
  7932                           postdec2	equ	0xFDD
  7933                           fsr2h	equ	0xFDA
  7934                           fsr2l	equ	0xFD9
  7935                           status	equ	0xFD8
  7936                           
  7937 ;; *************** function _InitST7540Pins *****************
  7938 ;; Defined at:
  7939 ;;		line 371 in file "ST7540.c"
  7940 ;; Parameters:    Size  Location     Type
  7941 ;;		None
  7942 ;; Auto vars:     Size  Location     Type
  7943 ;;		None
  7944 ;; Return value:  Size  Location     Type
  7945 ;;                  1    wreg      void 
  7946 ;; Registers used:
  7947 ;;		wreg, status,2, cstack
  7948 ;; Tracked objects:
  7949 ;;		On entry : 0/0
  7950 ;;		On exit  : 0/0
  7951 ;;		Unchanged: 0/0
  7952 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  7953 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7954 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7955 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7956 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  7957 ;;Total ram usage:        0 bytes
  7958 ;; Hardware stack levels used:    1
  7959 ;; Hardware stack levels required when called:    8
  7960 ;; This function calls:
  7961 ;;		_PPSLockFunc
  7962 ;;		_PPSUnlockFunc
  7963 ;; This function is called by:
  7964 ;;		_InitST7540
  7965 ;; This function uses a non-reentrant model
  7966 ;;
  7967                           
  7968                           	psect	text47
  7969  002B2A                     __ptext47:
  7970                           	opt stack 0
  7971  002B2A                     _InitST7540Pins:
  7972                           	opt stack 20
  7973                           
  7974                           ;ST7540.c: 373: PPSUnlockFunc();
  7975                           
  7976                           ; BSR set to: 0
  7977                           ;incstack = 0
  7978  002B2A  ECC2  F017         	call	_PPSUnlockFunc	;wreg free
  7979                           
  7980                           ;ST7540.c: 376: RPINR21 = 23;
  7981  002B2E  0E17               	movlw	23
  7982  002B30  010E               	movlb	14	; () banked
  7983  002B32  6FFC               	movwf	252,b	;volatile
  7984                           
  7985                           ; BSR set to: 14
  7986                           ;ST7540.c: 377: RPINR22 = 22;
  7987  002B34  0E16               	movlw	22
  7988  002B36  010E               	movlb	14	; () banked
  7989  002B38  6FFD               	movwf	253,b	;volatile
  7990                           
  7991                           ; BSR set to: 14
  7992                           ;ST7540.c: 383: RPOR21 = 10;
  7993  002B3A  0E0A               	movlw	10
  7994  002B3C  010E               	movlb	14	; () banked
  7995  002B3E  6FD5               	movwf	213,b	;volatile
  7996                           
  7997                           ; BSR set to: 14
  7998                           ;ST7540.c: 386: PPSLockFunc();
  7999  002B40  ECCB  F017         	call	_PPSLockFunc	;wreg free
  8000                           
  8001                           ;ST7540.c: 389: TRISDbits.TRISD3 = 1;
  8002  002B44  8695               	bsf	3989,3,c	;volatile
  8003                           
  8004                           ;ST7540.c: 393: TRISBbits.TRISB4 = 1;
  8005  002B46  8893               	bsf	3987,4,c	;volatile
  8006                           
  8007                           ;ST7540.c: 397: INTCONbits.RBIE = 1;
  8008  002B48  86F2               	bsf	intcon,3,c	;volatile
  8009                           
  8010                           ;ST7540.c: 400: TRISDbits.TRISD2 = 0;
  8011  002B4A  9495               	bcf	3989,2,c	;volatile
  8012                           
  8013                           ;ST7540.c: 402: LATDbits.LATD2 = 0;
  8014  002B4C  948C               	bcf	3980,2,c	;volatile
  8015                           
  8016                           ;ST7540.c: 405: TRISDbits.TRISD6 = 1;
  8017  002B4E  8C95               	bsf	3989,6,c	;volatile
  8018                           
  8019                           ;ST7540.c: 409: TRISDbits.TRISD4 = 0;
  8020  002B50  9895               	bcf	3989,4,c	;volatile
  8021                           
  8022                           ;ST7540.c: 411: LATDbits.LATD4 = 0;
  8023  002B52  988C               	bcf	3980,4,c	;volatile
  8024                           
  8025                           ;ST7540.c: 414: TRISCbits.TRISC3 = 0;
  8026  002B54  9694               	bcf	3988,3,c	;volatile
  8027                           
  8028                           ;ST7540.c: 416: LATCbits.LATC3 = 1;
  8029  002B56  868B               	bsf	3979,3,c	;volatile
  8030                           
  8031                           ;ST7540.c: 419: TRISCbits.TRISC2 = 1;
  8032  002B58  8494               	bsf	3988,2,c	;volatile
  8033                           
  8034                           ;ST7540.c: 420: ANCON1bits.PCFG11 = 1;
  8035  002B5A  010F               	movlb	15	; () banked
  8036  002B5C  8749               	bsf	73,3,b	;volatile
  8037                           
  8038                           ; BSR set to: 15
  8039                           ;ST7540.c: 423: TRISDbits.TRISD5 = 1;
  8040  002B5E  8A95               	bsf	3989,5,c	;volatile
  8041                           
  8042                           ; BSR set to: 15
  8043                           ;ST7540.c: 427: TRISCbits.TRISC1 = 0;
  8044  002B60  9294               	bcf	3988,1,c	;volatile
  8045                           
  8046                           ; BSR set to: 15
  8047                           ;ST7540.c: 429: LATCbits.LATC1 = 0;
  8048  002B62  928B               	bcf	3979,1,c	;volatile
  8049                           
  8050                           ; BSR set to: 15
  8051  002B64  0012               	return		;funcret
  8052  002B66                     __end_of_InitST7540Pins:
  8053                           	opt stack 0
  8054                           tblptru	equ	0xFF8
  8055                           tblptrh	equ	0xFF7
  8056                           tblptrl	equ	0xFF6
  8057                           tablat	equ	0xFF5
  8058                           prodh	equ	0xFF4
  8059                           prodl	equ	0xFF3
  8060                           intcon	equ	0xFF2
  8061                           postinc0	equ	0xFEE
  8062                           wreg	equ	0xFE8
  8063                           indf1	equ	0xFE7
  8064                           postinc1	equ	0xFE6
  8065                           postdec1	equ	0xFE5
  8066                           fsr1h	equ	0xFE2
  8067                           fsr1l	equ	0xFE1
  8068                           indf2	equ	0xFDF
  8069                           postinc2	equ	0xFDE
  8070                           postdec2	equ	0xFDD
  8071                           fsr2h	equ	0xFDA
  8072                           fsr2l	equ	0xFD9
  8073                           status	equ	0xFD8
  8074                           
  8075 ;; *************** function _PPSUnlockFunc *****************
  8076 ;; Defined at:
  8077 ;;		line 28 in file "peripherals.c"
  8078 ;; Parameters:    Size  Location     Type
  8079 ;;		None
  8080 ;; Auto vars:     Size  Location     Type
  8081 ;;		None
  8082 ;; Return value:  Size  Location     Type
  8083 ;;                  1    wreg      void 
  8084 ;; Registers used:
  8085 ;;		wreg, status,2
  8086 ;; Tracked objects:
  8087 ;;		On entry : 0/0
  8088 ;;		On exit  : 0/0
  8089 ;;		Unchanged: 0/0
  8090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8091 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8094 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8095 ;;Total ram usage:        0 bytes
  8096 ;; Hardware stack levels used:    1
  8097 ;; Hardware stack levels required when called:    7
  8098 ;; This function calls:
  8099 ;;		Nothing
  8100 ;; This function is called by:
  8101 ;;		_InitST7540Pins
  8102 ;; This function uses a non-reentrant model
  8103 ;;
  8104                           
  8105                           	psect	text48
  8106  002F84                     __ptext48:
  8107                           	opt stack 0
  8108  002F84                     _PPSUnlockFunc:
  8109                           	opt stack 20
  8110                           
  8111                           ;peripherals.c: 29: INTCONbits.GIE = 0;
  8112                           
  8113                           ; BSR set to: 15
  8114                           ;incstack = 0
  8115  002F84  9EF2               	bcf	intcon,7,c	;volatile
  8116                           
  8117                           ;peripherals.c: 30: EECON2 = 0x55;
  8118  002F86  0E55               	movlw	85
  8119  002F88  6EA7               	movwf	4007,c	;volatile
  8120                           
  8121                           ;peripherals.c: 31: EECON2 = 0xAA;
  8122  002F8A  0EAA               	movlw	170
  8123  002F8C  6EA7               	movwf	4007,c	;volatile
  8124                           
  8125                           ;peripherals.c: 32: PPSCONbits.IOLOCK = 0;
  8126  002F8E  010E               	movlb	14	; () banked
  8127  002F90  91BF               	bcf	191,0,b	;volatile
  8128                           
  8129                           ; BSR set to: 14
  8130                           ;peripherals.c: 33: INTCONbits.GIE = 1;
  8131  002F92  8EF2               	bsf	intcon,7,c	;volatile
  8132                           
  8133                           ; BSR set to: 14
  8134  002F94  0012               	return		;funcret
  8135  002F96                     __end_of_PPSUnlockFunc:
  8136                           	opt stack 0
  8137                           tblptru	equ	0xFF8
  8138                           tblptrh	equ	0xFF7
  8139                           tblptrl	equ	0xFF6
  8140                           tablat	equ	0xFF5
  8141                           prodh	equ	0xFF4
  8142                           prodl	equ	0xFF3
  8143                           intcon	equ	0xFF2
  8144                           postinc0	equ	0xFEE
  8145                           wreg	equ	0xFE8
  8146                           indf1	equ	0xFE7
  8147                           postinc1	equ	0xFE6
  8148                           postdec1	equ	0xFE5
  8149                           fsr1h	equ	0xFE2
  8150                           fsr1l	equ	0xFE1
  8151                           indf2	equ	0xFDF
  8152                           postinc2	equ	0xFDE
  8153                           postdec2	equ	0xFDD
  8154                           fsr2h	equ	0xFDA
  8155                           fsr2l	equ	0xFD9
  8156                           status	equ	0xFD8
  8157                           
  8158 ;; *************** function _PPSLockFunc *****************
  8159 ;; Defined at:
  8160 ;;		line 36 in file "peripherals.c"
  8161 ;; Parameters:    Size  Location     Type
  8162 ;;		None
  8163 ;; Auto vars:     Size  Location     Type
  8164 ;;		None
  8165 ;; Return value:  Size  Location     Type
  8166 ;;                  1    wreg      void 
  8167 ;; Registers used:
  8168 ;;		wreg, status,2
  8169 ;; Tracked objects:
  8170 ;;		On entry : 0/0
  8171 ;;		On exit  : 0/0
  8172 ;;		Unchanged: 0/0
  8173 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8174 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8175 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8176 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8177 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8178 ;;Total ram usage:        0 bytes
  8179 ;; Hardware stack levels used:    1
  8180 ;; Hardware stack levels required when called:    7
  8181 ;; This function calls:
  8182 ;;		Nothing
  8183 ;; This function is called by:
  8184 ;;		_InitST7540Pins
  8185 ;; This function uses a non-reentrant model
  8186 ;;
  8187                           
  8188                           	psect	text49
  8189  002F96                     __ptext49:
  8190                           	opt stack 0
  8191  002F96                     _PPSLockFunc:
  8192                           	opt stack 20
  8193                           
  8194                           ;peripherals.c: 37: INTCONbits.GIE = 0;
  8195                           
  8196                           ; BSR set to: 14
  8197                           ;incstack = 0
  8198  002F96  9EF2               	bcf	intcon,7,c	;volatile
  8199                           
  8200                           ;peripherals.c: 38: EECON2 = 0x55;
  8201  002F98  0E55               	movlw	85
  8202  002F9A  6EA7               	movwf	4007,c	;volatile
  8203                           
  8204                           ;peripherals.c: 39: EECON2 = 0xAA;
  8205  002F9C  0EAA               	movlw	170
  8206  002F9E  6EA7               	movwf	4007,c	;volatile
  8207                           
  8208                           ;peripherals.c: 40: PPSCONbits.IOLOCK = 1;
  8209  002FA0  010E               	movlb	14	; () banked
  8210  002FA2  81BF               	bsf	191,0,b	;volatile
  8211                           
  8212                           ; BSR set to: 14
  8213                           ;peripherals.c: 41: INTCONbits.GIE = 1;
  8214  002FA4  8EF2               	bsf	intcon,7,c	;volatile
  8215                           
  8216                           ; BSR set to: 14
  8217  002FA6  0012               	return		;funcret
  8218  002FA8                     __end_of_PPSLockFunc:
  8219                           	opt stack 0
  8220                           tblptru	equ	0xFF8
  8221                           tblptrh	equ	0xFF7
  8222                           tblptrl	equ	0xFF6
  8223                           tablat	equ	0xFF5
  8224                           prodh	equ	0xFF4
  8225                           prodl	equ	0xFF3
  8226                           intcon	equ	0xFF2
  8227                           postinc0	equ	0xFEE
  8228                           wreg	equ	0xFE8
  8229                           indf1	equ	0xFE7
  8230                           postinc1	equ	0xFE6
  8231                           postdec1	equ	0xFE5
  8232                           fsr1h	equ	0xFE2
  8233                           fsr1l	equ	0xFE1
  8234                           indf2	equ	0xFDF
  8235                           postinc2	equ	0xFDE
  8236                           postdec2	equ	0xFDD
  8237                           fsr2h	equ	0xFDA
  8238                           fsr2l	equ	0xFD9
  8239                           status	equ	0xFD8
  8240                           
  8241 ;; *************** function _isr *****************
  8242 ;; Defined at:
  8243 ;;		line 30 in file "main.c"
  8244 ;; Parameters:    Size  Location     Type
  8245 ;;		None
  8246 ;; Auto vars:     Size  Location     Type
  8247 ;;  discardUC       1   52[COMRAM] unsigned char 
  8248 ;; Return value:  Size  Location     Type
  8249 ;;                  1    wreg      void 
  8250 ;; Registers used:
  8251 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8252 ;; Tracked objects:
  8253 ;;		On entry : 0/0
  8254 ;;		On exit  : 0/0
  8255 ;;		Unchanged: 0/0
  8256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8258 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8259 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8260 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8261 ;;Total ram usage:       15 bytes
  8262 ;; Hardware stack levels used:    1
  8263 ;; Hardware stack levels required when called:    6
  8264 ;; This function calls:
  8265 ;;		_BoosterCommsDispatcher
  8266 ;;		_BoosterDataCommandComms
  8267 ;;		_RXReadyISRHandlerST7540
  8268 ;;		_SPIISRHandlerST7540
  8269 ;;		i2_ForceFiringMode
  8270 ;; This function is called by:
  8271 ;;		Interrupt level 2
  8272 ;; This function uses a non-reentrant model
  8273 ;;
  8274                           
  8275                           	psect	intcode
  8276  000008                     __pintcode:
  8277                           	opt stack 0
  8278  000008                     _isr:
  8279                           	opt stack 18
  8280                           
  8281                           ; BSR set to: 14
  8282                           ;incstack = 0
  8283  000008  825E               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  8284  00000A  CFFA F027          	movff	pclath,??_isr
  8285  00000E  CFFB F028          	movff	pclatu,??_isr+1
  8286  000012  CFE9 F029          	movff	fsr0l,??_isr+2
  8287  000016  CFEA F02A          	movff	fsr0h,??_isr+3
  8288  00001A  CFE1 F02B          	movff	fsr1l,??_isr+4
  8289  00001E  CFE2 F02C          	movff	fsr1h,??_isr+5
  8290  000022  CFD9 F02D          	movff	fsr2l,??_isr+6
  8291  000026  CFDA F02E          	movff	fsr2h,??_isr+7
  8292  00002A  CFF3 F02F          	movff	prodl,??_isr+8
  8293  00002E  CFF4 F030          	movff	prodh,??_isr+9
  8294  000032  CFF6 F031          	movff	tblptrl,??_isr+10
  8295  000036  CFF7 F032          	movff	tblptrh,??_isr+11
  8296  00003A  CFF8 F033          	movff	tblptru,??_isr+12
  8297  00003E  CFF5 F034          	movff	tablat,??_isr+13
  8298                           
  8299                           ;main.c: 31: unsigned char discardUC;
  8300                           ;main.c: 33: if(PIR1bits.TMR2IF){
  8301  000042  A29E               	btfss	3998,1,c	;volatile
  8302  000044  D01B               	goto	i2l6031
  8303                           
  8304                           ;main.c: 34: PIR1bits.TMR2IF = 0;
  8305  000046  929E               	bcf	3998,1,c	;volatile
  8306                           
  8307                           ;main.c: 37: if(++masterCommsTimeoutUSG == 40000){
  8308  000048  0100               	movlb	0	; () banked
  8309  00004A  4BD8               	infsnz	_masterCommsTimeoutUSG& (0+255),f,b
  8310  00004C  2BD9               	incf	(_masterCommsTimeoutUSG+1)& (0+255),f,b
  8311  00004E  0E40               	movlw	64
  8312  000050  0100               	movlb	0	; () banked
  8313  000052  19D8               	xorwf	_masterCommsTimeoutUSG& (0+255),w,b
  8314  000054  E10E               	bnz	i2l6025
  8315  000056  0E9C               	movlw	156
  8316  000058  0100               	movlb	0	; () banked
  8317  00005A  19D9               	xorwf	(_masterCommsTimeoutUSG+1)& (0+255),w,b
  8318  00005C  A4D8               	btfss	status,2,c
  8319  00005E  D009               	goto	i2l6025
  8320                           
  8321                           ; BSR set to: 0
  8322                           ;main.c: 38: ForceFiringMode(0);
  8323  000060  0E00               	movlw	0
  8324  000062  EC55  F016         	call	i2_ForceFiringMode
  8325                           
  8326                           ;main.c: 41: statusFlagsUSLG &= ~0b000000000000000000000010;
  8327  000066  9236               	bcf	_statusFlagsUSLG,1,c	;volatile
  8328                           
  8329                           ;main.c: 42: masterCommsTimeoutUSG = 0;
  8330  000068  0E00               	movlw	0
  8331  00006A  0100               	movlb	0	; () banked
  8332  00006C  6FD9               	movwf	(_masterCommsTimeoutUSG+1)& (0+255),b
  8333  00006E  0E00               	movlw	0
  8334  000070  6FD8               	movwf	_masterCommsTimeoutUSG& (0+255),b
  8335  000072                     i2l6025:
  8336                           
  8337                           ; BSR set to: 0
  8338                           ;main.c: 43: }
  8339                           ;main.c: 49: statusFlagsUSLG |= 0b000000000000000000000001;
  8340  000072  8036               	bsf	_statusFlagsUSLG,0,c	;volatile
  8341                           
  8342                           ; BSR set to: 0
  8343                           ;main.c: 50: BoosterDataCommandComms();
  8344  000074  EC6A  F000         	call	_BoosterDataCommandComms	;wreg free
  8345                           
  8346                           ;main.c: 51: BoosterCommsDispatcher();
  8347  000078  ECF4  F00F         	call	_BoosterCommsDispatcher	;wreg free
  8348  00007C                     i2l6031:
  8349                           
  8350                           ;main.c: 53: }
  8351                           ;main.c: 55: if(PIR3bits.SSP2IF){
  8352  00007C  BEA4               	btfsc	4004,7,c	;volatile
  8353                           
  8354                           ;main.c: 56: SPIISRHandlerST7540();
  8355  00007E  EC56  F013         	call	_SPIISRHandlerST7540	;wreg free
  8356                           
  8357                           ;main.c: 57: }
  8358                           ;main.c: 59: if(INTCONbits.RBIF){
  8359  000082  A0F2               	btfss	intcon,0,c	;volatile
  8360  000084  D007               	goto	i2l696
  8361                           
  8362                           ;main.c: 60: discardUC = PORTBbits.RP4;
  8363  000086  0E00               	movlw	0
  8364  000088  B281               	btfsc	3969,1,c	;volatile
  8365  00008A  0E01               	movlw	1
  8366  00008C  6E35               	movwf	isr@discardUC,c
  8367                           
  8368                           ;main.c: 61: RXReadyISRHandlerST7540();
  8369  00008E  ECF5  F017         	call	_RXReadyISRHandlerST7540	;wreg free
  8370                           
  8371                           ;main.c: 62: INTCONbits.RBIF = 0;
  8372  000092  90F2               	bcf	intcon,0,c	;volatile
  8373  000094                     i2l696:
  8374  000094  C034  FFF5         	movff	??_isr+13,tablat
  8375  000098  C033  FFF8         	movff	??_isr+12,tblptru
  8376  00009C  C032  FFF7         	movff	??_isr+11,tblptrh
  8377  0000A0  C031  FFF6         	movff	??_isr+10,tblptrl
  8378  0000A4  C030  FFF4         	movff	??_isr+9,prodh
  8379  0000A8  C02F  FFF3         	movff	??_isr+8,prodl
  8380  0000AC  C02E  FFDA         	movff	??_isr+7,fsr2h
  8381  0000B0  C02D  FFD9         	movff	??_isr+6,fsr2l
  8382  0000B4  C02C  FFE2         	movff	??_isr+5,fsr1h
  8383  0000B8  C02B  FFE1         	movff	??_isr+4,fsr1l
  8384  0000BC  C02A  FFEA         	movff	??_isr+3,fsr0h
  8385  0000C0  C029  FFE9         	movff	??_isr+2,fsr0l
  8386  0000C4  C028  FFFB         	movff	??_isr+1,pclatu
  8387  0000C8  C027  FFFA         	movff	??_isr,pclath
  8388  0000CC  925E               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8389  0000CE  0011               	retfie		f
  8390  0000D0                     __end_of_isr:
  8391                           	opt stack 0
  8392                           pclatu	equ	0xFFB
  8393                           pclath	equ	0xFFA
  8394                           tblptru	equ	0xFF8
  8395                           tblptrh	equ	0xFF7
  8396                           tblptrl	equ	0xFF6
  8397                           tablat	equ	0xFF5
  8398                           prodh	equ	0xFF4
  8399                           prodl	equ	0xFF3
  8400                           intcon	equ	0xFF2
  8401                           postinc0	equ	0xFEE
  8402                           fsr0h	equ	0xFEA
  8403                           fsr0l	equ	0xFE9
  8404                           wreg	equ	0xFE8
  8405                           indf1	equ	0xFE7
  8406                           postinc1	equ	0xFE6
  8407                           postdec1	equ	0xFE5
  8408                           fsr1h	equ	0xFE2
  8409                           fsr1l	equ	0xFE1
  8410                           indf2	equ	0xFDF
  8411                           postinc2	equ	0xFDE
  8412                           postdec2	equ	0xFDD
  8413                           fsr2h	equ	0xFDA
  8414                           fsr2l	equ	0xFD9
  8415                           status	equ	0xFD8
  8416                           
  8417 ;; *************** function i2_ForceFiringMode *****************
  8418 ;; Defined at:
  8419 ;;		line 145 in file "mastercomms.c"
  8420 ;; Parameters:    Size  Location     Type
  8421 ;;  forceModeUC     1    wreg     unsigned char 
  8422 ;; Auto vars:     Size  Location     Type
  8423 ;;  forceModeUC     1    2[COMRAM] unsigned char 
  8424 ;; Return value:  Size  Location     Type
  8425 ;;                  1    wreg      void 
  8426 ;; Registers used:
  8427 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8428 ;; Tracked objects:
  8429 ;;		On entry : 0/0
  8430 ;;		On exit  : 0/0
  8431 ;;		Unchanged: 0/0
  8432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8434 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8436 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8437 ;;Total ram usage:        1 bytes
  8438 ;; Hardware stack levels used:    1
  8439 ;; Hardware stack levels required when called:    2
  8440 ;; This function calls:
  8441 ;;		i2_ClearPastValues
  8442 ;;		i2_ResetBoosterStates
  8443 ;; This function is called by:
  8444 ;;		_isr
  8445 ;; This function uses a non-reentrant model
  8446 ;;
  8447                           
  8448                           	psect	text51
  8449  002CAA                     __ptext51:
  8450                           	opt stack 0
  8451  002CAA                     i2_ForceFiringMode:
  8452                           	opt stack 21
  8453                           
  8454                           ;incstack = 0
  8455                           ;i2ForceFiringMode@forceModeUC stored from wreg
  8456  002CAA  6E03               	movwf	i2ForceFiringMode@forceModeUC,c
  8457                           
  8458                           ;mastercomms.c: 147: if(forceModeUC == 0 && !(statusFlagsUSLG & 0b0100000000000000000000
      +                          00)){
  8459  002CAC  5003               	movf	i2ForceFiringMode@forceModeUC,w,c
  8460  002CAE  B4D8               	btfsc	status,2,c
  8461  002CB0  BC38               	btfsc	_statusFlagsUSLG+2,6,c	;volatile
  8462  002CB2  D006               	goto	i2l6003
  8463                           
  8464                           ;mastercomms.c: 148: LATDbits.LATD7 = 0;
  8465  002CB4  9E8C               	bcf	3980,7,c	;volatile
  8466                           
  8467                           ;mastercomms.c: 149: ResetBoosterStates();
  8468  002CB6  ECA4  F017         	call	i2_ResetBoosterStates	;wreg free
  8469                           
  8470                           ;mastercomms.c: 150: ClearPastValues();
  8471  002CBA  EC99  F017         	call	i2_ClearPastValues	;wreg free
  8472                           
  8473                           ;mastercomms.c: 151: }else{
  8474  002CBE  0012               	return	
  8475  002CC0                     i2l6003:
  8476                           
  8477                           ;mastercomms.c: 152: statusFlagsUSLG |= 0b000000000000000000000010;
  8478  002CC0  8236               	bsf	_statusFlagsUSLG,1,c	;volatile
  8479                           
  8480                           ;mastercomms.c: 153: statusFlagsUSLG &= ~0b001000000000000000000000;
  8481  002CC2  9A38               	bcf	_statusFlagsUSLG+2,5,c	;volatile
  8482                           
  8483                           ;mastercomms.c: 154: statusFlagsUSLG |= 0b000000001000000000000000;
  8484  002CC4  8E37               	bsf	_statusFlagsUSLG+1,7,c	;volatile
  8485                           
  8486                           ;mastercomms.c: 155: if(!(statusFlagsUSLG & 0b000000000000000000100000) ||((statusFlagsU
      +                          SLG & 0b000000000000000000100000)&& (ISO_COUNTER >= 15)))
  8487  002CC6  AA36               	btfss	_statusFlagsUSLG,5,c	;volatile
  8488  002CC8  D005               	goto	i2l829
  8489  002CCA  AA36               	btfss	_statusFlagsUSLG,5,c	;volatile
  8490  002CCC  D004               	goto	i2l827
  8491  002CCE  0E0E               	movlw	14
  8492  002CD0  644A               	cpfsgt	_ISO_COUNTER,c
  8493  002CD2  D001               	goto	i2l827
  8494  002CD4                     i2l829:
  8495                           
  8496                           ;mastercomms.c: 156: LATDbits.LATD7 = 1;
  8497  002CD4  8E8C               	bsf	3980,7,c	;volatile
  8498  002CD6                     i2l827:
  8499                           
  8500                           ;mastercomms.c: 157: LATBbits.LATB3 = 0;
  8501  002CD6  968A               	bcf	3978,3,c	;volatile
  8502  002CD8  0012               	return	
  8503  002CDA                     __end_ofi2_ForceFiringMode:
  8504                           	opt stack 0
  8505                           pclatu	equ	0xFFB
  8506                           pclath	equ	0xFFA
  8507                           tblptru	equ	0xFF8
  8508                           tblptrh	equ	0xFF7
  8509                           tblptrl	equ	0xFF6
  8510                           tablat	equ	0xFF5
  8511                           prodh	equ	0xFF4
  8512                           prodl	equ	0xFF3
  8513                           intcon	equ	0xFF2
  8514                           postinc0	equ	0xFEE
  8515                           fsr0h	equ	0xFEA
  8516                           fsr0l	equ	0xFE9
  8517                           wreg	equ	0xFE8
  8518                           indf1	equ	0xFE7
  8519                           postinc1	equ	0xFE6
  8520                           postdec1	equ	0xFE5
  8521                           fsr1h	equ	0xFE2
  8522                           fsr1l	equ	0xFE1
  8523                           indf2	equ	0xFDF
  8524                           postinc2	equ	0xFDE
  8525                           postdec2	equ	0xFDD
  8526                           fsr2h	equ	0xFDA
  8527                           fsr2l	equ	0xFD9
  8528                           status	equ	0xFD8
  8529                           
  8530 ;; *************** function _SPIISRHandlerST7540 *****************
  8531 ;; Defined at:
  8532 ;;		line 200 in file "ST7540.c"
  8533 ;; Parameters:    Size  Location     Type
  8534 ;;		None
  8535 ;; Auto vars:     Size  Location     Type
  8536 ;;  dataReadUC      1    0[COMRAM] unsigned char 
  8537 ;; Return value:  Size  Location     Type
  8538 ;;                  1    wreg      void 
  8539 ;; Registers used:
  8540 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8541 ;; Tracked objects:
  8542 ;;		On entry : 0/0
  8543 ;;		On exit  : 0/0
  8544 ;;		Unchanged: 0/0
  8545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8547 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8549 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8550 ;;Total ram usage:        1 bytes
  8551 ;; Hardware stack levels used:    1
  8552 ;; This function calls:
  8553 ;;		Nothing
  8554 ;; This function is called by:
  8555 ;;		_isr
  8556 ;; This function uses a non-reentrant model
  8557 ;;
  8558                           
  8559                           	psect	text52
  8560  0026AC                     __ptext52:
  8561                           	opt stack 0
  8562  0026AC                     _SPIISRHandlerST7540:
  8563                           	opt stack 23
  8564                           
  8565                           ;ST7540.c: 201: unsigned char dataReadUC;
  8566                           ;ST7540.c: 203: if(!PIE3bits.SSP2IE){
  8567                           
  8568                           ;incstack = 0
  8569  0026AC  BEA3               	btfsc	4003,7,c	;volatile
  8570  0026AE  D002               	goto	i2l107
  8571                           
  8572                           ;ST7540.c: 204: PIR3bits.SSP2IF = 0;
  8573  0026B0  9EA4               	bcf	4004,7,c	;volatile
  8574                           
  8575                           ;ST7540.c: 205: return;
  8576  0026B2  0012               	return	
  8577  0026B4                     i2l107:
  8578                           
  8579                           ;ST7540.c: 206: }
  8580                           ;ST7540.c: 208: dataReadUC = SSP2BUF;
  8581  0026B4  CF75 F001          	movff	3957,SPIISRHandlerST7540@dataReadUC	;volatile
  8582                           
  8583                           ;ST7540.c: 209: SSP2BUF = 0;
  8584  0026B8  0E00               	movlw	0
  8585  0026BA  6E75               	movwf	3957,c	;volatile
  8586                           
  8587                           ;ST7540.c: 211: if(flagST7540UCG & 1){
  8588  0026BC  A055               	btfss	_flagST7540UCG,0,c
  8589  0026BE  D015               	goto	i2l109
  8590                           
  8591                           ;ST7540.c: 212: if(bufferTXNextUCG > bufferTXLenUCG){
  8592  0026C0  5050               	movf	_bufferTXNextUCG,w,c
  8593  0026C2  5C4F               	subwf	_bufferTXLenUCG,w,c
  8594  0026C4  B0D8               	btfsc	status,0,c
  8595  0026C6  D005               	goto	i2l5321
  8596                           
  8597                           ;ST7540.c: 213: flagST7540UCG &= ~1;
  8598  0026C8  9055               	bcf	_flagST7540UCG,0,c
  8599                           
  8600                           ;ST7540.c: 214: SSP2CON1bits.SSPEN = 0;
  8601  0026CA  9A72               	bcf	3954,5,c	;volatile
  8602                           
  8603                           ;ST7540.c: 215: PIR3bits.SSP2IF = 0;
  8604  0026CC  9EA4               	bcf	4004,7,c	;volatile
  8605                           
  8606                           ;ST7540.c: 216: LATCbits.LATC3 = 1;
  8607  0026CE  868B               	bsf	3979,3,c	;volatile
  8608                           
  8609                           ;ST7540.c: 217: return;
  8610  0026D0  0012               	return	
  8611  0026D2                     i2l5321:
  8612                           
  8613                           ;ST7540.c: 218: }
  8614                           ;ST7540.c: 219: SSP2BUF = bufferTXST7540UCAG[bufferTXNextUCG++];
  8615  0026D2  5050               	movf	_bufferTXNextUCG,w,c
  8616  0026D4  0D01               	mullw	1
  8617  0026D6  0E00               	movlw	low _bufferTXST7540UCAG
  8618  0026D8  24F3               	addwf	prodl,w,c
  8619  0026DA  6ED9               	movwf	fsr2l,c
  8620  0026DC  0E02               	movlw	high _bufferTXST7540UCAG
  8621  0026DE  20F4               	addwfc	prodh,w,c
  8622  0026E0  6EDA               	movwf	fsr2h,c
  8623  0026E2  50DF               	movf	indf2,w,c
  8624  0026E4  6E75               	movwf	3957,c	;volatile
  8625  0026E6  2A50               	incf	_bufferTXNextUCG,f,c
  8626                           
  8627                           ;ST7540.c: 220: }else if(flagST7540UCG & 2){
  8628  0026E8  D017               	goto	i2l111
  8629  0026EA                     i2l109:
  8630  0026EA  A255               	btfss	_flagST7540UCG,1,c
  8631  0026EC  D015               	goto	i2l111
  8632                           
  8633                           ;ST7540.c: 221: bufferRXST7540UCAG[bufferRXNextUCG++] = dataReadUC;
  8634  0026EE  504E               	movf	_bufferRXNextUCG,w,c
  8635  0026F0  0D01               	mullw	1
  8636  0026F2  0E4F               	movlw	low _bufferRXST7540UCAG
  8637  0026F4  24F3               	addwf	prodl,w,c
  8638  0026F6  6ED9               	movwf	fsr2l,c
  8639  0026F8  0E02               	movlw	high _bufferRXST7540UCAG
  8640  0026FA  20F4               	addwfc	prodh,w,c
  8641  0026FC  6EDA               	movwf	fsr2h,c
  8642  0026FE  C001  FFDF         	movff	SPIISRHandlerST7540@dataReadUC,indf2
  8643  002702  2A4E               	incf	_bufferRXNextUCG,f,c
  8644                           
  8645                           ;ST7540.c: 222: if(bufferRXST7540UCAG[0] == bufferRXNextUCG){
  8646  002704  504E               	movf	_bufferRXNextUCG,w,c
  8647  002706  0102               	movlb	2	; () banked
  8648  002708  194F               	xorwf	_bufferRXST7540UCAG& (0+255),w,b
  8649  00270A  A4D8               	btfss	status,2,c
  8650  00270C  D005               	goto	i2l111
  8651                           
  8652                           ; BSR set to: 2
  8653                           ;ST7540.c: 223: flagST7540UCG |= 4;
  8654  00270E  8455               	bsf	_flagST7540UCG,2,c
  8655                           
  8656                           ;ST7540.c: 224: flagST7540UCG &= ~2;
  8657  002710  9255               	bcf	_flagST7540UCG,1,c
  8658                           
  8659                           ; BSR set to: 2
  8660                           ;ST7540.c: 225: SSP2CON1bits.SSPEN = 0;
  8661  002712  9A72               	bcf	3954,5,c	;volatile
  8662                           
  8663                           ; BSR set to: 2
  8664                           ;ST7540.c: 226: PIR3bits.SSP2IF = 0;
  8665  002714  9EA4               	bcf	4004,7,c	;volatile
  8666                           
  8667                           ; BSR set to: 2
  8668                           ;ST7540.c: 227: return;
  8669  002716  0012               	return	
  8670  002718                     i2l111:
  8671                           
  8672                           ;ST7540.c: 228: }
  8673                           ;ST7540.c: 229: }
  8674                           ;ST7540.c: 231: PIR3bits.SSP2IF = 0;
  8675  002718  9EA4               	bcf	4004,7,c	;volatile
  8676  00271A  0012               	return		;funcret
  8677  00271C                     __end_of_SPIISRHandlerST7540:
  8678                           	opt stack 0
  8679                           pclatu	equ	0xFFB
  8680                           pclath	equ	0xFFA
  8681                           tblptru	equ	0xFF8
  8682                           tblptrh	equ	0xFF7
  8683                           tblptrl	equ	0xFF6
  8684                           tablat	equ	0xFF5
  8685                           prodh	equ	0xFF4
  8686                           prodl	equ	0xFF3
  8687                           intcon	equ	0xFF2
  8688                           postinc0	equ	0xFEE
  8689                           fsr0h	equ	0xFEA
  8690                           fsr0l	equ	0xFE9
  8691                           wreg	equ	0xFE8
  8692                           indf1	equ	0xFE7
  8693                           postinc1	equ	0xFE6
  8694                           postdec1	equ	0xFE5
  8695                           fsr1h	equ	0xFE2
  8696                           fsr1l	equ	0xFE1
  8697                           indf2	equ	0xFDF
  8698                           postinc2	equ	0xFDE
  8699                           postdec2	equ	0xFDD
  8700                           fsr2h	equ	0xFDA
  8701                           fsr2l	equ	0xFD9
  8702                           status	equ	0xFD8
  8703                           
  8704 ;; *************** function _RXReadyISRHandlerST7540 *****************
  8705 ;; Defined at:
  8706 ;;		line 234 in file "ST7540.c"
  8707 ;; Parameters:    Size  Location     Type
  8708 ;;		None
  8709 ;; Auto vars:     Size  Location     Type
  8710 ;;		None
  8711 ;; Return value:  Size  Location     Type
  8712 ;;                  1    wreg      void 
  8713 ;; Registers used:
  8714 ;;		None
  8715 ;; Tracked objects:
  8716 ;;		On entry : 0/0
  8717 ;;		On exit  : 0/0
  8718 ;;		Unchanged: 0/0
  8719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8720 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8722 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8723 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8724 ;;Total ram usage:        0 bytes
  8725 ;; Hardware stack levels used:    1
  8726 ;; This function calls:
  8727 ;;		Nothing
  8728 ;; This function is called by:
  8729 ;;		_isr
  8730 ;; This function uses a non-reentrant model
  8731 ;;
  8732                           
  8733                           	psect	text53
  8734  002FEA                     __ptext53:
  8735                           	opt stack 0
  8736  002FEA                     _RXReadyISRHandlerST7540:
  8737                           	opt stack 23
  8738                           
  8739                           ;ST7540.c: 235: if((flagST7540UCG & 2) && !PORTBbits.RP4){
  8740                           
  8741                           ;incstack = 0
  8742  002FEA  A255               	btfss	_flagST7540UCG,1,c
  8743  002FEC  0012               	return	
  8744  002FEE  B281               	btfsc	3969,1,c	;volatile
  8745  002FF0  0012               	return	
  8746                           
  8747                           ;ST7540.c: 236: SSP2CON1bits.SSPEN = 1;
  8748  002FF2  8A72               	bsf	3954,5,c	;volatile
  8749  002FF4  0012               	return	
  8750  002FF6                     __end_of_RXReadyISRHandlerST7540:
  8751                           	opt stack 0
  8752                           pclatu	equ	0xFFB
  8753                           pclath	equ	0xFFA
  8754                           tblptru	equ	0xFF8
  8755                           tblptrh	equ	0xFF7
  8756                           tblptrl	equ	0xFF6
  8757                           tablat	equ	0xFF5
  8758                           prodh	equ	0xFF4
  8759                           prodl	equ	0xFF3
  8760                           intcon	equ	0xFF2
  8761                           postinc0	equ	0xFEE
  8762                           fsr0h	equ	0xFEA
  8763                           fsr0l	equ	0xFE9
  8764                           wreg	equ	0xFE8
  8765                           indf1	equ	0xFE7
  8766                           postinc1	equ	0xFE6
  8767                           postdec1	equ	0xFE5
  8768                           fsr1h	equ	0xFE2
  8769                           fsr1l	equ	0xFE1
  8770                           indf2	equ	0xFDF
  8771                           postinc2	equ	0xFDE
  8772                           postdec2	equ	0xFDD
  8773                           fsr2h	equ	0xFDA
  8774                           fsr2l	equ	0xFD9
  8775                           status	equ	0xFD8
  8776                           
  8777 ;; *************** function _BoosterDataCommandComms *****************
  8778 ;; Defined at:
  8779 ;;		line 48 in file "boostercomms.c"
  8780 ;; Parameters:    Size  Location     Type
  8781 ;;		None
  8782 ;; Auto vars:     Size  Location     Type
  8783 ;;  commsADCValu    2   19[COMRAM] unsigned short 
  8784 ;; Return value:  Size  Location     Type
  8785 ;;                  1    wreg      void 
  8786 ;; Registers used:
  8787 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8788 ;; Tracked objects:
  8789 ;;		On entry : 0/0
  8790 ;;		On exit  : 0/0
  8791 ;;		Unchanged: 0/0
  8792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  8793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8794 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8795 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8796 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  8797 ;;Total ram usage:        4 bytes
  8798 ;; Hardware stack levels used:    1
  8799 ;; Hardware stack levels required when called:    2
  8800 ;; This function calls:
  8801 ;;		_CheckLineFault
  8802 ;;		_InitEarthLeakage
  8803 ;;		_ProcessRXFrame
  8804 ;;		_ReadAnalogVoltage
  8805 ;;		_ReadEarthLeakage
  8806 ;;		_ReadKeySwitch
  8807 ;;		_SetCommsLow
  8808 ;;		i2_SetCommsHigh
  8809 ;; This function is called by:
  8810 ;;		_isr
  8811 ;; This function uses a non-reentrant model
  8812 ;;
  8813                           
  8814                           	psect	text54
  8815  0000D4                     __ptext54:
  8816                           	opt stack 0
  8817  0000D4                     _BoosterDataCommandComms:
  8818                           	opt stack 21
  8819                           
  8820                           ;boostercomms.c: 49: static unsigned short counterCommsStatusUSS;
  8821                           ;boostercomms.c: 50: static unsigned short counterSyncStatusUSS;
  8822                           ;boostercomms.c: 51: static unsigned char commsBitsSentUCS;
  8823                           ;boostercomms.c: 52: static unsigned char framesReceivedPhaseUCS;
  8824                           ;boostercomms.c: 54: unsigned short commsADCValueUS;
  8825                           ;boostercomms.c: 55: static unsigned char syncModeUCS;
  8826                           ;boostercomms.c: 56: static unsigned char bitsReadUCS;
  8827                           ;boostercomms.c: 57: static unsigned char lvlCountUCS;
  8828                           ;boostercomms.c: 58: static unsigned short recvFrameUSS;
  8829                           
  8830                           ;incstack = 0
  8831  0000D4  4A39               	infsnz	BoosterDataCommandComms@counterCommsStatusUSS,f,c
  8832  0000D6  2A3A               	incf	BoosterDataCommandComms@counterCommsStatusUSS+1,f,c
  8833                           
  8834                           ;boostercomms.c: 64: counterSyncStatusUSS++;
  8835  0000D8  4A3B               	infsnz	BoosterDataCommandComms@counterSyncStatusUSS,f,c
  8836  0000DA  2A3C               	incf	BoosterDataCommandComms@counterSyncStatusUSS+1,f,c
  8837                           
  8838                           ;boostercomms.c: 65: switch(commsStatusUCG){
  8839  0000DC  D319               	goto	i2l5749
  8840  0000DE                     i2l269:
  8841                           
  8842                           ;boostercomms.c: 69: if(!(statusFlagsUSLG & 0b000000000000000000001000)){
  8843  0000DE  B636               	btfsc	_statusFlagsUSLG,3,c	;volatile
  8844  0000E0  D008               	goto	i2l270
  8845                           
  8846                           ;boostercomms.c: 70: statusFlagsUSLG |= 0b000000000000000000001000;
  8847  0000E2  8636               	bsf	_statusFlagsUSLG,3,c	;volatile
  8848                           
  8849                           ;boostercomms.c: 71: counterCommsStatusUSS = 0;
  8850  0000E4  0E00               	movlw	0
  8851  0000E6  6E3A               	movwf	BoosterDataCommandComms@counterCommsStatusUSS+1,c
  8852  0000E8  0E00               	movlw	0
  8853  0000EA  6E39               	movwf	BoosterDataCommandComms@counterCommsStatusUSS,c
  8854                           
  8855                           ;boostercomms.c: 73: SetCommsLow();
  8856  0000EC  EC11  F018         	call	_SetCommsLow	;wreg free
  8857                           
  8858                           ;boostercomms.c: 74: }else if(((statusFlagsUSLG & 0b000000000000000000000100) && (counte
      +                          rCommsStatusUSS == 200)) ||
  8859  0000F0  0012               	return	
  8860  0000F2                     i2l270:
  8861                           
  8862                           ;boostercomms.c: 75: (!(statusFlagsUSLG & 0b000000000000000000000100) && (counterCommsSt
      +                          atusUSS == 250))){
  8863  0000F2  A436               	btfss	_statusFlagsUSLG,2,c	;volatile
  8864  0000F4  D005               	goto	i2l276
  8865  0000F6  0EC8               	movlw	200
  8866  0000F8  1839               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS,w,c
  8867  0000FA  103A               	iorwf	BoosterDataCommandComms@counterCommsStatusUSS+1,w,c
  8868  0000FC  B4D8               	btfsc	status,2,c
  8869  0000FE  D007               	goto	i2l5357
  8870  000100                     i2l276:
  8871  000100  B436               	btfsc	_statusFlagsUSLG,2,c	;volatile
  8872  000102  0012               	return	
  8873  000104  0EFA               	movlw	250
  8874  000106  1839               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS,w,c
  8875  000108  103A               	iorwf	BoosterDataCommandComms@counterCommsStatusUSS+1,w,c
  8876  00010A  A4D8               	btfss	status,2,c
  8877  00010C  0012               	return	
  8878  00010E                     i2l5357:
  8879                           
  8880                           ;boostercomms.c: 76: commsStatusUCG = 2;
  8881  00010E  0E02               	movlw	2
  8882  000110  6E53               	movwf	_commsStatusUCG,c
  8883                           
  8884                           ;boostercomms.c: 77: statusFlagsUSLG &= ~0b000000000000000000001000;
  8885  000112  9636               	bcf	_statusFlagsUSLG,3,c	;volatile
  8886                           
  8887                           ;boostercomms.c: 78: counterCommsStatusUSS = 0;
  8888  000114  0E00               	movlw	0
  8889  000116  6E3A               	movwf	BoosterDataCommandComms@counterCommsStatusUSS+1,c
  8890  000118  0E00               	movlw	0
  8891  00011A  6E39               	movwf	BoosterDataCommandComms@counterCommsStatusUSS,c
  8892                           
  8893                           ;boostercomms.c: 79: SetCommsHigh();
  8894  00011C  EC0E  F018         	call	i2_SetCommsHigh	;wreg free
  8895                           
  8896                           ;boostercomms.c: 80: }
  8897                           ;boostercomms.c: 81: break;
  8898  000120  0012               	return	
  8899  000122                     i2l278:
  8900                           
  8901                           ;boostercomms.c: 83: if(!(statusFlagsUSLG & 0b000000000000000000001000)){
  8902  000122  B636               	btfsc	_statusFlagsUSLG,3,c	;volatile
  8903  000124  D00E               	goto	i2l5373
  8904                           
  8905                           ;boostercomms.c: 84: statusFlagsUSLG |= 0b000000000000000000001000;
  8906  000126  8636               	bsf	_statusFlagsUSLG,3,c	;volatile
  8907                           
  8908                           ;boostercomms.c: 85: if(statusFlagsUSLG & 0b000000000000000000000100)
  8909  000128  A436               	btfss	_statusFlagsUSLG,2,c	;volatile
  8910  00012A  D008               	goto	i2l5371
  8911                           
  8912                           ;boostercomms.c: 86: commsTXBitsUSLG <<= 21;
  8913  00012C  0100               	movlb	0	; () banked
  8914  00012E  0E15               	movlw	21
  8915  000130                     i2u549_45:
  8916  000130  90D8               	bcf	status,0,c
  8917  000132  37CF               	rlcf	_commsTXBitsUSLG& (0+255),f,b
  8918  000134  37D0               	rlcf	(_commsTXBitsUSLG+1)& (0+255),f,b
  8919  000136  37D1               	rlcf	(_commsTXBitsUSLG+2)& (0+255),f,b
  8920  000138  2EE8               	decfsz	wreg,f,c
  8921  00013A  D7FA               	goto	i2u549_45
  8922  00013C                     i2l5371:
  8923                           
  8924                           ;boostercomms.c: 87: commsBitsSentUCS = 0;
  8925  00013C  0E00               	movlw	0
  8926  00013E  6E46               	movwf	BoosterDataCommandComms@commsBitsSentUCS,c
  8927                           
  8928                           ;boostercomms.c: 88: }else{
  8929  000140  0012               	return	
  8930  000142                     i2l5373:
  8931                           
  8932                           ;boostercomms.c: 89: if(counterCommsStatusUSS == 65){
  8933  000142  0E41               	movlw	65
  8934  000144  1839               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS,w,c
  8935  000146  103A               	iorwf	BoosterDataCommandComms@counterCommsStatusUSS+1,w,c
  8936  000148  A4D8               	btfss	status,2,c
  8937  00014A  D006               	goto	i2l5379
  8938                           
  8939                           ;boostercomms.c: 90: if(!(commsTXBitsUSLG & 0b100000000000000000000000))
  8940  00014C  0100               	movlb	0	; () banked
  8941  00014E  BFD1               	btfsc	(_commsTXBitsUSLG+2)& (0+255),7,b
  8942  000150  0012               	return	
  8943                           
  8944                           ; BSR set to: 0
  8945                           ;boostercomms.c: 91: SetCommsLow();
  8946  000152  EC11  F018         	call	_SetCommsLow	;wreg free
  8947                           
  8948                           ;boostercomms.c: 92: }else if(counterCommsStatusUSS == 75){
  8949  000156  0012               	return	
  8950  000158                     i2l5379:
  8951  000158  0E4B               	movlw	75
  8952  00015A  1839               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS,w,c
  8953  00015C  103A               	iorwf	BoosterDataCommandComms@counterCommsStatusUSS+1,w,c
  8954  00015E  A4D8               	btfss	status,2,c
  8955  000160  D003               	goto	i2l5383
  8956                           
  8957                           ;boostercomms.c: 93: SetCommsLow();
  8958  000162  EC11  F018         	call	_SetCommsLow	;wreg free
  8959                           
  8960                           ;boostercomms.c: 94: }else if(counterCommsStatusUSS == 100){
  8961  000166  0012               	return	
  8962  000168                     i2l5383:
  8963  000168  0E64               	movlw	100
  8964  00016A  1839               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS,w,c
  8965  00016C  103A               	iorwf	BoosterDataCommandComms@counterCommsStatusUSS+1,w,c
  8966  00016E  A4D8               	btfss	status,2,c
  8967  000170  0012               	return	
  8968                           
  8969                           ;boostercomms.c: 95: commsTXBitsUSLG <<= 1;
  8970  000172  0100               	movlb	0	; () banked
  8971  000174  90D8               	bcf	status,0,c
  8972  000176  37CF               	rlcf	_commsTXBitsUSLG& (0+255),f,b
  8973  000178  37D0               	rlcf	(_commsTXBitsUSLG+1)& (0+255),f,b
  8974  00017A  37D1               	rlcf	(_commsTXBitsUSLG+2)& (0+255),f,b
  8975                           
  8976                           ;boostercomms.c: 96: commsBitsSentUCS++;
  8977  00017C  2A46               	incf	BoosterDataCommandComms@commsBitsSentUCS,f,c
  8978                           
  8979                           ; BSR set to: 0
  8980                           ;boostercomms.c: 97: SetCommsHigh();
  8981  00017E  EC0E  F018         	call	i2_SetCommsHigh	;wreg free
  8982                           
  8983                           ;boostercomms.c: 98: if((statusFlagsUSLG & 0b000000000000000000000100) && (commsBitsSent
      +                          UCS == 3)){
  8984  000182  A436               	btfss	_statusFlagsUSLG,2,c	;volatile
  8985  000184  D008               	goto	i2l288
  8986  000186  0E03               	movlw	3
  8987  000188  1846               	xorwf	BoosterDataCommandComms@commsBitsSentUCS,w,c
  8988  00018A  A4D8               	btfss	status,2,c
  8989  00018C  D004               	goto	i2l288
  8990                           
  8991                           ;boostercomms.c: 99: commsStatusUCG = 4;
  8992  00018E  0E04               	movlw	4
  8993  000190  6E53               	movwf	_commsStatusUCG,c
  8994                           
  8995                           ;boostercomms.c: 100: statusFlagsUSLG &= ~0b000000000000000000001000;
  8996  000192  9636               	bcf	_statusFlagsUSLG,3,c	;volatile
  8997                           
  8998                           ;boostercomms.c: 101: }else if(!(statusFlagsUSLG & 0b000000000000000000000100) && (comms
      +                          BitsSentUCS == 24)){
  8999  000194  D00D               	goto	i2l5407
  9000  000196                     i2l288:
  9001  000196  B436               	btfsc	_statusFlagsUSLG,2,c	;volatile
  9002  000198  D00B               	goto	i2l5407
  9003  00019A  0E18               	movlw	24
  9004  00019C  1846               	xorwf	BoosterDataCommandComms@commsBitsSentUCS,w,c
  9005  00019E  A4D8               	btfss	status,2,c
  9006  0001A0  D007               	goto	i2l5407
  9007                           
  9008                           ;boostercomms.c: 102: commsStatusUCG = 3;
  9009  0001A2  0E03               	movlw	3
  9010  0001A4  6E53               	movwf	_commsStatusUCG,c
  9011                           
  9012                           ;boostercomms.c: 103: statusFlagsUSLG &= ~0b000000000000000000001000;
  9013  0001A6  9636               	bcf	_statusFlagsUSLG,3,c	;volatile
  9014                           
  9015                           ;boostercomms.c: 104: framesReceivedPhaseUCS = 0;
  9016  0001A8  0E00               	movlw	0
  9017  0001AA  6E47               	movwf	BoosterDataCommandComms@framesReceivedPhaseUCS,c
  9018                           
  9019                           ;boostercomms.c: 105: syncModeUCS = 5;
  9020  0001AC  0E05               	movlw	5
  9021  0001AE  6E49               	movwf	BoosterDataCommandComms@syncModeUCS,c
  9022  0001B0                     i2l5407:
  9023                           
  9024                           ;boostercomms.c: 106: }
  9025                           ;boostercomms.c: 107: counterCommsStatusUSS = 0;
  9026  0001B0  0E00               	movlw	0
  9027  0001B2  6E3A               	movwf	BoosterDataCommandComms@counterCommsStatusUSS+1,c
  9028  0001B4  0E00               	movlw	0
  9029  0001B6  6E39               	movwf	BoosterDataCommandComms@counterCommsStatusUSS,c
  9030                           
  9031                           ;boostercomms.c: 108: }
  9032                           ;boostercomms.c: 109: }
  9033                           ;boostercomms.c: 110: break;
  9034  0001B8  0012               	return	
  9035  0001BA                     i2l5409:
  9036                           
  9037                           ;boostercomms.c: 112: commsADCValueUS = ReadAnalogVoltage(2);
  9038  0001BA  0E02               	movlw	2
  9039  0001BC  EC36  F015         	call	_ReadAnalogVoltage
  9040  0001C0  C001  F014         	movff	?_ReadAnalogVoltage,BoosterDataCommandComms@commsADCValueUS
  9041  0001C4  C002  F015         	movff	?_ReadAnalogVoltage+1,BoosterDataCommandComms@commsADCValueUS+1
  9042                           
  9043                           ;boostercomms.c: 113: switch(syncModeUCS){
  9044  0001C8  D10C               	goto	i2l5525
  9045  0001CA                     i2l5411:
  9046                           
  9047                           ;boostercomms.c: 115: if(counterCommsStatusUSS > (75 - 10) && (framesReceivedPhaseUCS ==
      +                           0))
  9048  0001CA  503A               	movf	BoosterDataCommandComms@counterCommsStatusUSS+1,w,c
  9049  0001CC  E104               	bnz	i2u558_40
  9050  0001CE  0E42               	movlw	66
  9051  0001D0  5C39               	subwf	BoosterDataCommandComms@counterCommsStatusUSS,w,c
  9052  0001D2  A0D8               	btfss	status,0,c
  9053  0001D4  D006               	goto	i2l5417
  9054  0001D6                     i2u558_40:
  9055  0001D6  5047               	movf	BoosterDataCommandComms@framesReceivedPhaseUCS,w,c
  9056  0001D8  A4D8               	btfss	status,2,c
  9057  0001DA  D003               	goto	i2l5417
  9058                           
  9059                           ;boostercomms.c: 116: syncModeUCS = 0;
  9060  0001DC  0E00               	movlw	0
  9061  0001DE  6E49               	movwf	BoosterDataCommandComms@syncModeUCS,c
  9062  0001E0  0012               	return	
  9063  0001E2                     i2l5417:
  9064                           
  9065                           ;boostercomms.c: 117: else if(framesReceivedPhaseUCS != 0)
  9066  0001E2  5047               	movf	BoosterDataCommandComms@framesReceivedPhaseUCS,w,c
  9067  0001E4  B4D8               	btfsc	status,2,c
  9068  0001E6  0012               	return	
  9069                           
  9070                           ;boostercomms.c: 118: syncModeUCS = 0;
  9071  0001E8  0E00               	movlw	0
  9072  0001EA  6E49               	movwf	BoosterDataCommandComms@syncModeUCS,c
  9073                           
  9074                           ;boostercomms.c: 119: break;
  9075  0001EC  0012               	return	
  9076  0001EE                     i2l5421:
  9077                           
  9078                           ;boostercomms.c: 123: if((commsADCValueUS-commsOffsetADCValueUS) > 310){
  9079  0001EE  C03D  F012         	movff	_commsOffsetADCValueUS,??_BoosterDataCommandComms
  9080  0001F2  C03E  F013         	movff	_commsOffsetADCValueUS+1,??_BoosterDataCommandComms+1
  9081  0001F6  1E12               	comf	??_BoosterDataCommandComms,f,c
  9082  0001F8  1E13               	comf	??_BoosterDataCommandComms+1,f,c
  9083  0001FA  4A12               	infsnz	??_BoosterDataCommandComms,f,c
  9084  0001FC  2A13               	incf	??_BoosterDataCommandComms+1,f,c
  9085  0001FE  5014               	movf	BoosterDataCommandComms@commsADCValueUS,w,c
  9086  000200  2612               	addwf	??_BoosterDataCommandComms,f,c
  9087  000202  5015               	movf	BoosterDataCommandComms@commsADCValueUS+1,w,c
  9088  000204  2213               	addwfc	??_BoosterDataCommandComms+1,f,c
  9089  000206  0E37               	movlw	55
  9090  000208  5C12               	subwf	??_BoosterDataCommandComms,w,c
  9091  00020A  0E01               	movlw	1
  9092  00020C  5813               	subwfb	??_BoosterDataCommandComms+1,w,c
  9093  00020E  A0D8               	btfss	status,0,c
  9094  000210  D00A               	goto	i2l5431
  9095                           
  9096                           ;boostercomms.c: 124: syncModeUCS = 1;
  9097  000212  0E01               	movlw	1
  9098  000214  6E49               	movwf	BoosterDataCommandComms@syncModeUCS,c
  9099                           
  9100                           ;boostercomms.c: 125: statusFlagsUSLG |= 0b000000000000001000000000;
  9101  000216  8237               	bsf	_statusFlagsUSLG+1,1,c	;volatile
  9102                           
  9103                           ;boostercomms.c: 126: counterSyncStatusUSS = 0;
  9104  000218  0E00               	movlw	0
  9105  00021A  6E3C               	movwf	BoosterDataCommandComms@counterSyncStatusUSS+1,c
  9106  00021C  0E00               	movlw	0
  9107  00021E  6E3B               	movwf	BoosterDataCommandComms@counterSyncStatusUSS,c
  9108                           
  9109                           ;boostercomms.c: 127: lvlCountUCS = 1;
  9110  000220  0E01               	movlw	1
  9111  000222  6E48               	movwf	BoosterDataCommandComms@lvlCountUCS,c
  9112                           
  9113                           ;boostercomms.c: 128: }else if(counterCommsStatusUSS > (75 + 50))
  9114  000224  0012               	return	
  9115  000226                     i2l5431:
  9116  000226  503A               	movf	BoosterDataCommandComms@counterCommsStatusUSS+1,w,c
  9117  000228  E104               	bnz	i2u562_40
  9118  00022A  0E7E               	movlw	126
  9119  00022C  5C39               	subwf	BoosterDataCommandComms@counterCommsStatusUSS,w,c
  9120  00022E  A0D8               	btfss	status,0,c
  9121  000230  0012               	return	
  9122  000232                     i2u562_40:
  9123                           
  9124                           ;boostercomms.c: 129: syncModeUCS = 4;
  9125  000232  0E04               	movlw	4
  9126  000234  6E49               	movwf	BoosterDataCommandComms@syncModeUCS,c
  9127                           
  9128                           ;boostercomms.c: 130: break;
  9129  000236  0012               	return	
  9130  000238                     i2l5435:
  9131                           
  9132                           ;boostercomms.c: 132: if((commsADCValueUS-commsOffsetADCValueUS) > 310)
  9133  000238  C03D  F012         	movff	_commsOffsetADCValueUS,??_BoosterDataCommandComms
  9134  00023C  C03E  F013         	movff	_commsOffsetADCValueUS+1,??_BoosterDataCommandComms+1
  9135  000240  1E12               	comf	??_BoosterDataCommandComms,f,c
  9136  000242  1E13               	comf	??_BoosterDataCommandComms+1,f,c
  9137  000244  4A12               	infsnz	??_BoosterDataCommandComms,f,c
  9138  000246  2A13               	incf	??_BoosterDataCommandComms+1,f,c
  9139  000248  5014               	movf	BoosterDataCommandComms@commsADCValueUS,w,c
  9140  00024A  2612               	addwf	??_BoosterDataCommandComms,f,c
  9141  00024C  5015               	movf	BoosterDataCommandComms@commsADCValueUS+1,w,c
  9142  00024E  2213               	addwfc	??_BoosterDataCommandComms+1,f,c
  9143  000250  0E37               	movlw	55
  9144  000252  5C12               	subwf	??_BoosterDataCommandComms,w,c
  9145  000254  0E01               	movlw	1
  9146  000256  5813               	subwfb	??_BoosterDataCommandComms+1,w,c
  9147  000258  B0D8               	btfsc	status,0,c
  9148                           
  9149                           ;boostercomms.c: 133: lvlCountUCS++;
  9150  00025A  2A48               	incf	BoosterDataCommandComms@lvlCountUCS,f,c
  9151                           
  9152                           ;boostercomms.c: 134: if((commsADCValueUS-commsOffsetADCValueUS) > 620){
  9153  00025C  C03D  F012         	movff	_commsOffsetADCValueUS,??_BoosterDataCommandComms
  9154  000260  C03E  F013         	movff	_commsOffsetADCValueUS+1,??_BoosterDataCommandComms+1
  9155  000264  1E12               	comf	??_BoosterDataCommandComms,f,c
  9156  000266  1E13               	comf	??_BoosterDataCommandComms+1,f,c
  9157  000268  4A12               	infsnz	??_BoosterDataCommandComms,f,c
  9158  00026A  2A13               	incf	??_BoosterDataCommandComms+1,f,c
  9159  00026C  5014               	movf	BoosterDataCommandComms@commsADCValueUS,w,c
  9160  00026E  2612               	addwf	??_BoosterDataCommandComms,f,c
  9161  000270  5015               	movf	BoosterDataCommandComms@commsADCValueUS+1,w,c
  9162  000272  2213               	addwfc	??_BoosterDataCommandComms+1,f,c
  9163  000274  0E6D               	movlw	109
  9164  000276  5C12               	subwf	??_BoosterDataCommandComms,w,c
  9165  000278  0E02               	movlw	2
  9166  00027A  5813               	subwfb	??_BoosterDataCommandComms+1,w,c
  9167  00027C  A0D8               	btfss	status,0,c
  9168  00027E  D003               	goto	i2l5445
  9169                           
  9170                           ;boostercomms.c: 135: syncModeUCS = 4;
  9171  000280  0E04               	movlw	4
  9172  000282  6E49               	movwf	BoosterDataCommandComms@syncModeUCS,c
  9173                           
  9174                           ;boostercomms.c: 136: statusFlagsUSLG |= 0b000000000000010000000000;
  9175  000284  8437               	bsf	_statusFlagsUSLG+1,2,c	;volatile
  9176  000286                     i2l5445:
  9177                           
  9178                           ;boostercomms.c: 137: }
  9179                           ;boostercomms.c: 138: if(counterSyncStatusUSS == 80){
  9180  000286  0E50               	movlw	80
  9181  000288  183B               	xorwf	BoosterDataCommandComms@counterSyncStatusUSS,w,c
  9182  00028A  103C               	iorwf	BoosterDataCommandComms@counterSyncStatusUSS+1,w,c
  9183  00028C  A4D8               	btfss	status,2,c
  9184  00028E  0012               	return	
  9185                           
  9186                           ;boostercomms.c: 139: if(lvlCountUCS < 80 - 10){
  9187  000290  0E46               	movlw	70
  9188  000292  6048               	cpfslt	BoosterDataCommandComms@lvlCountUCS,c
  9189  000294  D005               	goto	i2l5455
  9190                           
  9191                           ;boostercomms.c: 140: LATAbits.LATA6 = 1;
  9192  000296  8C89               	bsf	3977,6,c	;volatile
  9193                           
  9194                           ;boostercomms.c: 141: syncModeUCS = 4;
  9195  000298  0E04               	movlw	4
  9196  00029A  6E49               	movwf	BoosterDataCommandComms@syncModeUCS,c
  9197                           
  9198                           ;boostercomms.c: 142: statusFlagsUSLG |= 0b000000000000000100000000;
  9199  00029C  8037               	bsf	_statusFlagsUSLG+1,0,c	;volatile
  9200                           
  9201                           ;boostercomms.c: 143: }else{
  9202  00029E  0012               	return	
  9203  0002A0                     i2l5455:
  9204                           
  9205                           ;boostercomms.c: 144: syncModeUCS = 2;
  9206  0002A0  0E02               	movlw	2
  9207  0002A2  6E49               	movwf	BoosterDataCommandComms@syncModeUCS,c
  9208                           
  9209                           ;boostercomms.c: 145: counterSyncStatusUSS = 0;
  9210  0002A4  0E00               	movlw	0
  9211  0002A6  6E3C               	movwf	BoosterDataCommandComms@counterSyncStatusUSS+1,c
  9212  0002A8  0E00               	movlw	0
  9213  0002AA  6E3B               	movwf	BoosterDataCommandComms@counterSyncStatusUSS,c
  9214                           
  9215                           ;boostercomms.c: 146: recvFrameUSS = 0;
  9216  0002AC  0E00               	movlw	0
  9217  0002AE  0100               	movlb	0	; () banked
  9218  0002B0  6FD3               	movwf	(BoosterDataCommandComms@recvFrameUSS+1)& (0+255),b
  9219  0002B2  0E00               	movlw	0
  9220  0002B4  6FD2               	movwf	BoosterDataCommandComms@recvFrameUSS& (0+255),b
  9221                           
  9222                           ;boostercomms.c: 147: bitsReadUCS = 0;
  9223  0002B6  0E00               	movlw	0
  9224  0002B8  6E43               	movwf	BoosterDataCommandComms@bitsReadUCS,c
  9225                           
  9226                           ;boostercomms.c: 148: lvlCountUCS = 0;
  9227  0002BA  0E00               	movlw	0
  9228  0002BC  6E48               	movwf	BoosterDataCommandComms@lvlCountUCS,c
  9229                           
  9230                           ; BSR set to: 0
  9231                           ;boostercomms.c: 149: }
  9232                           ;boostercomms.c: 150: }
  9233                           ;boostercomms.c: 151: break;
  9234                           
  9235                           ; BSR set to: 0
  9236  0002BE  0012               	return	
  9237  0002C0                     i2l5457:
  9238                           
  9239                           ;boostercomms.c: 153: if((commsADCValueUS-commsOffsetADCValueUS) > 310)
  9240  0002C0  C03D  F012         	movff	_commsOffsetADCValueUS,??_BoosterDataCommandComms
  9241  0002C4  C03E  F013         	movff	_commsOffsetADCValueUS+1,??_BoosterDataCommandComms+1
  9242  0002C8  1E12               	comf	??_BoosterDataCommandComms,f,c
  9243  0002CA  1E13               	comf	??_BoosterDataCommandComms+1,f,c
  9244  0002CC  4A12               	infsnz	??_BoosterDataCommandComms,f,c
  9245  0002CE  2A13               	incf	??_BoosterDataCommandComms+1,f,c
  9246  0002D0  5014               	movf	BoosterDataCommandComms@commsADCValueUS,w,c
  9247  0002D2  2612               	addwf	??_BoosterDataCommandComms,f,c
  9248  0002D4  5015               	movf	BoosterDataCommandComms@commsADCValueUS+1,w,c
  9249  0002D6  2213               	addwfc	??_BoosterDataCommandComms+1,f,c
  9250  0002D8  0E37               	movlw	55
  9251  0002DA  5C12               	subwf	??_BoosterDataCommandComms,w,c
  9252  0002DC  0E01               	movlw	1
  9253  0002DE  5813               	subwfb	??_BoosterDataCommandComms+1,w,c
  9254  0002E0  B0D8               	btfsc	status,0,c
  9255                           
  9256                           ;boostercomms.c: 154: lvlCountUCS++;
  9257  0002E2  2A48               	incf	BoosterDataCommandComms@lvlCountUCS,f,c
  9258                           
  9259                           ;boostercomms.c: 155: if(counterSyncStatusUSS == 60){
  9260  0002E4  0E3C               	movlw	60
  9261  0002E6  183B               	xorwf	BoosterDataCommandComms@counterSyncStatusUSS,w,c
  9262  0002E8  103C               	iorwf	BoosterDataCommandComms@counterSyncStatusUSS+1,w,c
  9263  0002EA  A4D8               	btfss	status,2,c
  9264  0002EC  0012               	return	
  9265                           
  9266                           ;boostercomms.c: 156: recvFrameUSS <<= 1;
  9267  0002EE  0100               	movlb	0	; () banked
  9268  0002F0  90D8               	bcf	status,0,c
  9269  0002F2  37D2               	rlcf	BoosterDataCommandComms@recvFrameUSS& (0+255),f,b
  9270  0002F4  37D3               	rlcf	(BoosterDataCommandComms@recvFrameUSS+1)& (0+255),f,b
  9271                           
  9272                           ; BSR set to: 0
  9273                           ;boostercomms.c: 157: if((lvlCountUCS < 10) || (lvlCountUCS > 50)){
  9274  0002F6  0E09               	movlw	9
  9275  0002F8  6448               	cpfsgt	BoosterDataCommandComms@lvlCountUCS,c
  9276  0002FA  D003               	goto	i2l5469
  9277                           
  9278                           ; BSR set to: 0
  9279  0002FC  0E32               	movlw	50
  9280  0002FE  6448               	cpfsgt	BoosterDataCommandComms@lvlCountUCS,c
  9281  000300  D004               	goto	i2l5473
  9282  000302                     i2l5469:
  9283                           
  9284                           ; BSR set to: 0
  9285                           ;boostercomms.c: 158: syncModeUCS = 4;
  9286  000302  0E04               	movlw	4
  9287  000304  6E49               	movwf	BoosterDataCommandComms@syncModeUCS,c
  9288                           
  9289                           ; BSR set to: 0
  9290                           ;boostercomms.c: 159: statusFlagsUSLG |= 0b000000000000000100000000;
  9291  000306  8037               	bsf	_statusFlagsUSLG+1,0,c	;volatile
  9292                           
  9293                           ;boostercomms.c: 160: }else if(lvlCountUCS < 30){
  9294  000308  D005               	goto	i2l5477
  9295  00030A                     i2l5473:
  9296                           
  9297                           ; BSR set to: 0
  9298  00030A  0E1E               	movlw	30
  9299  00030C  6048               	cpfslt	BoosterDataCommandComms@lvlCountUCS,c
  9300  00030E  D002               	goto	i2l5477
  9301                           
  9302                           ; BSR set to: 0
  9303                           ;boostercomms.c: 161: recvFrameUSS |= 1;
  9304  000310  0100               	movlb	0	; () banked
  9305  000312  81D2               	bsf	BoosterDataCommandComms@recvFrameUSS& (0+255),0,b
  9306  000314                     i2l5477:
  9307                           
  9308                           ; BSR set to: 0
  9309                           ;boostercomms.c: 162: }
  9310                           ;boostercomms.c: 163: if(++bitsReadUCS == 16)
  9311  000314  2A43               	incf	BoosterDataCommandComms@bitsReadUCS,f,c
  9312  000316  0E10               	movlw	16
  9313  000318  1843               	xorwf	BoosterDataCommandComms@bitsReadUCS,w,c
  9314  00031A  A4D8               	btfss	status,2,c
  9315  00031C  D002               	goto	i2l316
  9316                           
  9317                           ; BSR set to: 0
  9318                           ;boostercomms.c: 164: syncModeUCS = 3;
  9319  00031E  0E03               	movlw	3
  9320  000320  6E49               	movwf	BoosterDataCommandComms@syncModeUCS,c
  9321  000322                     i2l316:
  9322                           
  9323                           ; BSR set to: 0
  9324                           ;boostercomms.c: 165: lvlCountUCS = 0;
  9325  000322  0E00               	movlw	0
  9326  000324  6E48               	movwf	BoosterDataCommandComms@lvlCountUCS,c
  9327                           
  9328                           ;boostercomms.c: 166: counterSyncStatusUSS = 0;
  9329  000326  0E00               	movlw	0
  9330  000328  6E3C               	movwf	BoosterDataCommandComms@counterSyncStatusUSS+1,c
  9331  00032A  0E00               	movlw	0
  9332  00032C  6E3B               	movwf	BoosterDataCommandComms@counterSyncStatusUSS,c
  9333                           
  9334                           ; BSR set to: 0
  9335                           ;boostercomms.c: 167: }
  9336                           ;boostercomms.c: 168: break;
  9337  00032E  0012               	return	
  9338  000330                     i2l5481:
  9339                           
  9340                           ;boostercomms.c: 170: if((commsADCValueUS-commsOffsetADCValueUS) > 310)
  9341  000330  C03D  F012         	movff	_commsOffsetADCValueUS,??_BoosterDataCommandComms
  9342  000334  C03E  F013         	movff	_commsOffsetADCValueUS+1,??_BoosterDataCommandComms+1
  9343  000338  1E12               	comf	??_BoosterDataCommandComms,f,c
  9344  00033A  1E13               	comf	??_BoosterDataCommandComms+1,f,c
  9345  00033C  4A12               	infsnz	??_BoosterDataCommandComms,f,c
  9346  00033E  2A13               	incf	??_BoosterDataCommandComms+1,f,c
  9347  000340  5014               	movf	BoosterDataCommandComms@commsADCValueUS,w,c
  9348  000342  2612               	addwf	??_BoosterDataCommandComms,f,c
  9349  000344  5015               	movf	BoosterDataCommandComms@commsADCValueUS+1,w,c
  9350  000346  2213               	addwfc	??_BoosterDataCommandComms+1,f,c
  9351  000348  0E37               	movlw	55
  9352  00034A  5C12               	subwf	??_BoosterDataCommandComms,w,c
  9353  00034C  0E01               	movlw	1
  9354  00034E  5813               	subwfb	??_BoosterDataCommandComms+1,w,c
  9355  000350  B0D8               	btfsc	status,0,c
  9356                           
  9357                           ;boostercomms.c: 171: lvlCountUCS++;
  9358  000352  2A48               	incf	BoosterDataCommandComms@lvlCountUCS,f,c
  9359                           
  9360                           ;boostercomms.c: 172: if((commsADCValueUS-commsOffsetADCValueUS) > 620){
  9361  000354  C03D  F012         	movff	_commsOffsetADCValueUS,??_BoosterDataCommandComms
  9362  000358  C03E  F013         	movff	_commsOffsetADCValueUS+1,??_BoosterDataCommandComms+1
  9363  00035C  1E12               	comf	??_BoosterDataCommandComms,f,c
  9364  00035E  1E13               	comf	??_BoosterDataCommandComms+1,f,c
  9365  000360  4A12               	infsnz	??_BoosterDataCommandComms,f,c
  9366  000362  2A13               	incf	??_BoosterDataCommandComms+1,f,c
  9367  000364  5014               	movf	BoosterDataCommandComms@commsADCValueUS,w,c
  9368  000366  2612               	addwf	??_BoosterDataCommandComms,f,c
  9369  000368  5015               	movf	BoosterDataCommandComms@commsADCValueUS+1,w,c
  9370  00036A  2213               	addwfc	??_BoosterDataCommandComms+1,f,c
  9371  00036C  0E6D               	movlw	109
  9372  00036E  5C12               	subwf	??_BoosterDataCommandComms,w,c
  9373  000370  0E02               	movlw	2
  9374  000372  5813               	subwfb	??_BoosterDataCommandComms+1,w,c
  9375  000374  A0D8               	btfss	status,0,c
  9376  000376  D003               	goto	i2l5491
  9377                           
  9378                           ;boostercomms.c: 173: syncModeUCS = 4;
  9379  000378  0E04               	movlw	4
  9380  00037A  6E49               	movwf	BoosterDataCommandComms@syncModeUCS,c
  9381                           
  9382                           ;boostercomms.c: 174: statusFlagsUSLG |= 0b000000000000010000000000;
  9383  00037C  8437               	bsf	_statusFlagsUSLG+1,2,c	;volatile
  9384  00037E                     i2l5491:
  9385                           
  9386                           ;boostercomms.c: 175: }
  9387                           ;boostercomms.c: 176: if(counterSyncStatusUSS == 110){
  9388  00037E  0E6E               	movlw	110
  9389  000380  183B               	xorwf	BoosterDataCommandComms@counterSyncStatusUSS,w,c
  9390  000382  103C               	iorwf	BoosterDataCommandComms@counterSyncStatusUSS+1,w,c
  9391  000384  A4D8               	btfss	status,2,c
  9392  000386  0012               	return	
  9393                           
  9394                           ;boostercomms.c: 177: if(lvlCountUCS < 110 - 10)
  9395  000388  0E64               	movlw	100
  9396  00038A  6048               	cpfslt	BoosterDataCommandComms@lvlCountUCS,c
  9397  00038C  D001               	goto	i2l5497
  9398                           
  9399                           ;boostercomms.c: 178: statusFlagsUSLG |= 0b000000000000000100000000;
  9400  00038E  8037               	bsf	_statusFlagsUSLG+1,0,c	;volatile
  9401  000390                     i2l5497:
  9402                           
  9403                           ;boostercomms.c: 179: syncModeUCS = 4;
  9404  000390  0E04               	movlw	4
  9405  000392  6E49               	movwf	BoosterDataCommandComms@syncModeUCS,c
  9406                           
  9407                           ;boostercomms.c: 180: }
  9408                           ;boostercomms.c: 181: break;
  9409  000394  0012               	return	
  9410  000396                     i2l5499:
  9411                           
  9412                           ;boostercomms.c: 183: if(counterCommsStatusUSS == 1300){
  9413  000396  0E14               	movlw	20
  9414  000398  1839               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS,w,c
  9415  00039A  E103               	bnz	i2u577_41
  9416  00039C  0E05               	movlw	5
  9417  00039E  183A               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS+1,w,c
  9418  0003A0  A4D8               	btfss	status,2,c
  9419  0003A2                     i2u577_41:
  9420  0003A2  0012               	return	
  9421                           
  9422                           ;boostercomms.c: 184: ProcessRXFrame(recvFrameUSS, framesReceivedPhaseUCS+1);
  9423  0003A4  C0D2  F007         	movff	BoosterDataCommandComms@recvFrameUSS,ProcessRXFrame@recvFrameUS
  9424  0003A8  C0D3  F008         	movff	BoosterDataCommandComms@recvFrameUSS+1,ProcessRXFrame@recvFrameUS+1
  9425  0003AC  2847               	incf	BoosterDataCommandComms@framesReceivedPhaseUCS,w,c
  9426  0003AE  6E09               	movwf	ProcessRXFrame@frameNumUC,c
  9427  0003B0  ECA7  F005         	call	_ProcessRXFrame	;wreg free
  9428                           
  9429                           ;boostercomms.c: 185: if(statusFlagsUSLG & 0b000000000000000000000100){
  9430  0003B4  A436               	btfss	_statusFlagsUSLG,2,c	;volatile
  9431  0003B6  D003               	goto	i2l5507
  9432                           
  9433                           ;boostercomms.c: 186: commsStatusUCG = 4;
  9434  0003B8  0E04               	movlw	4
  9435  0003BA  6E53               	movwf	_commsStatusUCG,c
  9436                           
  9437                           ;boostercomms.c: 187: }else{
  9438  0003BC  D004               	goto	i2l5511
  9439  0003BE                     i2l5507:
  9440                           
  9441                           ;boostercomms.c: 188: commsStatusUCG = 6;
  9442  0003BE  0E06               	movlw	6
  9443  0003C0  6E53               	movwf	_commsStatusUCG,c
  9444                           
  9445                           ;boostercomms.c: 189: SetCommsLow();
  9446  0003C2  EC11  F018         	call	_SetCommsLow	;wreg free
  9447  0003C6                     i2l5511:
  9448                           
  9449                           ;boostercomms.c: 190: }
  9450                           ;boostercomms.c: 191: counterCommsStatusUSS = 0;
  9451  0003C6  0E00               	movlw	0
  9452  0003C8  6E3A               	movwf	BoosterDataCommandComms@counterCommsStatusUSS+1,c
  9453  0003CA  0E00               	movlw	0
  9454  0003CC  6E39               	movwf	BoosterDataCommandComms@counterCommsStatusUSS,c
  9455                           
  9456                           ;boostercomms.c: 192: recvFrameUSS = 0;
  9457  0003CE  0E00               	movlw	0
  9458  0003D0  0100               	movlb	0	; () banked
  9459  0003D2  6FD3               	movwf	(BoosterDataCommandComms@recvFrameUSS+1)& (0+255),b
  9460  0003D4  0E00               	movlw	0
  9461  0003D6  6FD2               	movwf	BoosterDataCommandComms@recvFrameUSS& (0+255),b
  9462                           
  9463                           ; BSR set to: 0
  9464                           ;boostercomms.c: 193: framesReceivedPhaseUCS++;
  9465  0003D8  2A47               	incf	BoosterDataCommandComms@framesReceivedPhaseUCS,f,c
  9466                           
  9467                           ; BSR set to: 0
  9468                           ;boostercomms.c: 194: statusFlagsUSLG &= ~0b000000000000001000000000;
  9469  0003DA  9237               	bcf	_statusFlagsUSLG+1,1,c	;volatile
  9470                           
  9471                           ; BSR set to: 0
  9472                           ;boostercomms.c: 195: statusFlagsUSLG &= ~0b000000000000000100000000;
  9473  0003DC  9037               	bcf	_statusFlagsUSLG+1,0,c	;volatile
  9474                           
  9475                           ; BSR set to: 0
  9476                           ;boostercomms.c: 196: statusFlagsUSLG &= ~0b000000000000010000000000;
  9477  0003DE  9437               	bcf	_statusFlagsUSLG+1,2,c	;volatile
  9478                           
  9479                           ; BSR set to: 0
  9480                           ;boostercomms.c: 199: }
  9481                           
  9482                           ; BSR set to: 0
  9483                           ;boostercomms.c: 197: }
  9484                           ;boostercomms.c: 198: break;
  9485  0003E0  0012               	return	
  9486  0003E2                     i2l5525:
  9487  0003E2  5049               	movf	BoosterDataCommandComms@syncModeUCS,w,c
  9488                           
  9489                           ; Switch size 1, requested type "space"
  9490                           ; Number of cases is 6, Range of values is 0 to 5
  9491                           ; switch strategies available:
  9492                           ; Name         Instructions Cycles
  9493                           ; simple_byte           19    10 (average)
  9494                           ;	Chosen strategy is simple_byte
  9495  0003E4  0A00               	xorlw	0	; case 0
  9496  0003E6  B4D8               	btfsc	status,2,c
  9497  0003E8  D702               	goto	i2l5421
  9498  0003EA  0A01               	xorlw	1	; case 1
  9499  0003EC  B4D8               	btfsc	status,2,c
  9500  0003EE  D724               	goto	i2l5435
  9501  0003F0  0A03               	xorlw	3	; case 2
  9502  0003F2  B4D8               	btfsc	status,2,c
  9503  0003F4  D765               	goto	i2l5457
  9504  0003F6  0A01               	xorlw	1	; case 3
  9505  0003F8  B4D8               	btfsc	status,2,c
  9506  0003FA  D79A               	goto	i2l5481
  9507  0003FC  0A07               	xorlw	7	; case 4
  9508  0003FE  B4D8               	btfsc	status,2,c
  9509  000400  D7CA               	goto	i2l5499
  9510  000402  0A01               	xorlw	1	; case 5
  9511  000404  A4D8               	btfss	status,2,c
  9512                           
  9513                           ;boostercomms.c: 200: break;
  9514  000406  0012               	return	
  9515  000408  D6E0               	goto	i2l5411
  9516  00040A                     i2l326:
  9517                           
  9518                           ;boostercomms.c: 202: if(!(statusFlagsUSLG & 0b000000000000000000001000)){
  9519  00040A  B636               	btfsc	_statusFlagsUSLG,3,c	;volatile
  9520  00040C  D004               	goto	i2l5531
  9521                           
  9522                           ;boostercomms.c: 203: statusFlagsUSLG |= 0b000000000000000000001000;
  9523  00040E  8636               	bsf	_statusFlagsUSLG,3,c	;volatile
  9524                           
  9525                           ;boostercomms.c: 204: framesReceivedPhaseUCS = 0;
  9526  000410  0E00               	movlw	0
  9527  000412  6E47               	movwf	BoosterDataCommandComms@framesReceivedPhaseUCS,c
  9528                           
  9529                           ;boostercomms.c: 205: }else{
  9530  000414  0012               	return	
  9531  000416                     i2l5531:
  9532                           
  9533                           ;boostercomms.c: 206: if(framesReceivedPhaseUCS == 15){
  9534  000416  0E0F               	movlw	15
  9535  000418  1847               	xorwf	BoosterDataCommandComms@framesReceivedPhaseUCS,w,c
  9536  00041A  A4D8               	btfss	status,2,c
  9537  00041C  D00E               	goto	i2l5545
  9538                           
  9539                           ;boostercomms.c: 207: if(statusFlagsUSLG & 0b000000000000000010000000){
  9540  00041E  AE36               	btfss	_statusFlagsUSLG,7,c	;volatile
  9541  000420  D007               	goto	i2l5543
  9542                           
  9543                           ;boostercomms.c: 208: commsStatusUCG = 6;
  9544  000422  0E06               	movlw	6
  9545  000424  6E53               	movwf	_commsStatusUCG,c
  9546                           
  9547                           ;boostercomms.c: 209: statusFlagsUSLG &= ~0b000000000000000000001000;
  9548  000426  9636               	bcf	_statusFlagsUSLG,3,c	;volatile
  9549                           
  9550                           ;boostercomms.c: 210: statusFlagsUSLG &= ~0b000000000000000010000000;
  9551  000428  9E36               	bcf	_statusFlagsUSLG,7,c	;volatile
  9552                           
  9553                           ;boostercomms.c: 211: SetCommsLow();
  9554  00042A  EC11  F018         	call	_SetCommsLow	;wreg free
  9555                           
  9556                           ;boostercomms.c: 212: }else{
  9557  00042E  0012               	return	
  9558  000430                     i2l5543:
  9559                           
  9560                           ;boostercomms.c: 213: commsStatusUCG = 5;
  9561  000430  0E05               	movlw	5
  9562  000432  6E53               	movwf	_commsStatusUCG,c
  9563                           
  9564                           ;boostercomms.c: 214: framesReceivedPhaseUCS = 0;
  9565  000434  0E00               	movlw	0
  9566  000436  6E47               	movwf	BoosterDataCommandComms@framesReceivedPhaseUCS,c
  9567                           
  9568                           ;boostercomms.c: 215: }
  9569                           ;boostercomms.c: 216: }else{
  9570  000438  0012               	return	
  9571  00043A                     i2l5545:
  9572                           
  9573                           ;boostercomms.c: 217: commsStatusUCG = 3;
  9574  00043A  0E03               	movlw	3
  9575  00043C  6E53               	movwf	_commsStatusUCG,c
  9576                           
  9577                           ;boostercomms.c: 218: syncModeUCS = 5;
  9578  00043E  0E05               	movlw	5
  9579  000440  6E49               	movwf	BoosterDataCommandComms@syncModeUCS,c
  9580                           
  9581                           ;boostercomms.c: 219: }
  9582                           ;boostercomms.c: 220: }
  9583                           ;boostercomms.c: 221: break;
  9584  000442  0012               	return	
  9585  000444                     i2l5547:
  9586                           
  9587                           ;boostercomms.c: 223: if(counterCommsStatusUSS == 2){
  9588  000444  0E02               	movlw	2
  9589  000446  1839               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS,w,c
  9590  000448  103A               	iorwf	BoosterDataCommandComms@counterCommsStatusUSS+1,w,c
  9591  00044A  A4D8               	btfss	status,2,c
  9592  00044C  D016               	goto	i2l5565
  9593                           
  9594                           ;boostercomms.c: 224: if(statusFlagsUSLG & 0b001000000000000000000000)
  9595  00044E  BA38               	btfsc	_statusFlagsUSLG+2,5,c	;volatile
  9596  000450  0012               	return	
  9597                           
  9598                           ;boostercomms.c: 228: else if(!(statusFlagsUSLG & 0b000000000000000001000000) && (status
      +                          FlagsUSLG & 0b000000000000000000000010)&&!(statusFlagsUSLG & 0b000000000000000000100000)
      +                          &&!(statusFlagsUSLG & 0b000000000000000000010000)){
  9599  000452  AC36               	btfss	_statusFlagsUSLG,6,c	;volatile
  9600  000454  A236               	btfss	_statusFlagsUSLG,1,c	;volatile
  9601  000456  D005               	goto	i2l337
  9602  000458  AA36               	btfss	_statusFlagsUSLG,5,c	;volatile
  9603  00045A  B836               	btfsc	_statusFlagsUSLG,4,c	;volatile
  9604  00045C  D002               	goto	i2l337
  9605                           
  9606                           ;boostercomms.c: 229: LATAbits.LATA6 = 1;
  9607  00045E  8C89               	bsf	3977,6,c	;volatile
  9608                           
  9609                           ;boostercomms.c: 230: }
  9610  000460  0012               	return	
  9611  000462                     i2l337:
  9612                           
  9613                           ;boostercomms.c: 231: else if((statusFlagsUSLG & 0b000000000000000001000000) || (statusF
      +                          lagsUSLG & 0b000000000000000000010000)){
  9614  000462  BC36               	btfsc	_statusFlagsUSLG,6,c	;volatile
  9615  000464  D002               	goto	i2l341
  9616  000466  A836               	btfss	_statusFlagsUSLG,4,c	;volatile
  9617  000468  D002               	goto	i2l339
  9618  00046A                     i2l341:
  9619                           
  9620                           ;boostercomms.c: 232: LATBbits.LATB3 = 1;
  9621  00046A  868A               	bsf	3978,3,c	;volatile
  9622                           
  9623                           ;boostercomms.c: 234: }
  9624  00046C  0012               	return	
  9625  00046E                     i2l339:
  9626                           
  9627                           ;boostercomms.c: 235: else if (!(statusFlagsUSLG & 0b000000000000000000000010)||(statusF
      +                          lagsUSLG & 0b000000000000000000100000)){
  9628  00046E  A236               	btfss	_statusFlagsUSLG,1,c	;volatile
  9629  000470  D002               	goto	i2l345
  9630  000472  AA36               	btfss	_statusFlagsUSLG,5,c	;volatile
  9631  000474  0012               	return	
  9632  000476                     i2l345:
  9633                           
  9634                           ;boostercomms.c: 236: LATCbits.LATC0 = 1;
  9635  000476  808B               	bsf	3979,0,c	;volatile
  9636                           
  9637                           ;boostercomms.c: 237: }
  9638                           ;boostercomms.c: 238: }else if(counterCommsStatusUSS == 500){
  9639  000478  0012               	return	
  9640  00047A                     i2l5565:
  9641  00047A  0EF4               	movlw	244
  9642  00047C  1839               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS,w,c
  9643  00047E  E102               	bnz	i2u592_41
  9644  000480  043A               	decf	BoosterDataCommandComms@counterCommsStatusUSS+1,w,c
  9645  000482  A4D8               	btfss	status,2,c
  9646  000484                     i2u592_41:
  9647  000484  0012               	return	
  9648                           
  9649                           ;boostercomms.c: 239: commsStatusUCG = 4;
  9650  000486  0E04               	movlw	4
  9651  000488  6E53               	movwf	_commsStatusUCG,c
  9652                           
  9653                           ;boostercomms.c: 240: statusFlagsUSLG |= 0b000000000000000010000000;
  9654  00048A  8E36               	bsf	_statusFlagsUSLG,7,c	;volatile
  9655                           
  9656                           ;boostercomms.c: 241: counterCommsStatusUSS = 0;
  9657  00048C  0E00               	movlw	0
  9658  00048E  6E3A               	movwf	BoosterDataCommandComms@counterCommsStatusUSS+1,c
  9659  000490  0E00               	movlw	0
  9660  000492  6E39               	movwf	BoosterDataCommandComms@counterCommsStatusUSS,c
  9661                           
  9662                           ;boostercomms.c: 242: if(!(statusFlagsUSLG & 0b001000000000000000000000)){
  9663  000494  BA38               	btfsc	_statusFlagsUSLG+2,5,c	;volatile
  9664  000496  0012               	return	
  9665                           
  9666                           ;boostercomms.c: 243: LATAbits.LATA6 = 0;
  9667  000498  9C89               	bcf	3977,6,c	;volatile
  9668                           
  9669                           ;boostercomms.c: 244: LATBbits.LATB3 = 0;
  9670  00049A  968A               	bcf	3978,3,c	;volatile
  9671                           
  9672                           ;boostercomms.c: 245: LATCbits.LATC0 = 0;
  9673  00049C  908B               	bcf	3979,0,c	;volatile
  9674                           
  9675                           ;boostercomms.c: 246: }
  9676                           ;boostercomms.c: 247: }
  9677                           ;boostercomms.c: 248: break;
  9678  00049E  0012               	return	
  9679  0004A0                     i2l5577:
  9680                           
  9681                           ;boostercomms.c: 250: if(counterCommsStatusUSS == 300){
  9682  0004A0  0E2C               	movlw	44
  9683  0004A2  1839               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS,w,c
  9684  0004A4  E102               	bnz	i2u594_41
  9685  0004A6  043A               	decf	BoosterDataCommandComms@counterCommsStatusUSS+1,w,c
  9686  0004A8  A4D8               	btfss	status,2,c
  9687  0004AA                     i2u594_41:
  9688  0004AA  0012               	return	
  9689                           
  9690                           ;boostercomms.c: 251: commsStatusUCG = 7;
  9691  0004AC  0E07               	movlw	7
  9692  0004AE  6E53               	movwf	_commsStatusUCG,c
  9693                           
  9694                           ;boostercomms.c: 252: counterCommsStatusUSS = 0;
  9695  0004B0  0E00               	movlw	0
  9696  0004B2  6E3A               	movwf	BoosterDataCommandComms@counterCommsStatusUSS+1,c
  9697  0004B4  0E00               	movlw	0
  9698  0004B6  6E39               	movwf	BoosterDataCommandComms@counterCommsStatusUSS,c
  9699                           
  9700                           ;boostercomms.c: 253: SetCommsHigh();
  9701  0004B8  EC0E  F018         	call	i2_SetCommsHigh	;wreg free
  9702                           
  9703                           ;boostercomms.c: 254: }
  9704                           ;boostercomms.c: 255: break;
  9705  0004BC  0012               	return	
  9706  0004BE                     i2l351:
  9707                           
  9708                           ;boostercomms.c: 257: if(!(statusFlagsUSLG & 0b000000000000000000001000)){
  9709  0004BE  B636               	btfsc	_statusFlagsUSLG,3,c	;volatile
  9710  0004C0  D018               	goto	i2l5601
  9711                           
  9712                           ;boostercomms.c: 258: statusFlagsUSLG |= 0b000000000000000000001000;
  9713  0004C2  8636               	bsf	_statusFlagsUSLG,3,c	;volatile
  9714                           
  9715                           ;boostercomms.c: 259: if(statusFlagsUSLG & 0b001000000000000000000000)
  9716  0004C4  BA38               	btfsc	_statusFlagsUSLG+2,5,c	;volatile
  9717  0004C6  D00E               	goto	i2l5597
  9718                           
  9719                           ;boostercomms.c: 263: else if((statusFlagsUSLG & 0b000000000000000001000000) || (statusF
      +                          lagsUSLG & 0b000000000000000000010000) || !(statusFlagsUSLG & 0b000000000000000000000010
      +                          )){
  9720  0004C8  AC36               	btfss	_statusFlagsUSLG,6,c	;volatile
  9721  0004CA  B836               	btfsc	_statusFlagsUSLG,4,c	;volatile
  9722  0004CC  D002               	goto	i2l357
  9723  0004CE  B236               	btfsc	_statusFlagsUSLG,1,c	;volatile
  9724  0004D0  D004               	goto	i2l355
  9725  0004D2                     i2l357:
  9726                           
  9727                           ;boostercomms.c: 265: if (statusFlagsUSLG & 0b000000000000000000000100){
  9728  0004D2  A436               	btfss	_statusFlagsUSLG,2,c	;volatile
  9729  0004D4  D004               	goto	i2l5595
  9730                           
  9731                           ;boostercomms.c: 266: LATBbits.LATB3 = 1;
  9732  0004D6  868A               	bsf	3978,3,c	;volatile
  9733                           
  9734                           ;boostercomms.c: 267: }
  9735  0004D8  D005               	goto	i2l5597
  9736  0004DA                     i2l355:
  9737                           
  9738                           ;boostercomms.c: 271: else if(!(statusFlagsUSLG & 0b000000000000000000000100))
  9739  0004DA  B436               	btfsc	_statusFlagsUSLG,2,c	;volatile
  9740  0004DC  D002               	goto	i2l361
  9741  0004DE                     i2l5595:
  9742                           
  9743                           ;boostercomms.c: 272: LATCbits.LATC0 = 1;
  9744  0004DE  808B               	bsf	3979,0,c	;volatile
  9745  0004E0  D001               	goto	i2l5597
  9746  0004E2                     i2l361:
  9747                           
  9748                           ;boostercomms.c: 273: else{
  9749                           ;boostercomms.c: 274: LATAbits.LATA6 = 1;
  9750  0004E2  8C89               	bsf	3977,6,c	;volatile
  9751  0004E4                     i2l5597:
  9752                           
  9753                           ;boostercomms.c: 275: }
  9754                           ;boostercomms.c: 278: InitEarthLeakage();
  9755  0004E4  EC8D  F017         	call	_InitEarthLeakage	;wreg free
  9756                           
  9757                           ;boostercomms.c: 279: counterELTTests =0;
  9758  0004E8  0E00               	movlw	0
  9759  0004EA  6E40               	movwf	_counterELTTests+1,c
  9760  0004EC  0E00               	movlw	0
  9761  0004EE  6E3F               	movwf	_counterELTTests,c
  9762                           
  9763                           ;boostercomms.c: 281: }else if(counterCommsStatusUSS >= 245 && counterELTTests <=5){
  9764  0004F0  0012               	return	
  9765  0004F2                     i2l5601:
  9766  0004F2  503A               	movf	BoosterDataCommandComms@counterCommsStatusUSS+1,w,c
  9767  0004F4  E104               	bnz	i2u602_40
  9768  0004F6  0EF5               	movlw	245
  9769  0004F8  5C39               	subwf	BoosterDataCommandComms@counterCommsStatusUSS,w,c
  9770  0004FA  A0D8               	btfss	status,0,c
  9771  0004FC  D009               	goto	i2l5607
  9772  0004FE                     i2u602_40:
  9773  0004FE  5040               	movf	_counterELTTests+1,w,c
  9774  000500  E107               	bnz	i2l5607
  9775  000502  0E06               	movlw	6
  9776  000504  5C3F               	subwf	_counterELTTests,w,c
  9777  000506  B0D8               	btfsc	status,0,c
  9778  000508  D003               	goto	i2l5607
  9779                           
  9780                           ;boostercomms.c: 282: ReadEarthLeakage();
  9781  00050A  EC83  F014         	call	_ReadEarthLeakage	;wreg free
  9782                           
  9783                           ;boostercomms.c: 283: }else if(counterCommsStatusUSS == 500){
  9784  00050E  0012               	return	
  9785  000510                     i2l5607:
  9786  000510  0EF4               	movlw	244
  9787  000512  1839               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS,w,c
  9788  000514  E102               	bnz	i2u604_41
  9789  000516  043A               	decf	BoosterDataCommandComms@counterCommsStatusUSS+1,w,c
  9790  000518  A4D8               	btfss	status,2,c
  9791  00051A                     i2u604_41:
  9792  00051A  0012               	return	
  9793                           
  9794                           ;boostercomms.c: 284: statusFlagsUSLG &= ~0b000000000000000000001000;
  9795  00051C  9636               	bcf	_statusFlagsUSLG,3,c	;volatile
  9796                           
  9797                           ;boostercomms.c: 285: commsStatusUCG = 9;
  9798  00051E  0E09               	movlw	9
  9799  000520  6E53               	movwf	_commsStatusUCG,c
  9800                           
  9801                           ;boostercomms.c: 286: cableTestUCS = 0;
  9802  000522  0E00               	movlw	0
  9803  000524  6E45               	movwf	BoosterDataCommandComms@cableTestUCS,c
  9804                           
  9805                           ;boostercomms.c: 287: counterCommsStatusUSS = 0;
  9806  000526  0E00               	movlw	0
  9807  000528  6E3A               	movwf	BoosterDataCommandComms@counterCommsStatusUSS+1,c
  9808  00052A  0E00               	movlw	0
  9809  00052C  6E39               	movwf	BoosterDataCommandComms@counterCommsStatusUSS,c
  9810                           
  9811                           ;boostercomms.c: 288: if(!(statusFlagsUSLG & 0b001000000000000000000000)){
  9812  00052E  BA38               	btfsc	_statusFlagsUSLG+2,5,c	;volatile
  9813  000530  0012               	return	
  9814                           
  9815                           ;boostercomms.c: 289: LATAbits.LATA6 = 0;
  9816  000532  9C89               	bcf	3977,6,c	;volatile
  9817                           
  9818                           ;boostercomms.c: 290: LATBbits.LATB3 = 0;
  9819  000534  968A               	bcf	3978,3,c	;volatile
  9820                           
  9821                           ;boostercomms.c: 291: LATCbits.LATC0 = 0;
  9822  000536  908B               	bcf	3979,0,c	;volatile
  9823                           
  9824                           ;boostercomms.c: 292: }
  9825                           ;boostercomms.c: 302: }
  9826                           ;boostercomms.c: 303: break;
  9827  000538  0012               	return	
  9828  00053A                     i2l5621:
  9829                           
  9830                           ;boostercomms.c: 305: counterCommsStatusUSS++;
  9831  00053A  4A39               	infsnz	BoosterDataCommandComms@counterCommsStatusUSS,f,c
  9832  00053C  2A3A               	incf	BoosterDataCommandComms@counterCommsStatusUSS+1,f,c
  9833                           
  9834                           ;boostercomms.c: 306: switch(cableFaultModeUCS){
  9835  00053E  D04F               	goto	i2l5667
  9836  000540                     i2l5623:
  9837                           
  9838                           ;boostercomms.c: 308: counterCommsStatusUSS = 0;
  9839  000540  0E00               	movlw	0
  9840  000542  6E3A               	movwf	BoosterDataCommandComms@counterCommsStatusUSS+1,c
  9841  000544  0E00               	movlw	0
  9842  000546  6E39               	movwf	BoosterDataCommandComms@counterCommsStatusUSS,c
  9843                           
  9844                           ;boostercomms.c: 309: cableFaultModeUCS = 4;
  9845  000548  0E04               	movlw	4
  9846  00054A  6E44               	movwf	BoosterDataCommandComms@cableFaultModeUCS,c
  9847                           
  9848                           ;boostercomms.c: 310: break;
  9849  00054C  0012               	return	
  9850  00054E                     i2l5625:
  9851                           
  9852                           ;boostercomms.c: 312: if(counterCommsStatusUSS == 39500){
  9853  00054E  0E4C               	movlw	76
  9854  000550  1839               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS,w,c
  9855  000552  E103               	bnz	i2u606_41
  9856  000554  0E9A               	movlw	154
  9857  000556  183A               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS+1,w,c
  9858  000558  A4D8               	btfss	status,2,c
  9859  00055A                     i2u606_41:
  9860  00055A  0012               	return	
  9861                           
  9862                           ;boostercomms.c: 313: cableFaultModeUCS = 6;
  9863  00055C  0E06               	movlw	6
  9864  00055E  6E44               	movwf	BoosterDataCommandComms@cableFaultModeUCS,c
  9865                           
  9866                           ;boostercomms.c: 314: LATBbits.LATB3 = 1;
  9867  000560  868A               	bsf	3978,3,c	;volatile
  9868                           
  9869                           ;boostercomms.c: 315: }
  9870                           ;boostercomms.c: 316: break;
  9871  000562  0012               	return	
  9872  000564                     i2l5631:
  9873                           
  9874                           ;boostercomms.c: 318: if(counterCommsStatusUSS == 40000){
  9875  000564  0E40               	movlw	64
  9876  000566  1839               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS,w,c
  9877  000568  E103               	bnz	i2u607_41
  9878  00056A  0E9C               	movlw	156
  9879  00056C  183A               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS+1,w,c
  9880  00056E  A4D8               	btfss	status,2,c
  9881  000570                     i2u607_41:
  9882  000570  0012               	return	
  9883                           
  9884                           ;boostercomms.c: 319: cableFaultModeUCS = 5;
  9885  000572  0E05               	movlw	5
  9886  000574  6E44               	movwf	BoosterDataCommandComms@cableFaultModeUCS,c
  9887                           
  9888                           ;boostercomms.c: 320: LATBbits.LATB3 = 0;
  9889  000576  968A               	bcf	3978,3,c	;volatile
  9890                           
  9891                           ;boostercomms.c: 321: counterCommsStatusUSS=0;
  9892  000578  0E00               	movlw	0
  9893  00057A  6E3A               	movwf	BoosterDataCommandComms@counterCommsStatusUSS+1,c
  9894  00057C  0E00               	movlw	0
  9895  00057E  6E39               	movwf	BoosterDataCommandComms@counterCommsStatusUSS,c
  9896                           
  9897                           ;boostercomms.c: 322: }
  9898                           ;boostercomms.c: 323: break;
  9899  000580  0012               	return	
  9900  000582                     i2l5637:
  9901                           
  9902                           ;boostercomms.c: 325: if(counterCommsStatusUSS == 35000)
  9903  000582  0EB8               	movlw	184
  9904  000584  1839               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS,w,c
  9905  000586  E103               	bnz	i2u608_41
  9906  000588  0E88               	movlw	136
  9907  00058A  183A               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS+1,w,c
  9908  00058C  A4D8               	btfss	status,2,c
  9909  00058E                     i2u608_41:
  9910  00058E  0012               	return	
  9911                           
  9912                           ;boostercomms.c: 326: cableFaultModeUCS = 1;
  9913  000590  0E01               	movlw	1
  9914  000592  6E44               	movwf	BoosterDataCommandComms@cableFaultModeUCS,c
  9915                           
  9916                           ;boostercomms.c: 327: break;
  9917  000594  0012               	return	
  9918  000596                     i2l5641:
  9919                           
  9920                           ;boostercomms.c: 329: SetCommsHigh();
  9921  000596  EC0E  F018         	call	i2_SetCommsHigh	;wreg free
  9922                           
  9923                           ;boostercomms.c: 330: cableFaultModeUCS = 2;
  9924  00059A  0E02               	movlw	2
  9925  00059C  6E44               	movwf	BoosterDataCommandComms@cableFaultModeUCS,c
  9926                           
  9927                           ;boostercomms.c: 331: break;
  9928  00059E  0012               	return	
  9929  0005A0                     i2l5645:
  9930                           
  9931                           ;boostercomms.c: 333: if(counterCommsStatusUSS == 40000){
  9932  0005A0  0E40               	movlw	64
  9933  0005A2  1839               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS,w,c
  9934  0005A4  E103               	bnz	i2u609_41
  9935  0005A6  0E9C               	movlw	156
  9936  0005A8  183A               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS+1,w,c
  9937  0005AA  A4D8               	btfss	status,2,c
  9938  0005AC                     i2u609_41:
  9939  0005AC  0012               	return	
  9940                           
  9941                           ;boostercomms.c: 334: CheckLineFault();
  9942  0005AE  EC1C  F00C         	call	_CheckLineFault	;wreg free
  9943                           
  9944                           ;boostercomms.c: 335: cableFaultModeUCS = 3;
  9945  0005B2  0E03               	movlw	3
  9946  0005B4  6E44               	movwf	BoosterDataCommandComms@cableFaultModeUCS,c
  9947                           
  9948                           ;boostercomms.c: 336: LATBbits.LATB3 = 1;
  9949  0005B6  868A               	bsf	3978,3,c	;volatile
  9950                           
  9951                           ;boostercomms.c: 337: }
  9952                           ;boostercomms.c: 338: break;
  9953  0005B8  0012               	return	
  9954  0005BA                     i2l5653:
  9955                           
  9956                           ;boostercomms.c: 340: if(counterCommsStatusUSS == 40500){
  9957  0005BA  0E34               	movlw	52
  9958  0005BC  1839               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS,w,c
  9959  0005BE  E103               	bnz	i2u610_41
  9960  0005C0  0E9E               	movlw	158
  9961  0005C2  183A               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS+1,w,c
  9962  0005C4  A4D8               	btfss	status,2,c
  9963  0005C6                     i2u610_41:
  9964  0005C6  0012               	return	
  9965                           
  9966                           ;boostercomms.c: 341: LATBbits.LATB3 = 0;
  9967  0005C8  968A               	bcf	3978,3,c	;volatile
  9968                           
  9969                           ;boostercomms.c: 342: cableFaultModeUCS = 0;
  9970  0005CA  0E00               	movlw	0
  9971  0005CC  6E44               	movwf	BoosterDataCommandComms@cableFaultModeUCS,c
  9972                           
  9973                           ;boostercomms.c: 343: if(statusFlagsUSLG & 0b010000000000000000000000)
  9974  0005CE  AC38               	btfss	_statusFlagsUSLG+2,6,c	;volatile
  9975  0005D0  D003               	goto	i2l5663
  9976                           
  9977                           ;boostercomms.c: 344: SetCommsLow();
  9978  0005D2  EC11  F018         	call	_SetCommsLow	;wreg free
  9979  0005D6  0012               	return	
  9980  0005D8                     i2l5663:
  9981                           
  9982                           ;boostercomms.c: 345: else
  9983                           ;boostercomms.c: 346: commsStatusUCG = 0;
  9984  0005D8  0E00               	movlw	0
  9985  0005DA  6E53               	movwf	_commsStatusUCG,c
  9986                           
  9987                           ;boostercomms.c: 350: }
  9988                           
  9989                           ;boostercomms.c: 348: }
  9990                           ;boostercomms.c: 349: break;
  9991  0005DC  0012               	return	
  9992  0005DE                     i2l5667:
  9993  0005DE  5044               	movf	BoosterDataCommandComms@cableFaultModeUCS,w,c
  9994                           
  9995                           ; Switch size 1, requested type "space"
  9996                           ; Number of cases is 7, Range of values is 0 to 6
  9997                           ; switch strategies available:
  9998                           ; Name         Instructions Cycles
  9999                           ; simple_byte           22    12 (average)
 10000                           ;	Chosen strategy is simple_byte
 10001  0005E0  0A00               	xorlw	0	; case 0
 10002  0005E2  B4D8               	btfsc	status,2,c
 10003  0005E4  D7AD               	goto	i2l5623
 10004  0005E6  0A01               	xorlw	1	; case 1
 10005  0005E8  B4D8               	btfsc	status,2,c
 10006  0005EA  D7D5               	goto	i2l5641
 10007  0005EC  0A03               	xorlw	3	; case 2
 10008  0005EE  B4D8               	btfsc	status,2,c
 10009  0005F0  D7D7               	goto	i2l5645
 10010  0005F2  0A01               	xorlw	1	; case 3
 10011  0005F4  B4D8               	btfsc	status,2,c
 10012  0005F6  D7E1               	goto	i2l5653
 10013  0005F8  0A07               	xorlw	7	; case 4
 10014  0005FA  B4D8               	btfsc	status,2,c
 10015  0005FC  D7A8               	goto	i2l5625
 10016  0005FE  0A01               	xorlw	1	; case 5
 10017  000600  B4D8               	btfsc	status,2,c
 10018  000602  D7BF               	goto	i2l5637
 10019  000604  0A03               	xorlw	3	; case 6
 10020  000606  A4D8               	btfss	status,2,c
 10021                           
 10022                           ;boostercomms.c: 351: break;
 10023  000608  0012               	return	
 10024  00060A  D7AC               	goto	i2l5631
 10025  00060C                     i2l5669:
 10026                           
 10027                           ;boostercomms.c: 353: counterCommsStatusUSS++;
 10028  00060C  4A39               	infsnz	BoosterDataCommandComms@counterCommsStatusUSS,f,c
 10029  00060E  2A3A               	incf	BoosterDataCommandComms@counterCommsStatusUSS+1,f,c
 10030                           
 10031                           ;boostercomms.c: 354: switch(cableTestUCS){
 10032  000610  D074               	goto	i2l5745
 10033  000612                     i2l5671:
 10034                           
 10035                           ;boostercomms.c: 356: if(counterCommsStatusUSS == 1000){
 10036  000612  0EE8               	movlw	232
 10037  000614  1839               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS,w,c
 10038  000616  E103               	bnz	i2u612_41
 10039  000618  0E03               	movlw	3
 10040  00061A  183A               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS+1,w,c
 10041  00061C  A4D8               	btfss	status,2,c
 10042  00061E                     i2u612_41:
 10043  00061E  0012               	return	
 10044                           
 10045                           ;boostercomms.c: 357: if((statusFlagsUSLG & 0b000000000000000000000100)){
 10046  000620  A436               	btfss	_statusFlagsUSLG,2,c	;volatile
 10047  000622  D004               	goto	i2l5679
 10048                           
 10049                           ;boostercomms.c: 358: ReadKeySwitch();
 10050  000624  ECB3  F016         	call	_ReadKeySwitch	;wreg free
 10051                           
 10052                           ;boostercomms.c: 359: CheckLineFault();
 10053  000628  EC1C  F00C         	call	_CheckLineFault	;wreg free
 10054  00062C                     i2l5679:
 10055                           
 10056                           ;boostercomms.c: 360: }
 10057                           ;boostercomms.c: 361: if ((statusFlagsUSLG & 0b000000000000000000100000) && ISO_COUNTER 
      +                          == 0){
 10058  00062C  AA36               	btfss	_statusFlagsUSLG,5,c	;volatile
 10059  00062E  D00D               	goto	i2l390
 10060  000630  504A               	movf	_ISO_COUNTER,w,c
 10061  000632  A4D8               	btfss	status,2,c
 10062  000634  D00A               	goto	i2l390
 10063                           
 10064                           ;boostercomms.c: 362: counterCommsStatusUSS = 0;
 10065  000636  0E00               	movlw	0
 10066  000638  6E3A               	movwf	BoosterDataCommandComms@counterCommsStatusUSS+1,c
 10067  00063A  0E00               	movlw	0
 10068  00063C  6E39               	movwf	BoosterDataCommandComms@counterCommsStatusUSS,c
 10069                           
 10070                           ;boostercomms.c: 363: cableTestUCS = 1;
 10071  00063E  0E01               	movlw	1
 10072  000640  6E45               	movwf	BoosterDataCommandComms@cableTestUCS,c
 10073                           
 10074                           ;boostercomms.c: 364: SetCommsLow();
 10075  000642  EC11  F018         	call	_SetCommsLow	;wreg free
 10076                           
 10077                           ;boostercomms.c: 365: LATDbits.LATD7 = 0;
 10078  000646  9E8C               	bcf	3980,7,c	;volatile
 10079                           
 10080                           ;boostercomms.c: 366: }
 10081  000648  0012               	return	
 10082  00064A                     i2l390:
 10083                           
 10084                           ;boostercomms.c: 367: else if(statusFlagsUSLG & 0b010000000000000000000000){
 10085  00064A  AC38               	btfss	_statusFlagsUSLG+2,6,c	;volatile
 10086  00064C  D007               	goto	i2l5695
 10087                           
 10088                           ;boostercomms.c: 368: SetCommsLow();
 10089  00064E  EC11  F018         	call	_SetCommsLow	;wreg free
 10090                           
 10091                           ;boostercomms.c: 369: commsStatusUCG = 8;
 10092  000652  0E08               	movlw	8
 10093  000654  6E53               	movwf	_commsStatusUCG,c
 10094                           
 10095                           ;boostercomms.c: 370: cableFaultModeUCS = 0;
 10096  000656  0E00               	movlw	0
 10097  000658  6E44               	movwf	BoosterDataCommandComms@cableFaultModeUCS,c
 10098                           
 10099                           ;boostercomms.c: 371: }
 10100  00065A  0012               	return	
 10101  00065C                     i2l5695:
 10102                           
 10103                           ;boostercomms.c: 372: else
 10104                           ;boostercomms.c: 373: commsStatusUCG = 0;
 10105  00065C  0E00               	movlw	0
 10106  00065E  6E53               	movwf	_commsStatusUCG,c
 10107                           
 10108                           ;boostercomms.c: 374: }
 10109                           ;boostercomms.c: 375: break;
 10110  000660  0012               	return	
 10111  000662                     i2l5697:
 10112                           
 10113                           ;boostercomms.c: 377: if(counterCommsStatusUSS == 39600){
 10114  000662  0EB0               	movlw	176
 10115  000664  1839               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS,w,c
 10116  000666  E112               	bnz	i2l5711
 10117  000668  0E9A               	movlw	154
 10118  00066A  183A               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS+1,w,c
 10119  00066C  A4D8               	btfss	status,2,c
 10120  00066E  D00E               	goto	i2l5711
 10121                           
 10122                           ;boostercomms.c: 378: ReadKeySwitch();
 10123  000670  ECB3  F016         	call	_ReadKeySwitch	;wreg free
 10124                           
 10125                           ;boostercomms.c: 379: if((statusFlagsUSLG & 0b000000000000000000100000))
 10126  000674  AA36               	btfss	_statusFlagsUSLG,5,c	;volatile
 10127  000676  D002               	goto	i2l5705
 10128                           
 10129                           ;boostercomms.c: 380: LATAbits.LATA6 = 1;
 10130  000678  8C89               	bsf	3977,6,c	;volatile
 10131  00067A  0012               	return	
 10132  00067C                     i2l5705:
 10133                           
 10134                           ;boostercomms.c: 381: else{
 10135                           ;boostercomms.c: 382: commsStatusUCG = 0;
 10136  00067C  0E00               	movlw	0
 10137  00067E  6E53               	movwf	_commsStatusUCG,c
 10138                           
 10139                           ;boostercomms.c: 383: cableTestUCS = 0;
 10140  000680  0E00               	movlw	0
 10141  000682  6E45               	movwf	BoosterDataCommandComms@cableTestUCS,c
 10142                           
 10143                           ;boostercomms.c: 384: LATDbits.LATD7 = 1;
 10144  000684  8E8C               	bsf	3980,7,c	;volatile
 10145                           
 10146                           ;boostercomms.c: 385: SetCommsHigh();
 10147  000686  EC0E  F018         	call	i2_SetCommsHigh	;wreg free
 10148                           
 10149                           ;boostercomms.c: 386: }
 10150                           ;boostercomms.c: 387: }
 10151  00068A  0012               	return	
 10152  00068C                     i2l5711:
 10153                           
 10154                           ;boostercomms.c: 388: else if(counterCommsStatusUSS == 40000){
 10155  00068C  0E40               	movlw	64
 10156  00068E  1839               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS,w,c
 10157  000690  E15F               	bnz	i2l268
 10158  000692  0E9C               	movlw	156
 10159  000694  183A               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS+1,w,c
 10160  000696  A4D8               	btfss	status,2,c
 10161  000698  0012               	return	
 10162                           
 10163                           ;boostercomms.c: 389: LATAbits.LATA6 = 0;
 10164  00069A  9C89               	bcf	3977,6,c	;volatile
 10165                           
 10166                           ;boostercomms.c: 390: counterCommsStatusUSS = 0;
 10167  00069C  0E00               	movlw	0
 10168  00069E  6E3A               	movwf	BoosterDataCommandComms@counterCommsStatusUSS+1,c
 10169  0006A0  0E00               	movlw	0
 10170  0006A2  6E39               	movwf	BoosterDataCommandComms@counterCommsStatusUSS,c
 10171                           
 10172                           ;boostercomms.c: 391: cableTestUCS = 3;
 10173  0006A4  0E03               	movlw	3
 10174  0006A6  6E45               	movwf	BoosterDataCommandComms@cableTestUCS,c
 10175                           
 10176                           ;boostercomms.c: 392: }
 10177                           ;boostercomms.c: 393: break;
 10178  0006A8  0012               	return	
 10179  0006AA                     i2l5717:
 10180                           
 10181                           ;boostercomms.c: 395: if(counterCommsStatusUSS == 39600){
 10182  0006AA  0EB0               	movlw	176
 10183  0006AC  1839               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS,w,c
 10184  0006AE  E115               	bnz	i2l5733
 10185  0006B0  0E9A               	movlw	154
 10186  0006B2  183A               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS+1,w,c
 10187  0006B4  A4D8               	btfss	status,2,c
 10188  0006B6  D011               	goto	i2l5733
 10189                           
 10190                           ;boostercomms.c: 396: ReadKeySwitch();
 10191  0006B8  ECB3  F016         	call	_ReadKeySwitch	;wreg free
 10192                           
 10193                           ;boostercomms.c: 397: if((statusFlagsUSLG & 0b000000000000000000100000) && (ISO_COUNTER 
      +                          < 15))
 10194  0006BC  AA36               	btfss	_statusFlagsUSLG,5,c	;volatile
 10195  0006BE  D005               	goto	i2l5727
 10196  0006C0  0E0F               	movlw	15
 10197  0006C2  604A               	cpfslt	_ISO_COUNTER,c
 10198  0006C4  D002               	goto	i2l5727
 10199                           
 10200                           ;boostercomms.c: 398: LATCbits.LATC0 = 1;
 10201  0006C6  808B               	bsf	3979,0,c	;volatile
 10202  0006C8  0012               	return	
 10203  0006CA                     i2l5727:
 10204                           
 10205                           ;boostercomms.c: 399: else{
 10206                           ;boostercomms.c: 400: commsStatusUCG = 0;
 10207  0006CA  0E00               	movlw	0
 10208  0006CC  6E53               	movwf	_commsStatusUCG,c
 10209                           
 10210                           ;boostercomms.c: 401: cableTestUCS = 0;
 10211  0006CE  0E00               	movlw	0
 10212  0006D0  6E45               	movwf	BoosterDataCommandComms@cableTestUCS,c
 10213                           
 10214                           ;boostercomms.c: 402: LATDbits.LATD7 = 1;
 10215  0006D2  8E8C               	bsf	3980,7,c	;volatile
 10216                           
 10217                           ;boostercomms.c: 403: SetCommsHigh();
 10218  0006D4  EC0E  F018         	call	i2_SetCommsHigh	;wreg free
 10219                           
 10220                           ;boostercomms.c: 404: }
 10221                           ;boostercomms.c: 405: }
 10222  0006D8  0012               	return	
 10223  0006DA                     i2l5733:
 10224                           
 10225                           ;boostercomms.c: 406: else if(counterCommsStatusUSS == 40000){
 10226  0006DA  0E40               	movlw	64
 10227  0006DC  1839               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS,w,c
 10228  0006DE  E138               	bnz	i2l268
 10229  0006E0  0E9C               	movlw	156
 10230  0006E2  183A               	xorwf	BoosterDataCommandComms@counterCommsStatusUSS+1,w,c
 10231  0006E4  A4D8               	btfss	status,2,c
 10232  0006E6  0012               	return	
 10233                           
 10234                           ;boostercomms.c: 407: LATCbits.LATC0 = 0;
 10235  0006E8  908B               	bcf	3979,0,c	;volatile
 10236                           
 10237                           ;boostercomms.c: 408: cableTestUCS = 1;
 10238  0006EA  0E01               	movlw	1
 10239  0006EC  6E45               	movwf	BoosterDataCommandComms@cableTestUCS,c
 10240                           
 10241                           ;boostercomms.c: 409: ISO_COUNTER++;
 10242  0006EE  2A4A               	incf	_ISO_COUNTER,f,c
 10243                           
 10244                           ;boostercomms.c: 410: counterCommsStatusUSS = 0;
 10245  0006F0  0E00               	movlw	0
 10246  0006F2  6E3A               	movwf	BoosterDataCommandComms@counterCommsStatusUSS+1,c
 10247  0006F4  0E00               	movlw	0
 10248  0006F6  6E39               	movwf	BoosterDataCommandComms@counterCommsStatusUSS,c
 10249                           
 10250                           ;boostercomms.c: 413: }
 10251                           
 10252                           ;boostercomms.c: 411: }
 10253                           ;boostercomms.c: 412: break;
 10254  0006F8  0012               	return	
 10255  0006FA                     i2l5745:
 10256  0006FA  5045               	movf	BoosterDataCommandComms@cableTestUCS,w,c
 10257                           
 10258                           ; Switch size 1, requested type "space"
 10259                           ; Number of cases is 3, Range of values is 0 to 3
 10260                           ; switch strategies available:
 10261                           ; Name         Instructions Cycles
 10262                           ; simple_byte           10     6 (average)
 10263                           ;	Chosen strategy is simple_byte
 10264  0006FC  0A00               	xorlw	0	; case 0
 10265  0006FE  B4D8               	btfsc	status,2,c
 10266  000700  D788               	goto	i2l5671
 10267  000702  0A01               	xorlw	1	; case 1
 10268  000704  B4D8               	btfsc	status,2,c
 10269  000706  D7AD               	goto	i2l5697
 10270  000708  0A02               	xorlw	2	; case 3
 10271  00070A  A4D8               	btfss	status,2,c
 10272                           
 10273                           ;boostercomms.c: 415: }
 10274                           
 10275                           ;boostercomms.c: 414: break;
 10276  00070C  0012               	return	
 10277  00070E  D7CD               	goto	i2l5717
 10278  000710                     i2l5749:
 10279  000710  5053               	movf	_commsStatusUCG,w,c
 10280                           
 10281                           ; Switch size 1, requested type "space"
 10282                           ; Number of cases is 10, Range of values is 0 to 9
 10283                           ; switch strategies available:
 10284                           ; Name         Instructions Cycles
 10285                           ; simple_byte           31    16 (average)
 10286                           ;	Chosen strategy is simple_byte
 10287  000712  0A00               	xorlw	0	; case 0
 10288  000714  B4D8               	btfsc	status,2,c
 10289  000716  0012               	return	
 10290  000718  0A01               	xorlw	1	; case 1
 10291  00071A  B4D8               	btfsc	status,2,c
 10292  00071C  D4E0               	goto	i2l269
 10293  00071E  0A03               	xorlw	3	; case 2
 10294  000720  B4D8               	btfsc	status,2,c
 10295  000722  D4FF               	goto	i2l278
 10296  000724  0A01               	xorlw	1	; case 3
 10297  000726  B4D8               	btfsc	status,2,c
 10298  000728  D548               	goto	i2l5409
 10299  00072A  0A07               	xorlw	7	; case 4
 10300  00072C  B4D8               	btfsc	status,2,c
 10301  00072E  D66D               	goto	i2l326
 10302  000730  0A01               	xorlw	1	; case 5
 10303  000732  B4D8               	btfsc	status,2,c
 10304  000734  D687               	goto	i2l5547
 10305  000736  0A03               	xorlw	3	; case 6
 10306  000738  B4D8               	btfsc	status,2,c
 10307  00073A  D6B2               	goto	i2l5577
 10308  00073C  0A01               	xorlw	1	; case 7
 10309  00073E  B4D8               	btfsc	status,2,c
 10310  000740  D6BE               	goto	i2l351
 10311  000742  0A0F               	xorlw	15	; case 8
 10312  000744  B4D8               	btfsc	status,2,c
 10313  000746  D6F9               	goto	i2l5621
 10314  000748  0A01               	xorlw	1	; case 9
 10315  00074A  A4D8               	btfss	status,2,c
 10316  00074C  0012               	return	
 10317  00074E  D75E               	goto	i2l5669
 10318  000750                     i2l268:
 10319  000750  0012               	return		;funcret
 10320  000752                     __end_of_BoosterDataCommandComms:
 10321                           	opt stack 0
 10322                           pclatu	equ	0xFFB
 10323                           pclath	equ	0xFFA
 10324                           tblptru	equ	0xFF8
 10325                           tblptrh	equ	0xFF7
 10326                           tblptrl	equ	0xFF6
 10327                           tablat	equ	0xFF5
 10328                           prodh	equ	0xFF4
 10329                           prodl	equ	0xFF3
 10330                           intcon	equ	0xFF2
 10331                           postinc0	equ	0xFEE
 10332                           fsr0h	equ	0xFEA
 10333                           fsr0l	equ	0xFE9
 10334                           wreg	equ	0xFE8
 10335                           indf1	equ	0xFE7
 10336                           postinc1	equ	0xFE6
 10337                           postdec1	equ	0xFE5
 10338                           fsr1h	equ	0xFE2
 10339                           fsr1l	equ	0xFE1
 10340                           indf2	equ	0xFDF
 10341                           postinc2	equ	0xFDE
 10342                           postdec2	equ	0xFDD
 10343                           fsr2h	equ	0xFDA
 10344                           fsr2l	equ	0xFD9
 10345                           status	equ	0xFD8
 10346                           
 10347 ;; *************** function i2_SetCommsHigh *****************
 10348 ;; Defined at:
 10349 ;;		line 488 in file "boostercomms.c"
 10350 ;; Parameters:    Size  Location     Type
 10351 ;;		None
 10352 ;; Auto vars:     Size  Location     Type
 10353 ;;		None
 10354 ;; Return value:  Size  Location     Type
 10355 ;;                  1    wreg      void 
 10356 ;; Registers used:
 10357 ;;		None
 10358 ;; Tracked objects:
 10359 ;;		On entry : 0/0
 10360 ;;		On exit  : 0/0
 10361 ;;		Unchanged: 0/0
 10362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10363 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10364 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10365 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10366 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10367 ;;Total ram usage:        0 bytes
 10368 ;; Hardware stack levels used:    1
 10369 ;; This function calls:
 10370 ;;		Nothing
 10371 ;; This function is called by:
 10372 ;;		_BoosterDataCommandComms
 10373 ;; This function uses a non-reentrant model
 10374 ;;
 10375                           
 10376                           	psect	text55
 10377  00301C                     __ptext55:
 10378                           	opt stack 0
 10379  00301C                     i2_SetCommsHigh:
 10380                           	opt stack 22
 10381                           
 10382                           ;boostercomms.c: 489: LATBbits.LATB2 = 0;
 10383                           
 10384                           ;incstack = 0
 10385  00301C  948A               	bcf	3978,2,c	;volatile
 10386                           
 10387                           ;boostercomms.c: 490: LATAbits.LATA2 = 1;
 10388  00301E  8489               	bsf	3977,2,c	;volatile
 10389  003020  0012               	return		;funcret
 10390  003022                     __end_ofi2_SetCommsHigh:
 10391                           	opt stack 0
 10392                           pclatu	equ	0xFFB
 10393                           pclath	equ	0xFFA
 10394                           tblptru	equ	0xFF8
 10395                           tblptrh	equ	0xFF7
 10396                           tblptrl	equ	0xFF6
 10397                           tablat	equ	0xFF5
 10398                           prodh	equ	0xFF4
 10399                           prodl	equ	0xFF3
 10400                           intcon	equ	0xFF2
 10401                           postinc0	equ	0xFEE
 10402                           fsr0h	equ	0xFEA
 10403                           fsr0l	equ	0xFE9
 10404                           wreg	equ	0xFE8
 10405                           indf1	equ	0xFE7
 10406                           postinc1	equ	0xFE6
 10407                           postdec1	equ	0xFE5
 10408                           fsr1h	equ	0xFE2
 10409                           fsr1l	equ	0xFE1
 10410                           indf2	equ	0xFDF
 10411                           postinc2	equ	0xFDE
 10412                           postdec2	equ	0xFDD
 10413                           fsr2h	equ	0xFDA
 10414                           fsr2l	equ	0xFD9
 10415                           status	equ	0xFD8
 10416                           
 10417 ;; *************** function _SetCommsLow *****************
 10418 ;; Defined at:
 10419 ;;		line 483 in file "boostercomms.c"
 10420 ;; Parameters:    Size  Location     Type
 10421 ;;		None
 10422 ;; Auto vars:     Size  Location     Type
 10423 ;;		None
 10424 ;; Return value:  Size  Location     Type
 10425 ;;                  1    wreg      void 
 10426 ;; Registers used:
 10427 ;;		None
 10428 ;; Tracked objects:
 10429 ;;		On entry : 0/0
 10430 ;;		On exit  : 0/0
 10431 ;;		Unchanged: 0/0
 10432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10433 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10434 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10435 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10436 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10437 ;;Total ram usage:        0 bytes
 10438 ;; Hardware stack levels used:    1
 10439 ;; This function calls:
 10440 ;;		Nothing
 10441 ;; This function is called by:
 10442 ;;		_BoosterDataCommandComms
 10443 ;; This function uses a non-reentrant model
 10444 ;;
 10445                           
 10446                           	psect	text56
 10447  003022                     __ptext56:
 10448                           	opt stack 0
 10449  003022                     _SetCommsLow:
 10450                           	opt stack 22
 10451                           
 10452                           ;boostercomms.c: 484: LATAbits.LATA2 = 0;
 10453                           
 10454                           ;incstack = 0
 10455  003022  9489               	bcf	3977,2,c	;volatile
 10456                           
 10457                           ;boostercomms.c: 485: LATBbits.LATB2 = 1;
 10458  003024  848A               	bsf	3978,2,c	;volatile
 10459  003026  0012               	return		;funcret
 10460  003028                     __end_of_SetCommsLow:
 10461                           	opt stack 0
 10462                           pclatu	equ	0xFFB
 10463                           pclath	equ	0xFFA
 10464                           tblptru	equ	0xFF8
 10465                           tblptrh	equ	0xFF7
 10466                           tblptrl	equ	0xFF6
 10467                           tablat	equ	0xFF5
 10468                           prodh	equ	0xFF4
 10469                           prodl	equ	0xFF3
 10470                           intcon	equ	0xFF2
 10471                           postinc0	equ	0xFEE
 10472                           fsr0h	equ	0xFEA
 10473                           fsr0l	equ	0xFE9
 10474                           wreg	equ	0xFE8
 10475                           indf1	equ	0xFE7
 10476                           postinc1	equ	0xFE6
 10477                           postdec1	equ	0xFE5
 10478                           fsr1h	equ	0xFE2
 10479                           fsr1l	equ	0xFE1
 10480                           indf2	equ	0xFDF
 10481                           postinc2	equ	0xFDE
 10482                           postdec2	equ	0xFDD
 10483                           fsr2h	equ	0xFDA
 10484                           fsr2l	equ	0xFD9
 10485                           status	equ	0xFD8
 10486                           
 10487 ;; *************** function _ReadKeySwitch *****************
 10488 ;; Defined at:
 10489 ;;		line 93 in file "peripherals.c"
 10490 ;; Parameters:    Size  Location     Type
 10491 ;;		None
 10492 ;; Auto vars:     Size  Location     Type
 10493 ;;  keySwitchVal    2    3[COMRAM] unsigned short 
 10494 ;; Return value:  Size  Location     Type
 10495 ;;                  1    wreg      void 
 10496 ;; Registers used:
 10497 ;;		wreg, status,2, status,0, cstack
 10498 ;; Tracked objects:
 10499 ;;		On entry : 0/0
 10500 ;;		On exit  : 0/0
 10501 ;;		Unchanged: 0/0
 10502 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10503 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10504 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10505 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10506 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10507 ;;Total ram usage:        2 bytes
 10508 ;; Hardware stack levels used:    1
 10509 ;; Hardware stack levels required when called:    1
 10510 ;; This function calls:
 10511 ;;		_ReadAnalogVoltage
 10512 ;; This function is called by:
 10513 ;;		_BoosterDataCommandComms
 10514 ;; This function uses a non-reentrant model
 10515 ;;
 10516                           
 10517                           	psect	text57
 10518  002D66                     __ptext57:
 10519                           	opt stack 0
 10520  002D66                     _ReadKeySwitch:
 10521                           	opt stack 21
 10522                           
 10523                           ;peripherals.c: 94: unsigned short keySwitchValueUS;
 10524                           ;peripherals.c: 96: LATEbits.LATE0 = 1;
 10525                           
 10526                           ;incstack = 0
 10527  002D66  808D               	bsf	3981,0,c	;volatile
 10528                           
 10529                           ;peripherals.c: 97: keySwitchValueUS = ReadAnalogVoltage(0);
 10530  002D68  0E00               	movlw	0
 10531  002D6A  EC36  F015         	call	_ReadAnalogVoltage
 10532  002D6E  C001  F004         	movff	?_ReadAnalogVoltage,ReadKeySwitch@keySwitchValueUS
 10533  002D72  C002  F005         	movff	?_ReadAnalogVoltage+1,ReadKeySwitch@keySwitchValueUS+1
 10534                           
 10535                           ;peripherals.c: 98: LATEbits.LATE0 = 0;
 10536  002D76  908D               	bcf	3981,0,c	;volatile
 10537                           
 10538                           ;peripherals.c: 100: __nop();
 10539  002D78  F000               	nop	
 10540                           
 10541                           ;peripherals.c: 102: if(keySwitchValueUS > 80){
 10542  002D7A  5005               	movf	ReadKeySwitch@keySwitchValueUS+1,w,c
 10543  002D7C  E104               	bnz	i2u455_40
 10544  002D7E  0E51               	movlw	81
 10545  002D80  5C04               	subwf	ReadKeySwitch@keySwitchValueUS,w,c
 10546  002D82  A0D8               	btfss	status,0,c
 10547  002D84  D004               	goto	i2l4827
 10548  002D86                     i2u455_40:
 10549                           
 10550                           ;peripherals.c: 103: ISO_COUNTER = 0;
 10551  002D86  0E00               	movlw	0
 10552  002D88  6E4A               	movwf	_ISO_COUNTER,c
 10553                           
 10554                           ;peripherals.c: 104: statusFlagsUSLG &= ~0b000000000000000000100000;
 10555  002D8A  9A36               	bcf	_statusFlagsUSLG,5,c	;volatile
 10556                           
 10557                           ;peripherals.c: 105: }
 10558  002D8C  0012               	return	
 10559  002D8E                     i2l4827:
 10560                           
 10561                           ;peripherals.c: 106: else
 10562                           ;peripherals.c: 107: statusFlagsUSLG |= 0b000000000000000000100000;
 10563  002D8E  8A36               	bsf	_statusFlagsUSLG,5,c	;volatile
 10564  002D90  0012               	return	
 10565  002D92                     __end_of_ReadKeySwitch:
 10566                           	opt stack 0
 10567                           pclatu	equ	0xFFB
 10568                           pclath	equ	0xFFA
 10569                           tblptru	equ	0xFF8
 10570                           tblptrh	equ	0xFF7
 10571                           tblptrl	equ	0xFF6
 10572                           tablat	equ	0xFF5
 10573                           prodh	equ	0xFF4
 10574                           prodl	equ	0xFF3
 10575                           intcon	equ	0xFF2
 10576                           postinc0	equ	0xFEE
 10577                           fsr0h	equ	0xFEA
 10578                           fsr0l	equ	0xFE9
 10579                           wreg	equ	0xFE8
 10580                           indf1	equ	0xFE7
 10581                           postinc1	equ	0xFE6
 10582                           postdec1	equ	0xFE5
 10583                           fsr1h	equ	0xFE2
 10584                           fsr1l	equ	0xFE1
 10585                           indf2	equ	0xFDF
 10586                           postinc2	equ	0xFDE
 10587                           postdec2	equ	0xFDD
 10588                           fsr2h	equ	0xFDA
 10589                           fsr2l	equ	0xFD9
 10590                           status	equ	0xFD8
 10591                           
 10592 ;; *************** function _ReadEarthLeakage *****************
 10593 ;; Defined at:
 10594 ;;		line 71 in file "peripherals.c"
 10595 ;; Parameters:    Size  Location     Type
 10596 ;;		None
 10597 ;; Auto vars:     Size  Location     Type
 10598 ;;  earthLeakage    2    3[COMRAM] unsigned short 
 10599 ;; Return value:  Size  Location     Type
 10600 ;;                  1    wreg      void 
 10601 ;; Registers used:
 10602 ;;		wreg, status,2, status,0, cstack
 10603 ;; Tracked objects:
 10604 ;;		On entry : 0/0
 10605 ;;		On exit  : 0/0
 10606 ;;		Unchanged: 0/0
 10607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10609 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10611 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10612 ;;Total ram usage:        2 bytes
 10613 ;; Hardware stack levels used:    1
 10614 ;; Hardware stack levels required when called:    1
 10615 ;; This function calls:
 10616 ;;		_ReadAnalogVoltage
 10617 ;; This function is called by:
 10618 ;;		_BoosterDataCommandComms
 10619 ;; This function uses a non-reentrant model
 10620 ;;
 10621                           
 10622                           	psect	text58
 10623  002906                     __ptext58:
 10624                           	opt stack 0
 10625  002906                     _ReadEarthLeakage:
 10626                           	opt stack 21
 10627                           
 10628                           ;peripherals.c: 72: unsigned short earthLeakageValueUS;
 10629                           ;peripherals.c: 74: counterELTTests++;
 10630                           
 10631                           ;incstack = 0
 10632  002906  4A3F               	infsnz	_counterELTTests,f,c
 10633  002908  2A40               	incf	_counterELTTests+1,f,c
 10634                           
 10635                           ;peripherals.c: 75: earthLeakageValueUS = ReadAnalogVoltage(1);
 10636  00290A  0E01               	movlw	1
 10637  00290C  EC36  F015         	call	_ReadAnalogVoltage
 10638  002910  C001  F004         	movff	?_ReadAnalogVoltage,ReadEarthLeakage@earthLeakageValueUS
 10639  002914  C002  F005         	movff	?_ReadAnalogVoltage+1,ReadEarthLeakage@earthLeakageValueUS+1
 10640                           
 10641                           ;peripherals.c: 77: if(earthLeakageValueUS > 620)
 10642  002918  0E6D               	movlw	109
 10643  00291A  5C04               	subwf	ReadEarthLeakage@earthLeakageValueUS,w,c
 10644  00291C  0E02               	movlw	2
 10645  00291E  5805               	subwfb	ReadEarthLeakage@earthLeakageValueUS+1,w,c
 10646  002920  A0D8               	btfss	status,0,c
 10647  002922  D003               	goto	i2l4749
 10648                           
 10649                           ;peripherals.c: 78: counterELTFailures++;
 10650  002924  0100               	movlb	0	; () banked
 10651  002926  4BD6               	infsnz	_counterELTFailures& (0+255),f,b
 10652  002928  2BD7               	incf	(_counterELTFailures+1)& (0+255),f,b
 10653  00292A                     i2l4749:
 10654                           
 10655                           ;peripherals.c: 82: if(counterELTTests == 5){
 10656  00292A  0E05               	movlw	5
 10657  00292C  183F               	xorwf	_counterELTTests,w,c
 10658  00292E  1040               	iorwf	_counterELTTests+1,w,c
 10659  002930  A4D8               	btfss	status,2,c
 10660  002932  0012               	return	
 10661                           
 10662                           ;peripherals.c: 83: LATCbits.LATC4 = 0;
 10663  002934  988B               	bcf	3979,4,c	;volatile
 10664                           
 10665                           ;peripherals.c: 84: LATDbits.LATD1 = 1;
 10666  002936  828C               	bsf	3980,1,c	;volatile
 10667                           
 10668                           ;peripherals.c: 86: if(counterELTFailures == counterELTTests)
 10669  002938  503F               	movf	_counterELTTests,w,c
 10670  00293A  0100               	movlb	0	; () banked
 10671  00293C  19D6               	xorwf	_counterELTFailures& (0+255),w,b
 10672  00293E  E107               	bnz	i2l4757
 10673  002940  5040               	movf	_counterELTTests+1,w,c
 10674  002942  0100               	movlb	0	; () banked
 10675  002944  19D7               	xorwf	(_counterELTFailures+1)& (0+255),w,b
 10676  002946  A4D8               	btfss	status,2,c
 10677  002948  D002               	goto	i2l4757
 10678                           
 10679                           ; BSR set to: 0
 10680                           ;peripherals.c: 87: statusFlagsUSLG |= 0b000000000000000000010000;
 10681  00294A  8836               	bsf	_statusFlagsUSLG,4,c	;volatile
 10682  00294C  0012               	return	
 10683  00294E                     i2l4757:
 10684                           
 10685                           ; BSR set to: 0
 10686                           ;peripherals.c: 88: else
 10687                           ;peripherals.c: 89: statusFlagsUSLG &= ~0b000000000000000000010000;
 10688  00294E  9836               	bcf	_statusFlagsUSLG,4,c	;volatile
 10689                           
 10690                           ; BSR set to: 0
 10691  002950  0012               	return	
 10692  002952                     __end_of_ReadEarthLeakage:
 10693                           	opt stack 0
 10694                           pclatu	equ	0xFFB
 10695                           pclath	equ	0xFFA
 10696                           tblptru	equ	0xFF8
 10697                           tblptrh	equ	0xFF7
 10698                           tblptrl	equ	0xFF6
 10699                           tablat	equ	0xFF5
 10700                           prodh	equ	0xFF4
 10701                           prodl	equ	0xFF3
 10702                           intcon	equ	0xFF2
 10703                           postinc0	equ	0xFEE
 10704                           fsr0h	equ	0xFEA
 10705                           fsr0l	equ	0xFE9
 10706                           wreg	equ	0xFE8
 10707                           indf1	equ	0xFE7
 10708                           postinc1	equ	0xFE6
 10709                           postdec1	equ	0xFE5
 10710                           fsr1h	equ	0xFE2
 10711                           fsr1l	equ	0xFE1
 10712                           indf2	equ	0xFDF
 10713                           postinc2	equ	0xFDE
 10714                           postdec2	equ	0xFDD
 10715                           fsr2h	equ	0xFDA
 10716                           fsr2l	equ	0xFD9
 10717                           status	equ	0xFD8
 10718                           
 10719 ;; *************** function _ProcessRXFrame *****************
 10720 ;; Defined at:
 10721 ;;		line 509 in file "boostercomms.c"
 10722 ;; Parameters:    Size  Location     Type
 10723 ;;  recvFrameUS     2    6[COMRAM] unsigned short 
 10724 ;;  frameNumUC      1    8[COMRAM] unsigned char 
 10725 ;; Auto vars:     Size  Location     Type
 10726 ;;  parityCheckU    1   16[COMRAM] unsigned char 
 10727 ;; Return value:  Size  Location     Type
 10728 ;;                  1    wreg      void 
 10729 ;; Registers used:
 10730 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10731 ;; Tracked objects:
 10732 ;;		On entry : 0/0
 10733 ;;		On exit  : 0/0
 10734 ;;		Unchanged: 0/0
 10735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 10736 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10737 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10738 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10739 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 10740 ;;Total ram usage:       11 bytes
 10741 ;; Hardware stack levels used:    1
 10742 ;; Hardware stack levels required when called:    1
 10743 ;; This function calls:
 10744 ;;		_CheckBoosterRXParity
 10745 ;;		i2_ClearPastValue
 10746 ;;		i2_ResetSingleBoosterState
 10747 ;; This function is called by:
 10748 ;;		_BoosterDataCommandComms
 10749 ;; This function uses a non-reentrant model
 10750 ;;
 10751                           
 10752                           	psect	text59
 10753  000B4E                     __ptext59:
 10754                           	opt stack 0
 10755  000B4E                     _ProcessRXFrame:
 10756                           	opt stack 21
 10757                           
 10758                           ;boostercomms.c: 510: unsigned char parityCheckUC;
 10759                           ;boostercomms.c: 512: if(statusFlagsUSLG & 0b000000000000000000000100){
 10760                           
 10761                           ;incstack = 0
 10762  000B4E  A436               	btfss	_statusFlagsUSLG,2,c	;volatile
 10763  000B50  D1B8               	goto	i2l455
 10764                           
 10765                           ;boostercomms.c: 513: if(statusFlagsUSLG & 0b000000000000000010000000)
 10766  000B52  AE36               	btfss	_statusFlagsUSLG,7,c	;volatile
 10767  000B54  D002               	goto	i2l4659
 10768                           
 10769                           ;boostercomms.c: 514: frameNumUC += 15;
 10770  000B56  0E0F               	movlw	15
 10771  000B58  2609               	addwf	ProcessRXFrame@frameNumUC,f,c
 10772  000B5A                     i2l4659:
 10773                           
 10774                           ;boostercomms.c: 516: boosterCommsData[6][frameNumUC-1] = 0b00000000;
 10775  000B5A  0EFF               	movlw	255
 10776  000B5C  6E0A               	movwf	??_ProcessRXFrame& (0+255),c
 10777  000B5E  0EFF               	movlw	255
 10778  000B60  6E0B               	movwf	(??_ProcessRXFrame+1)& (0+255),c
 10779  000B62  5009               	movf	ProcessRXFrame@frameNumUC,w,c
 10780  000B64  6E0C               	movwf	(??_ProcessRXFrame+2)& (0+255),c
 10781  000B66  6A0D               	clrf	(??_ProcessRXFrame+3)& (0+255),c
 10782  000B68  500A               	movf	??_ProcessRXFrame,w,c
 10783  000B6A  260C               	addwf	??_ProcessRXFrame+2,f,c
 10784  000B6C  500B               	movf	??_ProcessRXFrame+1,w,c
 10785  000B6E  220D               	addwfc	??_ProcessRXFrame+3,f,c
 10786  000B70  0EB4               	movlw	low (_boosterCommsData+180)
 10787  000B72  240C               	addwf	??_ProcessRXFrame+2,w,c
 10788  000B74  6ED9               	movwf	fsr2l,c
 10789  000B76  0E03               	movlw	high (_boosterCommsData+180)
 10790  000B78  200D               	addwfc	??_ProcessRXFrame+3,w,c
 10791  000B7A  6EDA               	movwf	fsr2h,c
 10792  000B7C  0E00               	movlw	0
 10793  000B7E  6EDF               	movwf	indf2,c
 10794                           
 10795                           ;boostercomms.c: 517: if(statusFlagsUSLG & 0b000000000000001000000000)
 10796  000B80  A237               	btfss	_statusFlagsUSLG+1,1,c	;volatile
 10797  000B82  D013               	goto	i2l4665
 10798                           
 10799                           ;boostercomms.c: 518: boosterCommsData[6][frameNumUC-1] |= 0b00000001;
 10800  000B84  0EFF               	movlw	255
 10801  000B86  6E0A               	movwf	??_ProcessRXFrame& (0+255),c
 10802  000B88  0EFF               	movlw	255
 10803  000B8A  6E0B               	movwf	(??_ProcessRXFrame+1)& (0+255),c
 10804  000B8C  5009               	movf	ProcessRXFrame@frameNumUC,w,c
 10805  000B8E  6E0C               	movwf	(??_ProcessRXFrame+2)& (0+255),c
 10806  000B90  6A0D               	clrf	(??_ProcessRXFrame+3)& (0+255),c
 10807  000B92  500A               	movf	??_ProcessRXFrame,w,c
 10808  000B94  260C               	addwf	??_ProcessRXFrame+2,f,c
 10809  000B96  500B               	movf	??_ProcessRXFrame+1,w,c
 10810  000B98  220D               	addwfc	??_ProcessRXFrame+3,f,c
 10811  000B9A  0EB4               	movlw	low (_boosterCommsData+180)
 10812  000B9C  240C               	addwf	??_ProcessRXFrame+2,w,c
 10813  000B9E  6ED9               	movwf	fsr2l,c
 10814  000BA0  0E03               	movlw	high (_boosterCommsData+180)
 10815  000BA2  200D               	addwfc	??_ProcessRXFrame+3,w,c
 10816  000BA4  6EDA               	movwf	fsr2h,c
 10817  000BA6  0E00               	movlw	0
 10818  000BA8  80DB               	bsf	plusw2,0,c
 10819  000BAA                     i2l4665:
 10820                           
 10821                           ;boostercomms.c: 519: if(!(parityCheckUC = CheckBoosterRXParity(recvFrameUS)))
 10822  000BAA  C007  F001         	movff	ProcessRXFrame@recvFrameUS,CheckBoosterRXParity@recvFrameUS
 10823  000BAE  C008  F002         	movff	ProcessRXFrame@recvFrameUS+1,CheckBoosterRXParity@recvFrameUS+1
 10824  000BB2  EC3C  F016         	call	_CheckBoosterRXParity	;wreg free
 10825  000BB6  6E11               	movwf	ProcessRXFrame@parityCheckUC,c
 10826  000BB8  5011               	movf	ProcessRXFrame@parityCheckUC,w,c
 10827  000BBA  A4D8               	btfss	status,2,c
 10828  000BBC  D013               	goto	i2l4669
 10829                           
 10830                           ;boostercomms.c: 520: boosterCommsData[6][frameNumUC-1] |= 0b00000010;
 10831  000BBE  0EFF               	movlw	255
 10832  000BC0  6E0A               	movwf	??_ProcessRXFrame& (0+255),c
 10833  000BC2  0EFF               	movlw	255
 10834  000BC4  6E0B               	movwf	(??_ProcessRXFrame+1)& (0+255),c
 10835  000BC6  5009               	movf	ProcessRXFrame@frameNumUC,w,c
 10836  000BC8  6E0C               	movwf	(??_ProcessRXFrame+2)& (0+255),c
 10837  000BCA  6A0D               	clrf	(??_ProcessRXFrame+3)& (0+255),c
 10838  000BCC  500A               	movf	??_ProcessRXFrame,w,c
 10839  000BCE  260C               	addwf	??_ProcessRXFrame+2,f,c
 10840  000BD0  500B               	movf	??_ProcessRXFrame+1,w,c
 10841  000BD2  220D               	addwfc	??_ProcessRXFrame+3,f,c
 10842  000BD4  0EB4               	movlw	low (_boosterCommsData+180)
 10843  000BD6  240C               	addwf	??_ProcessRXFrame+2,w,c
 10844  000BD8  6ED9               	movwf	fsr2l,c
 10845  000BDA  0E03               	movlw	high (_boosterCommsData+180)
 10846  000BDC  200D               	addwfc	??_ProcessRXFrame+3,w,c
 10847  000BDE  6EDA               	movwf	fsr2h,c
 10848  000BE0  0E00               	movlw	0
 10849  000BE2  82DB               	bsf	plusw2,1,c
 10850  000BE4                     i2l4669:
 10851                           
 10852                           ;boostercomms.c: 521: if(statusFlagsUSLG & 0b000000000000000100000000)
 10853  000BE4  A037               	btfss	_statusFlagsUSLG+1,0,c	;volatile
 10854  000BE6  D013               	goto	i2l4673
 10855                           
 10856                           ;boostercomms.c: 522: boosterCommsData[6][frameNumUC-1] |= 0b00000100;
 10857  000BE8  0EFF               	movlw	255
 10858  000BEA  6E0A               	movwf	??_ProcessRXFrame& (0+255),c
 10859  000BEC  0EFF               	movlw	255
 10860  000BEE  6E0B               	movwf	(??_ProcessRXFrame+1)& (0+255),c
 10861  000BF0  5009               	movf	ProcessRXFrame@frameNumUC,w,c
 10862  000BF2  6E0C               	movwf	(??_ProcessRXFrame+2)& (0+255),c
 10863  000BF4  6A0D               	clrf	(??_ProcessRXFrame+3)& (0+255),c
 10864  000BF6  500A               	movf	??_ProcessRXFrame,w,c
 10865  000BF8  260C               	addwf	??_ProcessRXFrame+2,f,c
 10866  000BFA  500B               	movf	??_ProcessRXFrame+1,w,c
 10867  000BFC  220D               	addwfc	??_ProcessRXFrame+3,f,c
 10868  000BFE  0EB4               	movlw	low (_boosterCommsData+180)
 10869  000C00  240C               	addwf	??_ProcessRXFrame+2,w,c
 10870  000C02  6ED9               	movwf	fsr2l,c
 10871  000C04  0E03               	movlw	high (_boosterCommsData+180)
 10872  000C06  200D               	addwfc	??_ProcessRXFrame+3,w,c
 10873  000C08  6EDA               	movwf	fsr2h,c
 10874  000C0A  0E00               	movlw	0
 10875  000C0C  84DB               	bsf	plusw2,2,c
 10876  000C0E                     i2l4673:
 10877                           
 10878                           ;boostercomms.c: 523: if(statusFlagsUSLG & 0b000000000000010000000000)
 10879  000C0E  A437               	btfss	_statusFlagsUSLG+1,2,c	;volatile
 10880  000C10  D013               	goto	i2l4677
 10881                           
 10882                           ;boostercomms.c: 524: boosterCommsData[6][frameNumUC-1] |= 0b00001000;
 10883  000C12  0EFF               	movlw	255
 10884  000C14  6E0A               	movwf	??_ProcessRXFrame& (0+255),c
 10885  000C16  0EFF               	movlw	255
 10886  000C18  6E0B               	movwf	(??_ProcessRXFrame+1)& (0+255),c
 10887  000C1A  5009               	movf	ProcessRXFrame@frameNumUC,w,c
 10888  000C1C  6E0C               	movwf	(??_ProcessRXFrame+2)& (0+255),c
 10889  000C1E  6A0D               	clrf	(??_ProcessRXFrame+3)& (0+255),c
 10890  000C20  500A               	movf	??_ProcessRXFrame,w,c
 10891  000C22  260C               	addwf	??_ProcessRXFrame+2,f,c
 10892  000C24  500B               	movf	??_ProcessRXFrame+1,w,c
 10893  000C26  220D               	addwfc	??_ProcessRXFrame+3,f,c
 10894  000C28  0EB4               	movlw	low (_boosterCommsData+180)
 10895  000C2A  240C               	addwf	??_ProcessRXFrame+2,w,c
 10896  000C2C  6ED9               	movwf	fsr2l,c
 10897  000C2E  0E03               	movlw	high (_boosterCommsData+180)
 10898  000C30  200D               	addwfc	??_ProcessRXFrame+3,w,c
 10899  000C32  6EDA               	movwf	fsr2h,c
 10900  000C34  0E00               	movlw	0
 10901  000C36  86DB               	bsf	plusw2,3,c
 10902  000C38                     i2l4677:
 10903                           
 10904                           ;boostercomms.c: 526: if(!(statusFlagsUSLG & 0b000000000000001000000000)){
 10905  000C38  B237               	btfsc	_statusFlagsUSLG+1,1,c	;volatile
 10906  000C3A  D047               	goto	i2l4693
 10907                           
 10908                           ;boostercomms.c: 527: if(boosterCommsDataSerial[frameNumUC-1]){
 10909  000C3C  0EFE               	movlw	254
 10910  000C3E  6E0A               	movwf	??_ProcessRXFrame& (0+255),c
 10911  000C40  0EFF               	movlw	255
 10912  000C42  6E0B               	movwf	(??_ProcessRXFrame+1)& (0+255),c
 10913  000C44  5009               	movf	ProcessRXFrame@frameNumUC,w,c
 10914  000C46  6E0C               	movwf	(??_ProcessRXFrame+2)& (0+255),c
 10915  000C48  6A0D               	clrf	(??_ProcessRXFrame+3)& (0+255),c
 10916  000C4A  90D8               	bcf	status,0,c
 10917  000C4C  360C               	rlcf	??_ProcessRXFrame+2,f,c
 10918  000C4E  360D               	rlcf	??_ProcessRXFrame+3,f,c
 10919  000C50  500A               	movf	??_ProcessRXFrame,w,c
 10920  000C52  260C               	addwf	??_ProcessRXFrame+2,f,c
 10921  000C54  500B               	movf	??_ProcessRXFrame+1,w,c
 10922  000C56  220D               	addwfc	??_ProcessRXFrame+3,f,c
 10923  000C58  0E84               	movlw	low _boosterCommsDataSerial
 10924  000C5A  240C               	addwf	??_ProcessRXFrame+2,w,c
 10925  000C5C  6ED9               	movwf	fsr2l,c
 10926  000C5E  0E01               	movlw	high _boosterCommsDataSerial
 10927  000C60  200D               	addwfc	??_ProcessRXFrame+3,w,c
 10928  000C62  6EDA               	movwf	fsr2h,c
 10929  000C64  50DE               	movf	postinc2,w,c
 10930  000C66  10DE               	iorwf	postinc2,w,c
 10931  000C68  B4D8               	btfsc	status,2,c
 10932  000C6A  0012               	return	
 10933                           
 10934                           ;boostercomms.c: 528: boosterCommsData[4][frameNumUC-1]++;
 10935  000C6C  0EFF               	movlw	255
 10936  000C6E  6E0A               	movwf	??_ProcessRXFrame& (0+255),c
 10937  000C70  0EFF               	movlw	255
 10938  000C72  6E0B               	movwf	(??_ProcessRXFrame+1)& (0+255),c
 10939  000C74  5009               	movf	ProcessRXFrame@frameNumUC,w,c
 10940  000C76  6E0C               	movwf	(??_ProcessRXFrame+2)& (0+255),c
 10941  000C78  6A0D               	clrf	(??_ProcessRXFrame+3)& (0+255),c
 10942  000C7A  500A               	movf	??_ProcessRXFrame,w,c
 10943  000C7C  260C               	addwf	??_ProcessRXFrame+2,f,c
 10944  000C7E  500B               	movf	??_ProcessRXFrame+1,w,c
 10945  000C80  220D               	addwfc	??_ProcessRXFrame+3,f,c
 10946  000C82  0E78               	movlw	low (_boosterCommsData+120)
 10947  000C84  240C               	addwf	??_ProcessRXFrame+2,w,c
 10948  000C86  6ED9               	movwf	fsr2l,c
 10949  000C88  0E03               	movlw	high (_boosterCommsData+120)
 10950  000C8A  200D               	addwfc	??_ProcessRXFrame+3,w,c
 10951  000C8C  6EDA               	movwf	fsr2h,c
 10952  000C8E  2ADF               	incf	indf2,f,c
 10953                           
 10954                           ;boostercomms.c: 529: if(boosterCommsData[4][frameNumUC-1] == 10){
 10955  000C90  0EFF               	movlw	255
 10956  000C92  6E0A               	movwf	??_ProcessRXFrame& (0+255),c
 10957  000C94  0EFF               	movlw	255
 10958  000C96  6E0B               	movwf	(??_ProcessRXFrame+1)& (0+255),c
 10959  000C98  5009               	movf	ProcessRXFrame@frameNumUC,w,c
 10960  000C9A  6E0C               	movwf	(??_ProcessRXFrame+2)& (0+255),c
 10961  000C9C  6A0D               	clrf	(??_ProcessRXFrame+3)& (0+255),c
 10962  000C9E  500A               	movf	??_ProcessRXFrame,w,c
 10963  000CA0  260C               	addwf	??_ProcessRXFrame+2,f,c
 10964  000CA2  500B               	movf	??_ProcessRXFrame+1,w,c
 10965  000CA4  220D               	addwfc	??_ProcessRXFrame+3,f,c
 10966  000CA6  0E78               	movlw	low (_boosterCommsData+120)
 10967  000CA8  240C               	addwf	??_ProcessRXFrame+2,w,c
 10968  000CAA  6ED9               	movwf	fsr2l,c
 10969  000CAC  0E03               	movlw	high (_boosterCommsData+120)
 10970  000CAE  200D               	addwfc	??_ProcessRXFrame+3,w,c
 10971  000CB0  6EDA               	movwf	fsr2h,c
 10972  000CB2  0E0A               	movlw	10
 10973  000CB4  18DE               	xorwf	postinc2,w,c
 10974  000CB6  A4D8               	btfss	status,2,c
 10975  000CB8  0012               	return	
 10976                           
 10977                           ;boostercomms.c: 530: ResetSingleBoosterState(frameNumUC-1);
 10978  000CBA  0409               	decf	ProcessRXFrame@frameNumUC,w,c
 10979  000CBC  EC56  F010         	call	i2_ResetSingleBoosterState
 10980                           
 10981                           ;boostercomms.c: 531: statusFlagsUSLG |= 0b000001000000000000000000;
 10982  000CC0  8438               	bsf	_statusFlagsUSLG+2,2,c	;volatile
 10983                           
 10984                           ;boostercomms.c: 532: ClearPastValue(frameNumUC);
 10985  000CC2  5009               	movf	ProcessRXFrame@frameNumUC,w,c
 10986  000CC4  ECC5  F013         	call	i2_ClearPastValue
 10987                           
 10988                           ;boostercomms.c: 533: }
 10989                           ;boostercomms.c: 534: }
 10990                           ;boostercomms.c: 535: return;
 10991  000CC8  0012               	return	
 10992  000CCA                     i2l4693:
 10993                           
 10994                           ;boostercomms.c: 537: parityCheckUC ||
 10995                           ;boostercomms.c: 538: (statusFlagsUSLG & 0b000000000000000100000000)){
 10996  000CCA  C007  F00A         	movff	ProcessRXFrame@recvFrameUS,??_ProcessRXFrame
 10997  000CCE  C008  F00B         	movff	ProcessRXFrame@recvFrameUS+1,??_ProcessRXFrame+1
 10998  000CD2  0E09               	movlw	9
 10999  000CD4  6E0C               	movwf	(??_ProcessRXFrame+2)& (0+255),c
 11000  000CD6                     i2u432_45:
 11001  000CD6  90D8               	bcf	status,0,c
 11002  000CD8  320B               	rrcf	??_ProcessRXFrame+1,f,c
 11003  000CDA  320A               	rrcf	??_ProcessRXFrame,f,c
 11004  000CDC  2E0C               	decfsz	(??_ProcessRXFrame+2)& (0+255),f,c
 11005  000CDE  D7FB               	goto	i2u432_45
 11006  000CE0  0E1F               	movlw	31
 11007  000CE2  160A               	andwf	??_ProcessRXFrame,f,c
 11008  000CE4  0E00               	movlw	0
 11009  000CE6  160B               	andwf	??_ProcessRXFrame+1,f,c
 11010  000CE8  5009               	movf	ProcessRXFrame@frameNumUC,w,c
 11011  000CEA  6E0D               	movwf	(??_ProcessRXFrame+3)& (0+255),c
 11012  000CEC  6A0E               	clrf	(??_ProcessRXFrame+4)& (0+255),c
 11013  000CEE  500A               	movf	??_ProcessRXFrame,w,c
 11014  000CF0  180D               	xorwf	??_ProcessRXFrame+3,w,c
 11015  000CF2  E109               	bnz	i2l4699
 11016  000CF4  500B               	movf	??_ProcessRXFrame+1,w,c
 11017  000CF6  180E               	xorwf	??_ProcessRXFrame+4,w,c
 11018  000CF8  A4D8               	btfss	status,2,c
 11019  000CFA  D005               	goto	i2l4699
 11020  000CFC  5011               	movf	ProcessRXFrame@parityCheckUC,w,c
 11021  000CFE  B4D8               	btfsc	status,2,c
 11022  000D00  B037               	btfsc	_statusFlagsUSLG+1,0,c	;volatile
 11023  000D02  D001               	goto	i2l4699
 11024  000D04  D03A               	goto	i2l4705
 11025  000D06                     i2l4699:
 11026                           
 11027                           ;boostercomms.c: 539: if(boosterCommsData[5][frameNumUC-1] < 10)
 11028  000D06  0EFF               	movlw	255
 11029  000D08  6E0A               	movwf	??_ProcessRXFrame& (0+255),c
 11030  000D0A  0EFF               	movlw	255
 11031  000D0C  6E0B               	movwf	(??_ProcessRXFrame+1)& (0+255),c
 11032  000D0E  5009               	movf	ProcessRXFrame@frameNumUC,w,c
 11033  000D10  6E0C               	movwf	(??_ProcessRXFrame+2)& (0+255),c
 11034  000D12  6A0D               	clrf	(??_ProcessRXFrame+3)& (0+255),c
 11035  000D14  500A               	movf	??_ProcessRXFrame,w,c
 11036  000D16  260C               	addwf	??_ProcessRXFrame+2,f,c
 11037  000D18  500B               	movf	??_ProcessRXFrame+1,w,c
 11038  000D1A  220D               	addwfc	??_ProcessRXFrame+3,f,c
 11039  000D1C  0E96               	movlw	low (_boosterCommsData+150)
 11040  000D1E  240C               	addwf	??_ProcessRXFrame+2,w,c
 11041  000D20  6ED9               	movwf	fsr2l,c
 11042  000D22  0E03               	movlw	high (_boosterCommsData+150)
 11043  000D24  200D               	addwfc	??_ProcessRXFrame+3,w,c
 11044  000D26  6EDA               	movwf	fsr2h,c
 11045  000D28  0E0A               	movlw	10
 11046  000D2A  60DF               	cpfslt	indf2,c
 11047  000D2C  D012               	goto	i2l469
 11048                           
 11049                           ;boostercomms.c: 540: boosterCommsData[5][frameNumUC-1]++;
 11050  000D2E  0EFF               	movlw	255
 11051  000D30  6E0A               	movwf	??_ProcessRXFrame& (0+255),c
 11052  000D32  0EFF               	movlw	255
 11053  000D34  6E0B               	movwf	(??_ProcessRXFrame+1)& (0+255),c
 11054  000D36  5009               	movf	ProcessRXFrame@frameNumUC,w,c
 11055  000D38  6E0C               	movwf	(??_ProcessRXFrame+2)& (0+255),c
 11056  000D3A  6A0D               	clrf	(??_ProcessRXFrame+3)& (0+255),c
 11057  000D3C  500A               	movf	??_ProcessRXFrame,w,c
 11058  000D3E  260C               	addwf	??_ProcessRXFrame+2,f,c
 11059  000D40  500B               	movf	??_ProcessRXFrame+1,w,c
 11060  000D42  220D               	addwfc	??_ProcessRXFrame+3,f,c
 11061  000D44  0E96               	movlw	low (_boosterCommsData+150)
 11062  000D46  240C               	addwf	??_ProcessRXFrame+2,w,c
 11063  000D48  6ED9               	movwf	fsr2l,c
 11064  000D4A  0E03               	movlw	high (_boosterCommsData+150)
 11065  000D4C  200D               	addwfc	??_ProcessRXFrame+3,w,c
 11066  000D4E  6EDA               	movwf	fsr2h,c
 11067  000D50  2ADF               	incf	indf2,f,c
 11068  000D52                     i2l469:
 11069                           
 11070                           ;boostercomms.c: 541: boosterCommsData[6][frameNumUC-1] |= 0b00000100;
 11071  000D52  0EFF               	movlw	255
 11072  000D54  6E0A               	movwf	??_ProcessRXFrame& (0+255),c
 11073  000D56  0EFF               	movlw	255
 11074  000D58  6E0B               	movwf	(??_ProcessRXFrame+1)& (0+255),c
 11075  000D5A  5009               	movf	ProcessRXFrame@frameNumUC,w,c
 11076  000D5C  6E0C               	movwf	(??_ProcessRXFrame+2)& (0+255),c
 11077  000D5E  6A0D               	clrf	(??_ProcessRXFrame+3)& (0+255),c
 11078  000D60  500A               	movf	??_ProcessRXFrame,w,c
 11079  000D62  260C               	addwf	??_ProcessRXFrame+2,f,c
 11080  000D64  500B               	movf	??_ProcessRXFrame+1,w,c
 11081  000D66  220D               	addwfc	??_ProcessRXFrame+3,f,c
 11082  000D68  0EB4               	movlw	low (_boosterCommsData+180)
 11083  000D6A  240C               	addwf	??_ProcessRXFrame+2,w,c
 11084  000D6C  6ED9               	movwf	fsr2l,c
 11085  000D6E  0E03               	movlw	high (_boosterCommsData+180)
 11086  000D70  200D               	addwfc	??_ProcessRXFrame+3,w,c
 11087  000D72  6EDA               	movwf	fsr2h,c
 11088  000D74  0E00               	movlw	0
 11089  000D76  84DB               	bsf	plusw2,2,c
 11090                           
 11091                           ;boostercomms.c: 542: return;
 11092  000D78  0012               	return	
 11093  000D7A                     i2l4705:
 11094                           
 11095                           ;boostercomms.c: 543: }
 11096                           ;boostercomms.c: 545: boosterCommsData[5][frameNumUC-1] = 0;
 11097  000D7A  0EFF               	movlw	255
 11098  000D7C  6E0A               	movwf	??_ProcessRXFrame& (0+255),c
 11099  000D7E  0EFF               	movlw	255
 11100  000D80  6E0B               	movwf	(??_ProcessRXFrame+1)& (0+255),c
 11101  000D82  5009               	movf	ProcessRXFrame@frameNumUC,w,c
 11102  000D84  6E0C               	movwf	(??_ProcessRXFrame+2)& (0+255),c
 11103  000D86  6A0D               	clrf	(??_ProcessRXFrame+3)& (0+255),c
 11104  000D88  500A               	movf	??_ProcessRXFrame,w,c
 11105  000D8A  260C               	addwf	??_ProcessRXFrame+2,f,c
 11106  000D8C  500B               	movf	??_ProcessRXFrame+1,w,c
 11107  000D8E  220D               	addwfc	??_ProcessRXFrame+3,f,c
 11108  000D90  0E96               	movlw	low (_boosterCommsData+150)
 11109  000D92  240C               	addwf	??_ProcessRXFrame+2,w,c
 11110  000D94  6ED9               	movwf	fsr2l,c
 11111  000D96  0E03               	movlw	high (_boosterCommsData+150)
 11112  000D98  200D               	addwfc	??_ProcessRXFrame+3,w,c
 11113  000D9A  6EDA               	movwf	fsr2h,c
 11114  000D9C  0E00               	movlw	0
 11115  000D9E  6EDF               	movwf	indf2,c
 11116                           
 11117                           ;boostercomms.c: 546: boosterCommsData[4][frameNumUC-1] = 0;
 11118  000DA0  0EFF               	movlw	255
 11119  000DA2  6E0A               	movwf	??_ProcessRXFrame& (0+255),c
 11120  000DA4  0EFF               	movlw	255
 11121  000DA6  6E0B               	movwf	(??_ProcessRXFrame+1)& (0+255),c
 11122  000DA8  5009               	movf	ProcessRXFrame@frameNumUC,w,c
 11123  000DAA  6E0C               	movwf	(??_ProcessRXFrame+2)& (0+255),c
 11124  000DAC  6A0D               	clrf	(??_ProcessRXFrame+3)& (0+255),c
 11125  000DAE  500A               	movf	??_ProcessRXFrame,w,c
 11126  000DB0  260C               	addwf	??_ProcessRXFrame+2,f,c
 11127  000DB2  500B               	movf	??_ProcessRXFrame+1,w,c
 11128  000DB4  220D               	addwfc	??_ProcessRXFrame+3,f,c
 11129  000DB6  0E78               	movlw	low (_boosterCommsData+120)
 11130  000DB8  240C               	addwf	??_ProcessRXFrame+2,w,c
 11131  000DBA  6ED9               	movwf	fsr2l,c
 11132  000DBC  0E03               	movlw	high (_boosterCommsData+120)
 11133  000DBE  200D               	addwfc	??_ProcessRXFrame+3,w,c
 11134  000DC0  6EDA               	movwf	fsr2h,c
 11135  000DC2  0E00               	movlw	0
 11136  000DC4  6EDF               	movwf	indf2,c
 11137                           
 11138                           ;boostercomms.c: 548: boosterCommsData[7][frameNumUC-1] = (recvFrameUS & 0b1100000000000
      +                          000) >> 14;
 11139  000DC6  0EFF               	movlw	255
 11140  000DC8  6E0A               	movwf	??_ProcessRXFrame& (0+255),c
 11141  000DCA  0EFF               	movlw	255
 11142  000DCC  6E0B               	movwf	(??_ProcessRXFrame+1)& (0+255),c
 11143  000DCE  5009               	movf	ProcessRXFrame@frameNumUC,w,c
 11144  000DD0  6E0C               	movwf	(??_ProcessRXFrame+2)& (0+255),c
 11145  000DD2  6A0D               	clrf	(??_ProcessRXFrame+3)& (0+255),c
 11146  000DD4  500A               	movf	??_ProcessRXFrame,w,c
 11147  000DD6  260C               	addwf	??_ProcessRXFrame+2,f,c
 11148  000DD8  500B               	movf	??_ProcessRXFrame+1,w,c
 11149  000DDA  220D               	addwfc	??_ProcessRXFrame+3,f,c
 11150  000DDC  0ED2               	movlw	low (_boosterCommsData+210)
 11151  000DDE  240C               	addwf	??_ProcessRXFrame+2,w,c
 11152  000DE0  6ED9               	movwf	fsr2l,c
 11153  000DE2  0E03               	movlw	high (_boosterCommsData+210)
 11154  000DE4  200D               	addwfc	??_ProcessRXFrame+3,w,c
 11155  000DE6  6EDA               	movwf	fsr2h,c
 11156  000DE8  C007  F00E         	movff	ProcessRXFrame@recvFrameUS,??_ProcessRXFrame+4
 11157  000DEC  C008  F00F         	movff	ProcessRXFrame@recvFrameUS+1,??_ProcessRXFrame+5
 11158  000DF0  0E0E               	movlw	14
 11159  000DF2  6E10               	movwf	(??_ProcessRXFrame+6)& (0+255),c
 11160  000DF4                     i2u437_45:
 11161  000DF4  90D8               	bcf	status,0,c
 11162  000DF6  320F               	rrcf	??_ProcessRXFrame+5,f,c
 11163  000DF8  320E               	rrcf	??_ProcessRXFrame+4,f,c
 11164  000DFA  2E10               	decfsz	(??_ProcessRXFrame+6)& (0+255),f,c
 11165  000DFC  D7FB               	goto	i2u437_45
 11166  000DFE  500E               	movf	??_ProcessRXFrame+4,w,c
 11167  000E00  0B03               	andlw	3
 11168  000E02  6EDF               	movwf	indf2,c
 11169                           
 11170                           ;boostercomms.c: 549: switch(commsDataModeUCG){
 11171  000E04  D050               	goto	i2l4717
 11172  000E06                     i2l4707:
 11173                           
 11174                           ;boostercomms.c: 551: boosterCommsData[0][frameNumUC-1] = (recvFrameUS & 0b0000000011111
      +                          111);
 11175  000E06  0EFF               	movlw	255
 11176  000E08  6E0A               	movwf	??_ProcessRXFrame& (0+255),c
 11177  000E0A  0EFF               	movlw	255
 11178  000E0C  6E0B               	movwf	(??_ProcessRXFrame+1)& (0+255),c
 11179  000E0E  5009               	movf	ProcessRXFrame@frameNumUC,w,c
 11180  000E10  6E0C               	movwf	(??_ProcessRXFrame+2)& (0+255),c
 11181  000E12  6A0D               	clrf	(??_ProcessRXFrame+3)& (0+255),c
 11182  000E14  500A               	movf	??_ProcessRXFrame,w,c
 11183  000E16  260C               	addwf	??_ProcessRXFrame+2,f,c
 11184  000E18  500B               	movf	??_ProcessRXFrame+1,w,c
 11185  000E1A  220D               	addwfc	??_ProcessRXFrame+3,f,c
 11186  000E1C  0E00               	movlw	low _boosterCommsData
 11187  000E1E  240C               	addwf	??_ProcessRXFrame+2,w,c
 11188  000E20  6ED9               	movwf	fsr2l,c
 11189  000E22  0E03               	movlw	high _boosterCommsData
 11190  000E24  200D               	addwfc	??_ProcessRXFrame+3,w,c
 11191  000E26  6EDA               	movwf	fsr2h,c
 11192  000E28  C007  FFDF         	movff	ProcessRXFrame@recvFrameUS,indf2
 11193                           
 11194                           ;boostercomms.c: 552: break;
 11195  000E2C  0012               	return	
 11196  000E2E                     i2l4709:
 11197                           
 11198                           ;boostercomms.c: 554: boosterCommsData[1][frameNumUC-1] = (recvFrameUS & 0b0000000011111
      +                          111);
 11199  000E2E  0EFF               	movlw	255
 11200  000E30  6E0A               	movwf	??_ProcessRXFrame& (0+255),c
 11201  000E32  0EFF               	movlw	255
 11202  000E34  6E0B               	movwf	(??_ProcessRXFrame+1)& (0+255),c
 11203  000E36  5009               	movf	ProcessRXFrame@frameNumUC,w,c
 11204  000E38  6E0C               	movwf	(??_ProcessRXFrame+2)& (0+255),c
 11205  000E3A  6A0D               	clrf	(??_ProcessRXFrame+3)& (0+255),c
 11206  000E3C  500A               	movf	??_ProcessRXFrame,w,c
 11207  000E3E  260C               	addwf	??_ProcessRXFrame+2,f,c
 11208  000E40  500B               	movf	??_ProcessRXFrame+1,w,c
 11209  000E42  220D               	addwfc	??_ProcessRXFrame+3,f,c
 11210  000E44  0E1E               	movlw	low (_boosterCommsData+30)
 11211  000E46  240C               	addwf	??_ProcessRXFrame+2,w,c
 11212  000E48  6ED9               	movwf	fsr2l,c
 11213  000E4A  0E03               	movlw	high (_boosterCommsData+30)
 11214  000E4C  200D               	addwfc	??_ProcessRXFrame+3,w,c
 11215  000E4E  6EDA               	movwf	fsr2h,c
 11216  000E50  C007  FFDF         	movff	ProcessRXFrame@recvFrameUS,indf2
 11217                           
 11218                           ;boostercomms.c: 555: break;
 11219  000E54  0012               	return	
 11220  000E56                     i2l4711:
 11221                           
 11222                           ;boostercomms.c: 557: boosterCommsData[2][frameNumUC-1] = (recvFrameUS & 0b0000000011111
      +                          111);
 11223  000E56  0EFF               	movlw	255
 11224  000E58  6E0A               	movwf	??_ProcessRXFrame& (0+255),c
 11225  000E5A  0EFF               	movlw	255
 11226  000E5C  6E0B               	movwf	(??_ProcessRXFrame+1)& (0+255),c
 11227  000E5E  5009               	movf	ProcessRXFrame@frameNumUC,w,c
 11228  000E60  6E0C               	movwf	(??_ProcessRXFrame+2)& (0+255),c
 11229  000E62  6A0D               	clrf	(??_ProcessRXFrame+3)& (0+255),c
 11230  000E64  500A               	movf	??_ProcessRXFrame,w,c
 11231  000E66  260C               	addwf	??_ProcessRXFrame+2,f,c
 11232  000E68  500B               	movf	??_ProcessRXFrame+1,w,c
 11233  000E6A  220D               	addwfc	??_ProcessRXFrame+3,f,c
 11234  000E6C  0E3C               	movlw	low (_boosterCommsData+60)
 11235  000E6E  240C               	addwf	??_ProcessRXFrame+2,w,c
 11236  000E70  6ED9               	movwf	fsr2l,c
 11237  000E72  0E03               	movlw	high (_boosterCommsData+60)
 11238  000E74  200D               	addwfc	??_ProcessRXFrame+3,w,c
 11239  000E76  6EDA               	movwf	fsr2h,c
 11240  000E78  C007  FFDF         	movff	ProcessRXFrame@recvFrameUS,indf2
 11241                           
 11242                           ;boostercomms.c: 558: break;
 11243  000E7C  0012               	return	
 11244  000E7E                     i2l4713:
 11245                           
 11246                           ;boostercomms.c: 560: boosterCommsData[3][frameNumUC-1] = (recvFrameUS & 0b0000000011111
      +                          111);
 11247  000E7E  0EFF               	movlw	255
 11248  000E80  6E0A               	movwf	??_ProcessRXFrame& (0+255),c
 11249  000E82  0EFF               	movlw	255
 11250  000E84  6E0B               	movwf	(??_ProcessRXFrame+1)& (0+255),c
 11251  000E86  5009               	movf	ProcessRXFrame@frameNumUC,w,c
 11252  000E88  6E0C               	movwf	(??_ProcessRXFrame+2)& (0+255),c
 11253  000E8A  6A0D               	clrf	(??_ProcessRXFrame+3)& (0+255),c
 11254  000E8C  500A               	movf	??_ProcessRXFrame,w,c
 11255  000E8E  260C               	addwf	??_ProcessRXFrame+2,f,c
 11256  000E90  500B               	movf	??_ProcessRXFrame+1,w,c
 11257  000E92  220D               	addwfc	??_ProcessRXFrame+3,f,c
 11258  000E94  0E5A               	movlw	low (_boosterCommsData+90)
 11259  000E96  240C               	addwf	??_ProcessRXFrame+2,w,c
 11260  000E98  6ED9               	movwf	fsr2l,c
 11261  000E9A  0E03               	movlw	high (_boosterCommsData+90)
 11262  000E9C  200D               	addwfc	??_ProcessRXFrame+3,w,c
 11263  000E9E  6EDA               	movwf	fsr2h,c
 11264  000EA0  C007  FFDF         	movff	ProcessRXFrame@recvFrameUS,indf2
 11265                           
 11266                           ;boostercomms.c: 562: }
 11267                           
 11268                           ;boostercomms.c: 561: break;
 11269  000EA4  0012               	return	
 11270  000EA6                     i2l4717:
 11271  000EA6  5052               	movf	_commsDataModeUCG,w,c
 11272                           
 11273                           ; Switch size 1, requested type "space"
 11274                           ; Number of cases is 4, Range of values is 0 to 3
 11275                           ; switch strategies available:
 11276                           ; Name         Instructions Cycles
 11277                           ; simple_byte           13     7 (average)
 11278                           ;	Chosen strategy is simple_byte
 11279  000EA8  0A00               	xorlw	0	; case 0
 11280  000EAA  B4D8               	btfsc	status,2,c
 11281  000EAC  D7AC               	goto	i2l4707
 11282  000EAE  0A01               	xorlw	1	; case 1
 11283  000EB0  B4D8               	btfsc	status,2,c
 11284  000EB2  D7BD               	goto	i2l4709
 11285  000EB4  0A03               	xorlw	3	; case 2
 11286  000EB6  B4D8               	btfsc	status,2,c
 11287  000EB8  D7CE               	goto	i2l4711
 11288  000EBA  0A01               	xorlw	1	; case 3
 11289  000EBC  A4D8               	btfss	status,2,c
 11290                           
 11291                           ;boostercomms.c: 563: }else{
 11292  000EBE  0012               	return	
 11293  000EC0  D7DE               	goto	i2l4713
 11294  000EC2                     i2l455:
 11295                           
 11296                           ;boostercomms.c: 564: statusFlagsUSLG &= ~(0b000000000000100000000000 | 0b00000000000100
      +                          0000000000 | 0b000000000010000000000000 | 0b000000000100000000000000);
 11297  000EC2  0EFF               	movlw	255
 11298  000EC4  1636               	andwf	_statusFlagsUSLG,f,c	;volatile
 11299  000EC6  0E87               	movlw	135
 11300  000EC8  1637               	andwf	_statusFlagsUSLG+1,f,c	;volatile
 11301  000ECA  0EFF               	movlw	255
 11302  000ECC  1638               	andwf	_statusFlagsUSLG+2,f,c	;volatile
 11303                           
 11304                           ;boostercomms.c: 565: if(statusFlagsUSLG & 0b000000000000001000000000)
 11305  000ECE  B237               	btfsc	_statusFlagsUSLG+1,1,c	;volatile
 11306                           
 11307                           ;boostercomms.c: 566: statusFlagsUSLG |= 0b000000000000100000000000;
 11308  000ED0  8637               	bsf	_statusFlagsUSLG+1,3,c	;volatile
 11309                           
 11310                           ;boostercomms.c: 567: if(!CheckBoosterRXParity(recvFrameUS))
 11311  000ED2  C007  F001         	movff	ProcessRXFrame@recvFrameUS,CheckBoosterRXParity@recvFrameUS
 11312  000ED6  C008  F002         	movff	ProcessRXFrame@recvFrameUS+1,CheckBoosterRXParity@recvFrameUS+1
 11313  000EDA  EC3C  F016         	call	_CheckBoosterRXParity	;wreg free
 11314  000EDE  0900               	iorlw	0
 11315  000EE0  B4D8               	btfsc	status,2,c
 11316                           
 11317                           ;boostercomms.c: 568: statusFlagsUSLG |= 0b000000000001000000000000;
 11318  000EE2  8837               	bsf	_statusFlagsUSLG+1,4,c	;volatile
 11319                           
 11320                           ;boostercomms.c: 569: if(statusFlagsUSLG & 0b000000000000000100000000)
 11321  000EE4  B037               	btfsc	_statusFlagsUSLG+1,0,c	;volatile
 11322                           
 11323                           ;boostercomms.c: 570: statusFlagsUSLG |= 0b000000000010000000000000;
 11324  000EE6  8A37               	bsf	_statusFlagsUSLG+1,5,c	;volatile
 11325                           
 11326                           ;boostercomms.c: 571: if(statusFlagsUSLG & 0b000000000000010000000000)
 11327  000EE8  B437               	btfsc	_statusFlagsUSLG+1,2,c	;volatile
 11328                           
 11329                           ;boostercomms.c: 572: statusFlagsUSLG |= 0b000000000100000000000000;
 11330  000EEA  8C37               	bsf	_statusFlagsUSLG+1,6,c	;volatile
 11331                           
 11332                           ;boostercomms.c: 573: commandResponseUS = recvFrameUS;
 11333  000EEC  C007  F05A         	movff	ProcessRXFrame@recvFrameUS,_commandResponseUS
 11334  000EF0  C008  F05B         	movff	ProcessRXFrame@recvFrameUS+1,_commandResponseUS+1
 11335  000EF4  0012               	return	
 11336  000EF6                     __end_of_ProcessRXFrame:
 11337                           	opt stack 0
 11338                           pclatu	equ	0xFFB
 11339                           pclath	equ	0xFFA
 11340                           tblptru	equ	0xFF8
 11341                           tblptrh	equ	0xFF7
 11342                           tblptrl	equ	0xFF6
 11343                           tablat	equ	0xFF5
 11344                           prodh	equ	0xFF4
 11345                           prodl	equ	0xFF3
 11346                           intcon	equ	0xFF2
 11347                           postinc0	equ	0xFEE
 11348                           fsr0h	equ	0xFEA
 11349                           fsr0l	equ	0xFE9
 11350                           wreg	equ	0xFE8
 11351                           indf1	equ	0xFE7
 11352                           postinc1	equ	0xFE6
 11353                           postdec1	equ	0xFE5
 11354                           fsr1h	equ	0xFE2
 11355                           fsr1l	equ	0xFE1
 11356                           indf2	equ	0xFDF
 11357                           postinc2	equ	0xFDE
 11358                           postdec2	equ	0xFDD
 11359                           plusw2	equ	0xFDB
 11360                           fsr2h	equ	0xFDA
 11361                           fsr2l	equ	0xFD9
 11362                           status	equ	0xFD8
 11363                           
 11364 ;; *************** function _InitEarthLeakage *****************
 11365 ;; Defined at:
 11366 ;;		line 64 in file "peripherals.c"
 11367 ;; Parameters:    Size  Location     Type
 11368 ;;		None
 11369 ;; Auto vars:     Size  Location     Type
 11370 ;;		None
 11371 ;; Return value:  Size  Location     Type
 11372 ;;                  1    wreg      void 
 11373 ;; Registers used:
 11374 ;;		wreg, status,2
 11375 ;; Tracked objects:
 11376 ;;		On entry : 0/0
 11377 ;;		On exit  : 0/0
 11378 ;;		Unchanged: 0/0
 11379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11380 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11381 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11383 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11384 ;;Total ram usage:        0 bytes
 11385 ;; Hardware stack levels used:    1
 11386 ;; This function calls:
 11387 ;;		Nothing
 11388 ;; This function is called by:
 11389 ;;		_BoosterDataCommandComms
 11390 ;; This function uses a non-reentrant model
 11391 ;;
 11392                           
 11393                           	psect	text60
 11394  002F1A                     __ptext60:
 11395                           	opt stack 0
 11396  002F1A                     _InitEarthLeakage:
 11397                           	opt stack 22
 11398                           
 11399                           ;peripherals.c: 65: counterELTFailures =0;
 11400                           
 11401                           ;incstack = 0
 11402  002F1A  0E00               	movlw	0
 11403  002F1C  0100               	movlb	0	; () banked
 11404  002F1E  6FD7               	movwf	(_counterELTFailures+1)& (0+255),b
 11405  002F20  0E00               	movlw	0
 11406  002F22  6FD6               	movwf	_counterELTFailures& (0+255),b
 11407                           
 11408                           ;peripherals.c: 66: counterELTTests=0;
 11409  002F24  0E00               	movlw	0
 11410  002F26  6E40               	movwf	_counterELTTests+1,c
 11411  002F28  0E00               	movlw	0
 11412  002F2A  6E3F               	movwf	_counterELTTests,c
 11413                           
 11414                           ; BSR set to: 0
 11415                           ;peripherals.c: 67: LATDbits.LATD1 = 0;
 11416  002F2C  928C               	bcf	3980,1,c	;volatile
 11417                           
 11418                           ; BSR set to: 0
 11419                           ;peripherals.c: 68: LATCbits.LATC4 = 1;
 11420  002F2E  888B               	bsf	3979,4,c	;volatile
 11421                           
 11422                           ; BSR set to: 0
 11423  002F30  0012               	return		;funcret
 11424  002F32                     __end_of_InitEarthLeakage:
 11425                           	opt stack 0
 11426                           pclatu	equ	0xFFB
 11427                           pclath	equ	0xFFA
 11428                           tblptru	equ	0xFF8
 11429                           tblptrh	equ	0xFF7
 11430                           tblptrl	equ	0xFF6
 11431                           tablat	equ	0xFF5
 11432                           prodh	equ	0xFF4
 11433                           prodl	equ	0xFF3
 11434                           intcon	equ	0xFF2
 11435                           postinc0	equ	0xFEE
 11436                           fsr0h	equ	0xFEA
 11437                           fsr0l	equ	0xFE9
 11438                           wreg	equ	0xFE8
 11439                           indf1	equ	0xFE7
 11440                           postinc1	equ	0xFE6
 11441                           postdec1	equ	0xFE5
 11442                           fsr1h	equ	0xFE2
 11443                           fsr1l	equ	0xFE1
 11444                           indf2	equ	0xFDF
 11445                           postinc2	equ	0xFDE
 11446                           postdec2	equ	0xFDD
 11447                           plusw2	equ	0xFDB
 11448                           fsr2h	equ	0xFDA
 11449                           fsr2l	equ	0xFD9
 11450                           status	equ	0xFD8
 11451                           
 11452 ;; *************** function _CheckLineFault *****************
 11453 ;; Defined at:
 11454 ;;		line 418 in file "boostercomms.c"
 11455 ;; Parameters:    Size  Location     Type
 11456 ;;		None
 11457 ;; Auto vars:     Size  Location     Type
 11458 ;;  i               2   12[COMRAM] int 
 11459 ;;  i               2   14[COMRAM] int 
 11460 ;;  lineVoltUS      2   10[COMRAM] unsigned short 
 11461 ;;  activeWindow    2    8[COMRAM] int 
 11462 ;; Return value:  Size  Location     Type
 11463 ;;                  1    wreg      void 
 11464 ;; Registers used:
 11465 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11466 ;; Tracked objects:
 11467 ;;		On entry : 0/0
 11468 ;;		On exit  : 0/0
 11469 ;;		Unchanged: 0/0
 11470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11472 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11473 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11474 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11475 ;;Total ram usage:       10 bytes
 11476 ;; Hardware stack levels used:    1
 11477 ;; Hardware stack levels required when called:    1
 11478 ;; This function calls:
 11479 ;;		_ReadAnalogVoltage
 11480 ;;		___wmul
 11481 ;; This function is called by:
 11482 ;;		_BoosterDataCommandComms
 11483 ;; This function uses a non-reentrant model
 11484 ;;
 11485                           
 11486                           	psect	text61
 11487  001838                     __ptext61:
 11488                           	opt stack 0
 11489  001838                     _CheckLineFault:
 11490                           	opt stack 21
 11491                           
 11492                           ;boostercomms.c: 419: unsigned short lineVoltUS;
 11493                           ;boostercomms.c: 421: lineVoltUS = ReadAnalogVoltage(2);
 11494                           
 11495                           ; BSR set to: 0
 11496                           ;incstack = 0
 11497  001838  0E02               	movlw	2
 11498  00183A  EC36  F015         	call	_ReadAnalogVoltage
 11499  00183E  C001  F00B         	movff	?_ReadAnalogVoltage,CheckLineFault@lineVoltUS
 11500  001842  C002  F00C         	movff	?_ReadAnalogVoltage+1,CheckLineFault@lineVoltUS+1
 11501                           
 11502                           ;boostercomms.c: 423: commsOffsetADCValueUS = 0;
 11503  001846  0E00               	movlw	0
 11504  001848  6E3E               	movwf	_commsOffsetADCValueUS+1,c
 11505  00184A  0E00               	movlw	0
 11506  00184C  6E3D               	movwf	_commsOffsetADCValueUS,c
 11507                           
 11508                           ;boostercomms.c: 424: for(int i = 100; i<=500; i=i+100){
 11509  00184E  0E00               	movlw	0
 11510  001850  6E10               	movwf	CheckLineFault@i+1,c
 11511  001852  0E64               	movlw	100
 11512  001854  6E0F               	movwf	CheckLineFault@i,c
 11513  001856                     i2l4765:
 11514  001856  BE10               	btfsc	CheckLineFault@i+1,7,c
 11515  001858  D006               	goto	i2l4769
 11516  00185A  0EF5               	movlw	245
 11517  00185C  5C0F               	subwf	CheckLineFault@i,w,c
 11518  00185E  0E01               	movlw	1
 11519  001860  5810               	subwfb	CheckLineFault@i+1,w,c
 11520  001862  B0D8               	btfsc	status,0,c
 11521  001864  D018               	goto	i2l4779
 11522  001866                     i2l4769:
 11523                           
 11524                           ;boostercomms.c: 425: if(lineVoltUS>=i){
 11525  001866  500F               	movf	CheckLineFault@i,w,c
 11526  001868  5C0B               	subwf	CheckLineFault@lineVoltUS,w,c
 11527  00186A  5010               	movf	CheckLineFault@i+1,w,c
 11528  00186C  580C               	subwfb	CheckLineFault@lineVoltUS+1,w,c
 11529  00186E  A0D8               	btfss	status,0,c
 11530  001870  D007               	goto	i2l4773
 11531                           
 11532                           ;boostercomms.c: 426: commsOffsetADCValueUS=commsOffsetADCValueUS+60;
 11533  001872  0E3C               	movlw	60
 11534  001874  243D               	addwf	_commsOffsetADCValueUS,w,c
 11535  001876  6E3D               	movwf	_commsOffsetADCValueUS,c
 11536  001878  0E00               	movlw	0
 11537  00187A  203E               	addwfc	_commsOffsetADCValueUS+1,w,c
 11538  00187C  6E3E               	movwf	_commsOffsetADCValueUS+1,c
 11539                           
 11540                           ;boostercomms.c: 427: }
 11541  00187E  D004               	goto	i2l4775
 11542  001880                     i2l4773:
 11543                           
 11544                           ;boostercomms.c: 428: else{
 11545                           ;boostercomms.c: 429: i=600;
 11546  001880  0E02               	movlw	2
 11547  001882  6E10               	movwf	CheckLineFault@i+1,c
 11548  001884  0E58               	movlw	88
 11549  001886  6E0F               	movwf	CheckLineFault@i,c
 11550  001888                     i2l4775:
 11551  001888  0E64               	movlw	100
 11552  00188A  240F               	addwf	CheckLineFault@i,w,c
 11553  00188C  6E0F               	movwf	CheckLineFault@i,c
 11554  00188E  0E00               	movlw	0
 11555  001890  2010               	addwfc	CheckLineFault@i+1,w,c
 11556  001892  6E10               	movwf	CheckLineFault@i+1,c
 11557  001894  D7E0               	goto	i2l4765
 11558  001896                     i2l4779:
 11559                           
 11560                           ;boostercomms.c: 430: }
 11561                           ;boostercomms.c: 431: }
 11562                           ;boostercomms.c: 432: int activeWindowCounter=0;
 11563  001896  0E00               	movlw	0
 11564  001898  6E0A               	movwf	CheckLineFault@activeWindowCounter+1,c
 11565  00189A  0E00               	movlw	0
 11566  00189C  6E09               	movwf	CheckLineFault@activeWindowCounter,c
 11567                           
 11568                           ;boostercomms.c: 434: for(int i = 0; i < 30; i++){
 11569  00189E  0E00               	movlw	0
 11570  0018A0  6E0E               	movwf	CheckLineFault@i_1610+1,c
 11571  0018A2  0E00               	movlw	0
 11572  0018A4  6E0D               	movwf	CheckLineFault@i_1610,c
 11573  0018A6                     i2l4781:
 11574  0018A6  BE0E               	btfsc	CheckLineFault@i_1610+1,7,c
 11575  0018A8  D006               	goto	i2l4785
 11576  0018AA  500E               	movf	CheckLineFault@i_1610+1,w,c
 11577  0018AC  E113               	bnz	i2l4791
 11578  0018AE  0E1E               	movlw	30
 11579  0018B0  5C0D               	subwf	CheckLineFault@i_1610,w,c
 11580  0018B2  B0D8               	btfsc	status,0,c
 11581  0018B4  D00F               	goto	i2l4791
 11582  0018B6                     i2l4785:
 11583                           
 11584                           ;boostercomms.c: 435: if(!(boosterCommsData[4][i] == 10))
 11585  0018B6  0E78               	movlw	low (_boosterCommsData+120)
 11586  0018B8  240D               	addwf	CheckLineFault@i_1610,w,c
 11587  0018BA  6ED9               	movwf	fsr2l,c
 11588  0018BC  0E03               	movlw	high (_boosterCommsData+120)
 11589  0018BE  200E               	addwfc	CheckLineFault@i_1610+1,w,c
 11590  0018C0  6EDA               	movwf	fsr2h,c
 11591  0018C2  0E0A               	movlw	10
 11592  0018C4  18DE               	xorwf	postinc2,w,c
 11593  0018C6  B4D8               	btfsc	status,2,c
 11594  0018C8  D002               	goto	i2l415
 11595                           
 11596                           ;boostercomms.c: 436: activeWindowCounter++;
 11597  0018CA  4A09               	infsnz	CheckLineFault@activeWindowCounter,f,c
 11598  0018CC  2A0A               	incf	CheckLineFault@activeWindowCounter+1,f,c
 11599  0018CE                     i2l415:
 11600  0018CE  4A0D               	infsnz	CheckLineFault@i_1610,f,c
 11601  0018D0  2A0E               	incf	CheckLineFault@i_1610+1,f,c
 11602  0018D2  D7E9               	goto	i2l4781
 11603  0018D4                     i2l4791:
 11604                           
 11605                           ;boostercomms.c: 437: }
 11606                           ;boostercomms.c: 439: if(lineVoltUS > (74+(activeWindowCounter*11))){
 11607  0018D4  C009  F001         	movff	CheckLineFault@activeWindowCounter,___wmul@multiplier
 11608  0018D8  C00A  F002         	movff	CheckLineFault@activeWindowCounter+1,___wmul@multiplier+1
 11609  0018DC  0E00               	movlw	0
 11610  0018DE  6E04               	movwf	___wmul@multiplicand+1,c
 11611  0018E0  0E0B               	movlw	11
 11612  0018E2  6E03               	movwf	___wmul@multiplicand,c
 11613  0018E4  ECF4  F016         	call	___wmul	;wreg free
 11614  0018E8  0E4A               	movlw	74
 11615  0018EA  2601               	addwf	?___wmul,f,c
 11616  0018EC  0E00               	movlw	0
 11617  0018EE  2202               	addwfc	?___wmul+1,f,c
 11618  0018F0  500B               	movf	CheckLineFault@lineVoltUS,w,c
 11619  0018F2  5C01               	subwf	?___wmul,w,c
 11620  0018F4  500C               	movf	CheckLineFault@lineVoltUS+1,w,c
 11621  0018F6  5802               	subwfb	?___wmul+1,w,c
 11622  0018F8  B0D8               	btfsc	status,0,c
 11623  0018FA  D025               	goto	i2l4807
 11624                           
 11625                           ;boostercomms.c: 440: if(cableFaultCounter<3)
 11626  0018FC  0E03               	movlw	3
 11627  0018FE  6051               	cpfslt	_cableFaultCounter,c
 11628  001900  D001               	goto	i2l4797
 11629                           
 11630                           ;boostercomms.c: 441: cableFaultCounter++;
 11631  001902  2A51               	incf	_cableFaultCounter,f,c
 11632  001904                     i2l4797:
 11633                           
 11634                           ;boostercomms.c: 442: if(cableFaultCounter==3){
 11635  001904  0E03               	movlw	3
 11636  001906  1851               	xorwf	_cableFaultCounter,w,c
 11637  001908  A4D8               	btfss	status,2,c
 11638  00190A  0012               	return	
 11639                           
 11640                           ;boostercomms.c: 443: statusFlagsUSLG |= 0b000000000000000001000000;
 11641  00190C  8C36               	bsf	_statusFlagsUSLG,6,c	;volatile
 11642                           
 11643                           ;boostercomms.c: 444: if(lineVoltUS > (369+(activeWindowCounter*11)))
 11644  00190E  0E71               	movlw	113
 11645  001910  6E07               	movwf	??_CheckLineFault& (0+255),c
 11646  001912  0E01               	movlw	1
 11647  001914  6E08               	movwf	(??_CheckLineFault+1)& (0+255),c
 11648  001916  C009  F001         	movff	CheckLineFault@activeWindowCounter,___wmul@multiplier
 11649  00191A  C00A  F002         	movff	CheckLineFault@activeWindowCounter+1,___wmul@multiplier+1
 11650  00191E  0E00               	movlw	0
 11651  001920  6E04               	movwf	___wmul@multiplicand+1,c
 11652  001922  0E0B               	movlw	11
 11653  001924  6E03               	movwf	___wmul@multiplicand,c
 11654  001926  ECF4  F016         	call	___wmul	;wreg free
 11655  00192A  5007               	movf	??_CheckLineFault,w,c
 11656  00192C  2601               	addwf	?___wmul,f,c
 11657  00192E  5008               	movf	??_CheckLineFault+1,w,c
 11658  001930  2202               	addwfc	?___wmul+1,f,c
 11659  001932  500B               	movf	CheckLineFault@lineVoltUS,w,c
 11660  001934  5C01               	subwf	?___wmul,w,c
 11661  001936  500C               	movf	CheckLineFault@lineVoltUS+1,w,c
 11662  001938  5802               	subwfb	?___wmul+1,w,c
 11663  00193A  B0D8               	btfsc	status,0,c
 11664  00193C  D002               	goto	i2l4805
 11665                           
 11666                           ;boostercomms.c: 445: statusFlagsUSLG |= 0b010000000000000000000000;
 11667  00193E  8C38               	bsf	_statusFlagsUSLG+2,6,c	;volatile
 11668  001940  0012               	return	
 11669  001942                     i2l4805:
 11670                           
 11671                           ;boostercomms.c: 446: else
 11672                           ;boostercomms.c: 447: statusFlagsUSLG &= ~0b010000000000000000000000;
 11673  001942  9C38               	bcf	_statusFlagsUSLG+2,6,c	;volatile
 11674                           
 11675                           ;boostercomms.c: 449: }
 11676                           ;boostercomms.c: 450: }
 11677  001944  0012               	return	
 11678  001946                     i2l4807:
 11679                           
 11680                           ;boostercomms.c: 451: else{
 11681                           ;boostercomms.c: 452: cableFaultCounter=0;
 11682  001946  0E00               	movlw	0
 11683  001948  6E51               	movwf	_cableFaultCounter,c
 11684                           
 11685                           ;boostercomms.c: 453: statusFlagsUSLG &= ~0b000000000000000001000000;
 11686  00194A  9C36               	bcf	_statusFlagsUSLG,6,c	;volatile
 11687                           
 11688                           ;boostercomms.c: 454: statusFlagsUSLG &= ~0b010000000000000000000000;
 11689  00194C  9C38               	bcf	_statusFlagsUSLG+2,6,c	;volatile
 11690  00194E  0012               	return	
 11691  001950                     __end_of_CheckLineFault:
 11692                           	opt stack 0
 11693                           pclatu	equ	0xFFB
 11694                           pclath	equ	0xFFA
 11695                           tblptru	equ	0xFF8
 11696                           tblptrh	equ	0xFF7
 11697                           tblptrl	equ	0xFF6
 11698                           tablat	equ	0xFF5
 11699                           prodh	equ	0xFF4
 11700                           prodl	equ	0xFF3
 11701                           intcon	equ	0xFF2
 11702                           postinc0	equ	0xFEE
 11703                           fsr0h	equ	0xFEA
 11704                           fsr0l	equ	0xFE9
 11705                           wreg	equ	0xFE8
 11706                           indf1	equ	0xFE7
 11707                           postinc1	equ	0xFE6
 11708                           postdec1	equ	0xFE5
 11709                           fsr1h	equ	0xFE2
 11710                           fsr1l	equ	0xFE1
 11711                           indf2	equ	0xFDF
 11712                           postinc2	equ	0xFDE
 11713                           postdec2	equ	0xFDD
 11714                           plusw2	equ	0xFDB
 11715                           fsr2h	equ	0xFDA
 11716                           fsr2l	equ	0xFD9
 11717                           status	equ	0xFD8
 11718                           
 11719 ;; *************** function ___wmul *****************
 11720 ;; Defined at:
 11721 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.36\sources\common\Umul16.c"
 11722 ;; Parameters:    Size  Location     Type
 11723 ;;  multiplier      2    0[COMRAM] unsigned int 
 11724 ;;  multiplicand    2    2[COMRAM] unsigned int 
 11725 ;; Auto vars:     Size  Location     Type
 11726 ;;  product         2    4[COMRAM] unsigned int 
 11727 ;; Return value:  Size  Location     Type
 11728 ;;                  2    0[COMRAM] unsigned int 
 11729 ;; Registers used:
 11730 ;;		wreg, status,2, status,0, prodl, prodh
 11731 ;; Tracked objects:
 11732 ;;		On entry : 0/0
 11733 ;;		On exit  : 0/0
 11734 ;;		Unchanged: 0/0
 11735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11736 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11737 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11738 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11739 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11740 ;;Total ram usage:        6 bytes
 11741 ;; Hardware stack levels used:    1
 11742 ;; This function calls:
 11743 ;;		Nothing
 11744 ;; This function is called by:
 11745 ;;		_CheckLineFault
 11746 ;; This function uses a non-reentrant model
 11747 ;;
 11748                           
 11749                           	psect	text62
 11750  002DE8                     __ptext62:
 11751                           	opt stack 0
 11752  002DE8                     ___wmul:
 11753                           	opt stack 21
 11754                           
 11755                           ;incstack = 0
 11756  002DE8  5001               	movf	___wmul@multiplier,w,c
 11757  002DEA  0203               	mulwf	___wmul@multiplicand,c
 11758  002DEC  CFF3 F005          	movff	prodl,___wmul@product
 11759  002DF0  CFF4 F006          	movff	prodh,___wmul@product+1
 11760  002DF4  5001               	movf	___wmul@multiplier,w,c
 11761  002DF6  0204               	mulwf	___wmul@multiplicand+1,c
 11762  002DF8  50F3               	movf	prodl,w,c
 11763  002DFA  2606               	addwf	___wmul@product+1,f,c
 11764  002DFC  5002               	movf	___wmul@multiplier+1,w,c
 11765  002DFE  0203               	mulwf	___wmul@multiplicand,c
 11766  002E00  50F3               	movf	prodl,w,c
 11767  002E02  2606               	addwf	___wmul@product+1,f,c
 11768  002E04  C005  F001         	movff	___wmul@product,?___wmul
 11769  002E08  C006  F002         	movff	___wmul@product+1,?___wmul+1
 11770  002E0C  0012               	return	
 11771  002E0E                     __end_of___wmul:
 11772                           	opt stack 0
 11773                           pclatu	equ	0xFFB
 11774                           pclath	equ	0xFFA
 11775                           tblptru	equ	0xFF8
 11776                           tblptrh	equ	0xFF7
 11777                           tblptrl	equ	0xFF6
 11778                           tablat	equ	0xFF5
 11779                           prodh	equ	0xFF4
 11780                           prodl	equ	0xFF3
 11781                           intcon	equ	0xFF2
 11782                           postinc0	equ	0xFEE
 11783                           fsr0h	equ	0xFEA
 11784                           fsr0l	equ	0xFE9
 11785                           wreg	equ	0xFE8
 11786                           indf1	equ	0xFE7
 11787                           postinc1	equ	0xFE6
 11788                           postdec1	equ	0xFE5
 11789                           fsr1h	equ	0xFE2
 11790                           fsr1l	equ	0xFE1
 11791                           indf2	equ	0xFDF
 11792                           postinc2	equ	0xFDE
 11793                           postdec2	equ	0xFDD
 11794                           plusw2	equ	0xFDB
 11795                           fsr2h	equ	0xFDA
 11796                           fsr2l	equ	0xFD9
 11797                           status	equ	0xFD8
 11798                           
 11799 ;; *************** function _ReadAnalogVoltage *****************
 11800 ;; Defined at:
 11801 ;;		line 44 in file "peripherals.c"
 11802 ;; Parameters:    Size  Location     Type
 11803 ;;  channelC        1    wreg     unsigned char 
 11804 ;; Auto vars:     Size  Location     Type
 11805 ;;  channelC        1    2[COMRAM] unsigned char 
 11806 ;; Return value:  Size  Location     Type
 11807 ;;                  2    0[COMRAM] unsigned short 
 11808 ;; Registers used:
 11809 ;;		wreg, status,2, status,0
 11810 ;; Tracked objects:
 11811 ;;		On entry : 0/0
 11812 ;;		On exit  : 0/0
 11813 ;;		Unchanged: 0/0
 11814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11815 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11816 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11817 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11818 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11819 ;;Total ram usage:        3 bytes
 11820 ;; Hardware stack levels used:    1
 11821 ;; This function calls:
 11822 ;;		Nothing
 11823 ;; This function is called by:
 11824 ;;		_BoosterDataCommandComms
 11825 ;;		_CheckLineFault
 11826 ;;		_ReadEarthLeakage
 11827 ;;		_ReadKeySwitch
 11828 ;; This function uses a non-reentrant model
 11829 ;;
 11830                           
 11831                           	psect	text63
 11832  002A6C                     __ptext63:
 11833                           	opt stack 0
 11834  002A6C                     _ReadAnalogVoltage:
 11835                           	opt stack 21
 11836                           
 11837                           ;incstack = 0
 11838                           ;ReadAnalogVoltage@channelC stored from wreg
 11839  002A6C  6E03               	movwf	ReadAnalogVoltage@channelC,c
 11840                           
 11841                           ;peripherals.c: 46: switch(channelC){
 11842  002A6E  D00D               	goto	i2l4421
 11843  002A70                     i2l4413:
 11844                           
 11845                           ;peripherals.c: 48: ADCON0bits.CHS = 0b0110;
 11846  002A70  50C2               	movf	4034,w,c	;volatile
 11847  002A72  0BC3               	andlw	-61
 11848  002A74  0918               	iorlw	24
 11849  002A76  D007               	goto	L6
 11850  002A78                     i2l4415:
 11851                           
 11852                           ;peripherals.c: 51: ADCON0bits.CHS = 0b1010;
 11853  002A78  50C2               	movf	4034,w,c	;volatile
 11854  002A7A  0BC3               	andlw	-61
 11855  002A7C  0928               	iorlw	40
 11856  002A7E  D003               	goto	L6
 11857  002A80                     i2l4417:
 11858                           
 11859                           ;peripherals.c: 54: ADCON0bits.CHS = 0b0001;
 11860  002A80  50C2               	movf	4034,w,c	;volatile
 11861  002A82  0BC3               	andlw	-61
 11862  002A84  0904               	iorlw	4
 11863  002A86                     L6:
 11864  002A86  6EC2               	movwf	4034,c	;volatile
 11865                           
 11866                           ;peripherals.c: 56: }
 11867                           
 11868                           ;peripherals.c: 55: break;
 11869  002A88  D00A               	goto	i2l1010
 11870  002A8A                     i2l4421:
 11871  002A8A  5003               	movf	ReadAnalogVoltage@channelC,w,c
 11872                           
 11873                           ; Switch size 1, requested type "space"
 11874                           ; Number of cases is 3, Range of values is 0 to 2
 11875                           ; switch strategies available:
 11876                           ; Name         Instructions Cycles
 11877                           ; simple_byte           10     6 (average)
 11878                           ;	Chosen strategy is simple_byte
 11879  002A8C  0A00               	xorlw	0	; case 0
 11880  002A8E  B4D8               	btfsc	status,2,c
 11881  002A90  D7EF               	goto	i2l4413
 11882  002A92  0A01               	xorlw	1	; case 1
 11883  002A94  B4D8               	btfsc	status,2,c
 11884  002A96  D7F0               	goto	i2l4415
 11885  002A98  0A03               	xorlw	3	; case 2
 11886  002A9A  B4D8               	btfsc	status,2,c
 11887  002A9C  D7F1               	goto	i2l4417
 11888  002A9E                     i2l1010:
 11889                           
 11890                           ;peripherals.c: 58: ADCON0bits.GO_nDONE = 1;
 11891  002A9E  82C2               	bsf	4034,1,c	;volatile
 11892  002AA0                     i2l1013:
 11893  002AA0  B2C2               	btfsc	4034,1,c	;volatile
 11894  002AA2  D7FE               	goto	i2l1013
 11895                           
 11896                           ;peripherals.c: 61: return ADRES;
 11897  002AA4  CFC3 F001          	movff	4035,?_ReadAnalogVoltage	;volatile
 11898  002AA8  CFC4 F002          	movff	4036,?_ReadAnalogVoltage+1	;volatile
 11899  002AAC  0012               	return		;funcret
 11900  002AAE                     __end_of_ReadAnalogVoltage:
 11901                           	opt stack 0
 11902                           pclatu	equ	0xFFB
 11903                           pclath	equ	0xFFA
 11904                           tblptru	equ	0xFF8
 11905                           tblptrh	equ	0xFF7
 11906                           tblptrl	equ	0xFF6
 11907                           tablat	equ	0xFF5
 11908                           prodh	equ	0xFF4
 11909                           prodl	equ	0xFF3
 11910                           intcon	equ	0xFF2
 11911                           postinc0	equ	0xFEE
 11912                           fsr0h	equ	0xFEA
 11913                           fsr0l	equ	0xFE9
 11914                           wreg	equ	0xFE8
 11915                           indf1	equ	0xFE7
 11916                           postinc1	equ	0xFE6
 11917                           postdec1	equ	0xFE5
 11918                           fsr1h	equ	0xFE2
 11919                           fsr1l	equ	0xFE1
 11920                           indf2	equ	0xFDF
 11921                           postinc2	equ	0xFDE
 11922                           postdec2	equ	0xFDD
 11923                           plusw2	equ	0xFDB
 11924                           fsr2h	equ	0xFDA
 11925                           fsr2l	equ	0xFD9
 11926                           status	equ	0xFD8
 11927                           
 11928 ;; *************** function _BoosterCommsDispatcher *****************
 11929 ;; Defined at:
 11930 ;;		line 805 in file "boostercomms.c"
 11931 ;; Parameters:    Size  Location     Type
 11932 ;;		None
 11933 ;; Auto vars:     Size  Location     Type
 11934 ;;		None
 11935 ;; Return value:  Size  Location     Type
 11936 ;;                  1    wreg      void 
 11937 ;; Registers used:
 11938 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11939 ;; Tracked objects:
 11940 ;;		On entry : 0/0
 11941 ;;		On exit  : 0/0
 11942 ;;		Unchanged: 0/0
 11943 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 11944 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11945 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11946 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11947 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 11948 ;;Total ram usage:        1 bytes
 11949 ;; Hardware stack levels used:    1
 11950 ;; Hardware stack levels required when called:    5
 11951 ;; This function calls:
 11952 ;;		_BoosterCommsActive
 11953 ;;		_BoosterQueryStart
 11954 ;;		_CheckDataCollision
 11955 ;;		_LowestMissingSerial
 11956 ;;		_NewBoosterAdded
 11957 ;;		_QueryWinSerial
 11958 ;;		_SetWindowID
 11959 ;;		i2_ClearPastValues
 11960 ;; This function is called by:
 11961 ;;		_isr
 11962 ;; This function uses a non-reentrant model
 11963 ;;
 11964                           
 11965                           	psect	text64
 11966  001FE8                     __ptext64:
 11967                           	opt stack 0
 11968  001FE8                     _BoosterCommsDispatcher:
 11969                           	opt stack 18
 11970                           
 11971                           ;boostercomms.c: 808: if(BoosterCommsActive() || !(statusFlagsUSLG & 0b00000000100000000
      +                          0000000))
 11972                           
 11973                           ;incstack = 0
 11974  001FE8  ECE2  F017         	call	_BoosterCommsActive	;wreg free
 11975  001FEC  0900               	iorlw	0
 11976  001FEE  A4D8               	btfss	status,2,c
 11977  001FF0  0012               	return	
 11978  001FF2  AE37               	btfss	_statusFlagsUSLG+1,7,c	;volatile
 11979  001FF4  0012               	return	
 11980                           
 11981                           ;boostercomms.c: 811: __nop();
 11982                           
 11983                           ;boostercomms.c: 809: return;
 11984  001FF6  F000               	nop	
 11985                           
 11986                           ;boostercomms.c: 813: if((dispStatusUCS == 4) || CheckDataCollision() || NewBoosterAdded
      +                          ()){
 11987  001FF8  0E04               	movlw	4
 11988  001FFA  1854               	xorwf	_dispStatusUCS,w,c
 11989  001FFC  B4D8               	btfsc	status,2,c
 11990  001FFE  D00A               	goto	i2l5763
 11991  002000  EC9C  F016         	call	_CheckDataCollision	;wreg free
 11992  002004  0900               	iorlw	0
 11993  002006  A4D8               	btfss	status,2,c
 11994  002008  D005               	goto	i2l5763
 11995  00200A  EC66  F017         	call	_NewBoosterAdded	;wreg free
 11996  00200E  0900               	iorlw	0
 11997  002010  B4D8               	btfsc	status,2,c
 11998  002012  D00F               	goto	i2l5777
 11999  002014                     i2l5763:
 12000                           
 12001                           ;boostercomms.c: 814: if(SetWindowID()){
 12002  002014  EC7F  F008         	call	_SetWindowID	;wreg free
 12003  002018  0900               	iorlw	0
 12004  00201A  B4D8               	btfsc	status,2,c
 12005  00201C  D007               	goto	i2l5773
 12006                           
 12007                           ;boostercomms.c: 815: dispStatusUCS = 0;
 12008  00201E  0E00               	movlw	0
 12009  002020  6E54               	movwf	_dispStatusUCS,c
 12010                           
 12011                           ;boostercomms.c: 816: statusFlagsUSLG |= 0b000001000000000000000000;
 12012  002022  8438               	bsf	_statusFlagsUSLG+2,2,c	;volatile
 12013                           
 12014                           ;boostercomms.c: 817: statusFlagsUSLG &= ~0b000000100000000000000000;
 12015  002024  9238               	bcf	_statusFlagsUSLG+2,1,c	;volatile
 12016                           
 12017                           ;boostercomms.c: 818: ClearPastValues();
 12018  002026  EC99  F017         	call	i2_ClearPastValues	;wreg free
 12019                           
 12020                           ;boostercomms.c: 819: }else{
 12021  00202A  D003               	goto	i2l5777
 12022  00202C                     i2l5773:
 12023                           
 12024                           ;boostercomms.c: 820: dispStatusUCS = 4;
 12025  00202C  0E04               	movlw	4
 12026  00202E  6E54               	movwf	_dispStatusUCS,c
 12027                           
 12028                           ;boostercomms.c: 821: return;
 12029  002030  0012               	return	
 12030  002032                     i2l5777:
 12031                           
 12032                           ;boostercomms.c: 822: }
 12033                           ;boostercomms.c: 823: }
 12034                           ;boostercomms.c: 825: if((dispStatusUCS == 5) || (LowestMissingSerial() < 30)){
 12035  002032  0E05               	movlw	5
 12036  002034  1854               	xorwf	_dispStatusUCS,w,c
 12037  002036  B4D8               	btfsc	status,2,c
 12038  002038  D006               	goto	i2l5781
 12039  00203A  ECCE  F014         	call	_LowestMissingSerial	;wreg free
 12040  00203E  6E26               	movwf	??_BoosterCommsDispatcher& (0+255),c
 12041  002040  0E1E               	movlw	30
 12042  002042  6026               	cpfslt	??_BoosterCommsDispatcher,c
 12043  002044  D025               	goto	i2l5811
 12044  002046                     i2l5781:
 12045                           
 12046                           ;boostercomms.c: 826: if(QueryWinSerial()){
 12047  002046  EC28  F00A         	call	_QueryWinSerial	;wreg free
 12048  00204A  0900               	iorlw	0
 12049  00204C  B4D8               	btfsc	status,2,c
 12050  00204E  D005               	goto	i2l5789
 12051                           
 12052                           ;boostercomms.c: 827: dispStatusUCS = 0;
 12053  002050  0E00               	movlw	0
 12054  002052  6E54               	movwf	_dispStatusUCS,c
 12055                           
 12056                           ;boostercomms.c: 828: statusFlagsUSLG |= 0b000001000000000000000000;
 12057  002054  8438               	bsf	_statusFlagsUSLG+2,2,c	;volatile
 12058                           
 12059                           ;boostercomms.c: 829: statusFlagsUSLG &= ~0b000000100000000000000000;
 12060  002056  9238               	bcf	_statusFlagsUSLG+2,1,c	;volatile
 12061                           
 12062                           ;boostercomms.c: 830: }else{
 12063  002058  D01B               	goto	i2l5811
 12064  00205A                     i2l5789:
 12065                           
 12066                           ;boostercomms.c: 831: dispStatusUCS = 5;
 12067  00205A  0E05               	movlw	5
 12068  00205C  6E54               	movwf	_dispStatusUCS,c
 12069                           
 12070                           ;boostercomms.c: 832: return;
 12071  00205E  0012               	return	
 12072  002060                     i2l5793:
 12073                           
 12074                           ;boostercomms.c: 838: BoosterQueryStart(0b000);
 12075  002060  0E00               	movlw	0
 12076  002062  EC19  F017         	call	_BoosterQueryStart
 12077                           
 12078                           ;boostercomms.c: 839: dispStatusUCS = 2;
 12079  002066  0E02               	movlw	2
 12080  002068  6E54               	movwf	_dispStatusUCS,c
 12081                           
 12082                           ;boostercomms.c: 840: break;
 12083  00206A  0012               	return	
 12084  00206C                     i2l5797:
 12085                           
 12086                           ;boostercomms.c: 842: BoosterQueryStart(0b010);
 12087  00206C  0E02               	movlw	2
 12088  00206E  EC19  F017         	call	_BoosterQueryStart
 12089                           
 12090                           ;boostercomms.c: 843: dispStatusUCS = 3;
 12091  002072  0E03               	movlw	3
 12092  002074  6E54               	movwf	_dispStatusUCS,c
 12093                           
 12094                           ;boostercomms.c: 844: break;
 12095  002076  0012               	return	
 12096  002078                     i2l5801:
 12097                           
 12098                           ;boostercomms.c: 846: BoosterQueryStart(0b011);
 12099  002078  0E03               	movlw	3
 12100  00207A  EC19  F017         	call	_BoosterQueryStart
 12101                           
 12102                           ;boostercomms.c: 847: dispStatusUCS = 1;
 12103  00207E  0E01               	movlw	1
 12104  002080  6E54               	movwf	_dispStatusUCS,c
 12105                           
 12106                           ;boostercomms.c: 848: break;
 12107  002082  0012               	return	
 12108  002084                     i2l5805:
 12109                           
 12110                           ;boostercomms.c: 850: BoosterQueryStart(0b001);
 12111  002084  0E01               	movlw	1
 12112  002086  EC19  F017         	call	_BoosterQueryStart
 12113                           
 12114                           ;boostercomms.c: 851: dispStatusUCS = 0;
 12115  00208A  0E00               	movlw	0
 12116  00208C  6E54               	movwf	_dispStatusUCS,c
 12117                           
 12118                           ;boostercomms.c: 853: }
 12119                           
 12120                           ;boostercomms.c: 852: break;
 12121  00208E  0012               	return	
 12122  002090                     i2l5811:
 12123  002090  5054               	movf	_dispStatusUCS,w,c
 12124                           
 12125                           ; Switch size 1, requested type "space"
 12126                           ; Number of cases is 4, Range of values is 0 to 3
 12127                           ; switch strategies available:
 12128                           ; Name         Instructions Cycles
 12129                           ; simple_byte           13     7 (average)
 12130                           ;	Chosen strategy is simple_byte
 12131  002092  0A00               	xorlw	0	; case 0
 12132  002094  B4D8               	btfsc	status,2,c
 12133  002096  D7E4               	goto	i2l5793
 12134  002098  0A01               	xorlw	1	; case 1
 12135  00209A  B4D8               	btfsc	status,2,c
 12136  00209C  D7F3               	goto	i2l5805
 12137  00209E  0A03               	xorlw	3	; case 2
 12138  0020A0  B4D8               	btfsc	status,2,c
 12139  0020A2  D7E4               	goto	i2l5797
 12140  0020A4  0A01               	xorlw	1	; case 3
 12141  0020A6  A4D8               	btfss	status,2,c
 12142  0020A8  0012               	return	
 12143  0020AA  D7E6               	goto	i2l5801
 12144  0020AC                     __end_of_BoosterCommsDispatcher:
 12145                           	opt stack 0
 12146                           pclatu	equ	0xFFB
 12147                           pclath	equ	0xFFA
 12148                           tblptru	equ	0xFF8
 12149                           tblptrh	equ	0xFF7
 12150                           tblptrl	equ	0xFF6
 12151                           tablat	equ	0xFF5
 12152                           prodh	equ	0xFF4
 12153                           prodl	equ	0xFF3
 12154                           intcon	equ	0xFF2
 12155                           postinc0	equ	0xFEE
 12156                           fsr0h	equ	0xFEA
 12157                           fsr0l	equ	0xFE9
 12158                           wreg	equ	0xFE8
 12159                           indf1	equ	0xFE7
 12160                           postinc1	equ	0xFE6
 12161                           postdec1	equ	0xFE5
 12162                           fsr1h	equ	0xFE2
 12163                           fsr1l	equ	0xFE1
 12164                           indf2	equ	0xFDF
 12165                           postinc2	equ	0xFDE
 12166                           postdec2	equ	0xFDD
 12167                           plusw2	equ	0xFDB
 12168                           fsr2h	equ	0xFDA
 12169                           fsr2l	equ	0xFD9
 12170                           status	equ	0xFD8
 12171                           
 12172 ;; *************** function i2_ClearPastValues *****************
 12173 ;; Defined at:
 12174 ;;		line 277 in file "mastercomms.c"
 12175 ;; Parameters:    Size  Location     Type
 12176 ;;		None
 12177 ;; Auto vars:     Size  Location     Type
 12178 ;;  ClearPastVal    1    1[COMRAM] unsigned char 
 12179 ;; Return value:  Size  Location     Type
 12180 ;;                  1    wreg      void 
 12181 ;; Registers used:
 12182 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12183 ;; Tracked objects:
 12184 ;;		On entry : 0/0
 12185 ;;		On exit  : 0/0
 12186 ;;		Unchanged: 0/0
 12187 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12188 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12189 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12190 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12191 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12192 ;;Total ram usage:        1 bytes
 12193 ;; Hardware stack levels used:    1
 12194 ;; Hardware stack levels required when called:    1
 12195 ;; This function calls:
 12196 ;;		i2_ClearPastValue
 12197 ;; This function is called by:
 12198 ;;		_BoosterCommsDispatcher
 12199 ;;		i2_ForceFiringMode
 12200 ;; This function uses a non-reentrant model
 12201 ;;
 12202                           
 12203                           	psect	text65
 12204  002F32                     __ptext65:
 12205                           	opt stack 0
 12206  002F32                     i2_ClearPastValues:
 12207                           	opt stack 21
 12208                           
 12209                           ;mastercomms.c: 278: unsigned char boosterCountUC;
 12210                           ;mastercomms.c: 280: for(boosterCountUC = 0; boosterCountUC < 31; boosterCountUC++)
 12211                           
 12212                           ;incstack = 0
 12213  002F32  0E00               	movlw	0
 12214  002F34  6E02               	movwf	i2ClearPastValues@boosterCountUC,c
 12215  002F36                     i2l5291:
 12216  002F36  0E1E               	movlw	30
 12217  002F38  6402               	cpfsgt	i2ClearPastValues@boosterCountUC,c
 12218  002F3A  D001               	goto	i2l5295
 12219  002F3C  0012               	return	
 12220  002F3E                     i2l5295:
 12221                           
 12222                           ;mastercomms.c: 281: ClearPastValue(boosterCountUC);
 12223  002F3E  5002               	movf	i2ClearPastValues@boosterCountUC,w,c
 12224  002F40  ECC5  F013         	call	i2_ClearPastValue
 12225  002F44  2A02               	incf	i2ClearPastValues@boosterCountUC,f,c
 12226  002F46  D7F7               	goto	i2l5291
 12227  002F48                     __end_ofi2_ClearPastValues:
 12228                           	opt stack 0
 12229                           pclatu	equ	0xFFB
 12230                           pclath	equ	0xFFA
 12231                           tblptru	equ	0xFF8
 12232                           tblptrh	equ	0xFF7
 12233                           tblptrl	equ	0xFF6
 12234                           tablat	equ	0xFF5
 12235                           prodh	equ	0xFF4
 12236                           prodl	equ	0xFF3
 12237                           intcon	equ	0xFF2
 12238                           postinc0	equ	0xFEE
 12239                           fsr0h	equ	0xFEA
 12240                           fsr0l	equ	0xFE9
 12241                           wreg	equ	0xFE8
 12242                           indf1	equ	0xFE7
 12243                           postinc1	equ	0xFE6
 12244                           postdec1	equ	0xFE5
 12245                           fsr1h	equ	0xFE2
 12246                           fsr1l	equ	0xFE1
 12247                           indf2	equ	0xFDF
 12248                           postinc2	equ	0xFDE
 12249                           postdec2	equ	0xFDD
 12250                           plusw2	equ	0xFDB
 12251                           fsr2h	equ	0xFDA
 12252                           fsr2l	equ	0xFD9
 12253                           status	equ	0xFD8
 12254                           
 12255 ;; *************** function _SetWindowID *****************
 12256 ;; Defined at:
 12257 ;;		line 665 in file "boostercomms.c"
 12258 ;; Parameters:    Size  Location     Type
 12259 ;;		None
 12260 ;; Auto vars:     Size  Location     Type
 12261 ;;		None
 12262 ;; Return value:  Size  Location     Type
 12263 ;;                  1    wreg      unsigned char 
 12264 ;; Registers used:
 12265 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12266 ;; Tracked objects:
 12267 ;;		On entry : 0/0
 12268 ;;		On exit  : 0/0
 12269 ;;		Unchanged: 0/0
 12270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12271 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12273 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12274 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12275 ;;Total ram usage:        3 bytes
 12276 ;; Hardware stack levels used:    1
 12277 ;; Hardware stack levels required when called:    4
 12278 ;; This function calls:
 12279 ;;		_AssignSerialNumber
 12280 ;;		_AssignWindowID
 12281 ;;		_BoosterCommandStart
 12282 ;;		_WindowIDBacktrack
 12283 ;;		i2_ResetBoosterStates
 12284 ;; This function is called by:
 12285 ;;		_BoosterCommsDispatcher
 12286 ;; This function uses a non-reentrant model
 12287 ;;
 12288                           
 12289                           	psect	text66
 12290  0010FE                     __ptext66:
 12291                           	opt stack 0
 12292  0010FE                     _SetWindowID:
 12293                           	opt stack 18
 12294                           
 12295                           ;boostercomms.c: 666: static unsigned char statusSetIDUCS;
 12296                           ;boostercomms.c: 667: static unsigned char currentBitUCS;
 12297                           ;boostercomms.c: 668: static unsigned short currentSerialUSS;
 12298                           ;boostercomms.c: 685: if(statusSetIDUCS == 4){
 12299                           
 12300                           ;incstack = 0
 12301  0010FE  0E04               	movlw	4
 12302  001100  185D               	xorwf	SetWindowID@statusSetIDUCS,w,c
 12303  001102  A4D8               	btfss	status,2,c
 12304  001104  D071               	goto	i2l4919
 12305                           
 12306                           ;boostercomms.c: 686: __nop();
 12307  001106  F000               	nop	
 12308                           
 12309                           ;boostercomms.c: 687: if((statusFlagsUSLG & 0b000000000000100000000000) &&
 12310                           ;boostercomms.c: 688: !(statusFlagsUSLG & 0b000000000100000000000000) &&
 12311                           ;boostercomms.c: 689: ((statusFlagsUSLG & 0b000000000010000000000000) ||!(statusFlagsUSL
      +                          G & 0b000000000001000000000000))){
 12312  001108  B637               	btfsc	_statusFlagsUSLG+1,3,c	;volatile
 12313  00110A  BC37               	btfsc	_statusFlagsUSLG+1,6,c	;volatile
 12314  00110C  D010               	goto	i2l533
 12315  00110E  AA37               	btfss	_statusFlagsUSLG+1,5,c	;volatile
 12316  001110  A837               	btfss	_statusFlagsUSLG+1,4,c	;volatile
 12317  001112  D001               	goto	i2l4883
 12318  001114  D00C               	goto	i2l533
 12319  001116                     i2l4883:
 12320                           
 12321                           ;boostercomms.c: 690: BoosterCommandStart(currentSerialUSS, 0b000, currentBitUCS);
 12322  001116  C058  F007         	movff	SetWindowID@currentSerialUSS,BoosterCommandStart@destSerialUS
 12323  00111A  C059  F008         	movff	SetWindowID@currentSerialUSS+1,BoosterCommandStart@destSerialUS+1
 12324  00111E  0E00               	movlw	0
 12325  001120  6E09               	movwf	BoosterCommandStart@destCommandUC,c
 12326  001122  C05C  F00A         	movff	SetWindowID@currentBitUCS,BoosterCommandStart@destPayloadUC
 12327  001126  EC07  F012         	call	_BoosterCommandStart	;wreg free
 12328                           
 12329                           ;boostercomms.c: 691: return 0;
 12330  00112A  0E00               	movlw	0
 12331  00112C  0012               	return	
 12332  00112E                     i2l533:
 12333                           
 12334                           ;boostercomms.c: 692: }
 12335                           ;boostercomms.c: 693: if(!(statusFlagsUSLG & 0b000000000000100000000000)){
 12336  00112E  B637               	btfsc	_statusFlagsUSLG+1,3,c	;volatile
 12337  001130  D041               	goto	i2l537
 12338                           
 12339                           ;boostercomms.c: 694: if(!(currentSerialUSS & (1 << currentBitUCS))){
 12340  001132  C05C  F023         	movff	SetWindowID@currentBitUCS,??_SetWindowID
 12341  001136  0E01               	movlw	1
 12342  001138  6E24               	movwf	(??_SetWindowID+1)& (0+255),c
 12343  00113A  0E00               	movlw	0
 12344  00113C  6E25               	movwf	(??_SetWindowID+2)& (0+255),c
 12345  00113E  2A23               	incf	??_SetWindowID,f,c
 12346  001140  D003               	goto	i2u468_44
 12347  001142                     i2u468_45:
 12348  001142  90D8               	bcf	status,0,c
 12349  001144  3624               	rlcf	??_SetWindowID+1,f,c
 12350  001146  3625               	rlcf	??_SetWindowID+2,f,c
 12351  001148                     i2u468_44:
 12352  001148  2E23               	decfsz	??_SetWindowID,f,c
 12353  00114A  D7FB               	goto	i2u468_45
 12354  00114C  5058               	movf	SetWindowID@currentSerialUSS,w,c
 12355  00114E  1624               	andwf	??_SetWindowID+1,f,c
 12356  001150  5059               	movf	SetWindowID@currentSerialUSS+1,w,c
 12357  001152  1625               	andwf	??_SetWindowID+2,f,c
 12358  001154  5024               	movf	??_SetWindowID+1,w,c
 12359  001156  1025               	iorwf	??_SetWindowID+2,w,c
 12360  001158  A4D8               	btfss	status,2,c
 12361  00115A  D01D               	goto	i2l4901
 12362                           
 12363                           ;boostercomms.c: 695: currentSerialUSS |= (1 << currentBitUCS);
 12364  00115C  C05C  F023         	movff	SetWindowID@currentBitUCS,??_SetWindowID
 12365  001160  0E01               	movlw	1
 12366  001162  6E24               	movwf	(??_SetWindowID+1)& (0+255),c
 12367  001164  0E00               	movlw	0
 12368  001166  6E25               	movwf	(??_SetWindowID+2)& (0+255),c
 12369  001168  2A23               	incf	??_SetWindowID,f,c
 12370  00116A  D003               	goto	i2u470_44
 12371  00116C                     i2u470_45:
 12372  00116C  90D8               	bcf	status,0,c
 12373  00116E  3624               	rlcf	??_SetWindowID+1,f,c
 12374  001170  3625               	rlcf	??_SetWindowID+2,f,c
 12375  001172                     i2u470_44:
 12376  001172  2E23               	decfsz	??_SetWindowID,f,c
 12377  001174  D7FB               	goto	i2u470_45
 12378  001176  5024               	movf	??_SetWindowID+1,w,c
 12379  001178  1258               	iorwf	SetWindowID@currentSerialUSS,f,c
 12380  00117A  5025               	movf	??_SetWindowID+2,w,c
 12381  00117C  1259               	iorwf	SetWindowID@currentSerialUSS+1,f,c
 12382                           
 12383                           ;boostercomms.c: 696: BoosterCommandStart(currentSerialUSS, 0b000, currentBitUCS);
 12384  00117E  C058  F007         	movff	SetWindowID@currentSerialUSS,BoosterCommandStart@destSerialUS
 12385  001182  C059  F008         	movff	SetWindowID@currentSerialUSS+1,BoosterCommandStart@destSerialUS+1
 12386  001186  0E00               	movlw	0
 12387  001188  6E09               	movwf	BoosterCommandStart@destCommandUC,c
 12388  00118A  C05C  F00A         	movff	SetWindowID@currentBitUCS,BoosterCommandStart@destPayloadUC
 12389  00118E  EC07  F012         	call	_BoosterCommandStart	;wreg free
 12390  001192                     i2l4895:
 12391                           
 12392                           ;boostercomms.c: 697: return 0;
 12393  001192  0E00               	movlw	0
 12394  001194  0012               	return	
 12395  001196                     i2l4901:
 12396                           
 12397                           ;boostercomms.c: 699: return WindowIDBacktrack(&currentBitUCS, &currentSerialUSS, &statu
      +                          sSetIDUCS);
 12398  001196  0E5C               	movlw	low SetWindowID@currentBitUCS
 12399  001198  6E16               	movwf	WindowIDBacktrack@currentBitUC,c
 12400  00119A  0E00               	movlw	high SetWindowID@currentBitUCS
 12401  00119C  6E17               	movwf	WindowIDBacktrack@currentBitUC+1,c
 12402  00119E  0E58               	movlw	low SetWindowID@currentSerialUSS
 12403  0011A0  6E18               	movwf	WindowIDBacktrack@currentSerialUS,c
 12404  0011A2  0E00               	movlw	high SetWindowID@currentSerialUSS
 12405  0011A4  6E19               	movwf	WindowIDBacktrack@currentSerialUS+1,c
 12406  0011A6  0E5D               	movlw	low SetWindowID@statusSetIDUCS
 12407  0011A8  6E1A               	movwf	WindowIDBacktrack@statusSetIDUC,c
 12408  0011AA  0E00               	movlw	high SetWindowID@statusSetIDUCS
 12409  0011AC  6E1B               	movwf	WindowIDBacktrack@statusSetIDUC+1,c
 12410  0011AE  EC74  F009         	call	_WindowIDBacktrack	;wreg free
 12411  0011B2  0012               	return	
 12412  0011B4                     i2l537:
 12413  0011B4  BC37               	btfsc	_statusFlagsUSLG+1,6,c	;volatile
 12414  0011B6  D004               	goto	i2l4909
 12415                           
 12416                           ;boostercomms.c: 701: AssignWindowID();
 12417  0011B8  EC59  F014         	call	_AssignWindowID	;wreg free
 12418                           
 12419                           ;boostercomms.c: 702: statusSetIDUCS = 5;
 12420  0011BC  0E05               	movlw	5
 12421  0011BE  D084               	goto	L7
 12422  0011C0                     i2l4909:
 12423                           
 12424                           ;boostercomms.c: 704: if(++currentBitUCS == 14){
 12425  0011C0  2A5C               	incf	SetWindowID@currentBitUCS,f,c
 12426  0011C2  0E0E               	movlw	14
 12427  0011C4  185C               	xorwf	SetWindowID@currentBitUCS,w,c
 12428  0011C6  A4D8               	btfss	status,2,c
 12429  0011C8  D004               	goto	i2l4917
 12430                           
 12431                           ;boostercomms.c: 705: statusSetIDUCS = 0;
 12432  0011CA  0E00               	movlw	0
 12433  0011CC  6E5D               	movwf	SetWindowID@statusSetIDUCS,c
 12434                           
 12435                           ;boostercomms.c: 706: return 1;
 12436  0011CE  0E01               	movlw	1
 12437  0011D0  0012               	return	
 12438  0011D2                     i2l4917:
 12439                           
 12440                           ;boostercomms.c: 707: }
 12441                           ;boostercomms.c: 708: BoosterCommandStart(currentSerialUSS, 0b000, currentBitUCS);
 12442  0011D2  C058  F007         	movff	SetWindowID@currentSerialUSS,BoosterCommandStart@destSerialUS
 12443  0011D6  C059  F008         	movff	SetWindowID@currentSerialUSS+1,BoosterCommandStart@destSerialUS+1
 12444  0011DA  0E00               	movlw	0
 12445  0011DC  6E09               	movwf	BoosterCommandStart@destCommandUC,c
 12446  0011DE  C05C  F00A         	movff	SetWindowID@currentBitUCS,BoosterCommandStart@destPayloadUC
 12447  0011E2  EC07  F012         	call	_BoosterCommandStart	;wreg free
 12448                           
 12449                           ;boostercomms.c: 709: }
 12450                           ;boostercomms.c: 710: }else if(statusSetIDUCS == 5){
 12451  0011E6  D07E               	goto	i2l4973
 12452  0011E8                     i2l4919:
 12453  0011E8  0E05               	movlw	5
 12454  0011EA  185D               	xorwf	SetWindowID@statusSetIDUCS,w,c
 12455  0011EC  A4D8               	btfss	status,2,c
 12456  0011EE  D042               	goto	i2l4939
 12457                           
 12458                           ;boostercomms.c: 711: statusSetIDUCS = 4;
 12459  0011F0  0E04               	movlw	4
 12460  0011F2  6E5D               	movwf	SetWindowID@statusSetIDUCS,c
 12461                           
 12462                           ;boostercomms.c: 712: if(!(currentSerialUSS & (1 << currentBitUCS))){
 12463  0011F4  C05C  F023         	movff	SetWindowID@currentBitUCS,??_SetWindowID
 12464  0011F8  0E01               	movlw	1
 12465  0011FA  6E24               	movwf	(??_SetWindowID+1)& (0+255),c
 12466  0011FC  0E00               	movlw	0
 12467  0011FE  6E25               	movwf	(??_SetWindowID+2)& (0+255),c
 12468  001200  2A23               	incf	??_SetWindowID,f,c
 12469  001202  D003               	goto	i2u474_44
 12470  001204                     i2u474_45:
 12471  001204  90D8               	bcf	status,0,c
 12472  001206  3624               	rlcf	??_SetWindowID+1,f,c
 12473  001208  3625               	rlcf	??_SetWindowID+2,f,c
 12474  00120A                     i2u474_44:
 12475  00120A  2E23               	decfsz	??_SetWindowID,f,c
 12476  00120C  D7FB               	goto	i2u474_45
 12477  00120E  5058               	movf	SetWindowID@currentSerialUSS,w,c
 12478  001210  1624               	andwf	??_SetWindowID+1,f,c
 12479  001212  5059               	movf	SetWindowID@currentSerialUSS+1,w,c
 12480  001214  1625               	andwf	??_SetWindowID+2,f,c
 12481  001216  5024               	movf	??_SetWindowID+1,w,c
 12482  001218  1025               	iorwf	??_SetWindowID+2,w,c
 12483  00121A  A4D8               	btfss	status,2,c
 12484  00121C  D01C               	goto	i2l4935
 12485                           
 12486                           ;boostercomms.c: 713: currentSerialUSS |= (1 << currentBitUCS);
 12487  00121E  C05C  F023         	movff	SetWindowID@currentBitUCS,??_SetWindowID
 12488  001222  0E01               	movlw	1
 12489  001224  6E24               	movwf	(??_SetWindowID+1)& (0+255),c
 12490  001226  0E00               	movlw	0
 12491  001228  6E25               	movwf	(??_SetWindowID+2)& (0+255),c
 12492  00122A  2A23               	incf	??_SetWindowID,f,c
 12493  00122C  D003               	goto	i2u476_44
 12494  00122E                     i2u476_45:
 12495  00122E  90D8               	bcf	status,0,c
 12496  001230  3624               	rlcf	??_SetWindowID+1,f,c
 12497  001232  3625               	rlcf	??_SetWindowID+2,f,c
 12498  001234                     i2u476_44:
 12499  001234  2E23               	decfsz	??_SetWindowID,f,c
 12500  001236  D7FB               	goto	i2u476_45
 12501  001238  5024               	movf	??_SetWindowID+1,w,c
 12502  00123A  1258               	iorwf	SetWindowID@currentSerialUSS,f,c
 12503  00123C  5025               	movf	??_SetWindowID+2,w,c
 12504  00123E  1259               	iorwf	SetWindowID@currentSerialUSS+1,f,c
 12505                           
 12506                           ;boostercomms.c: 714: BoosterCommandStart(currentSerialUSS, 0b000, currentBitUCS);
 12507  001240  C058  F007         	movff	SetWindowID@currentSerialUSS,BoosterCommandStart@destSerialUS
 12508  001244  C059  F008         	movff	SetWindowID@currentSerialUSS+1,BoosterCommandStart@destSerialUS+1
 12509  001248  0E00               	movlw	0
 12510  00124A  6E09               	movwf	BoosterCommandStart@destCommandUC,c
 12511  00124C  C05C  F00A         	movff	SetWindowID@currentBitUCS,BoosterCommandStart@destPayloadUC
 12512  001250  EC07  F012         	call	_BoosterCommandStart	;wreg free
 12513  001254  D79E               	goto	i2l4895
 12514  001256                     i2l4935:
 12515                           
 12516                           ;boostercomms.c: 717: return WindowIDBacktrack(&currentBitUCS, &currentSerialUSS, &statu
      +                          sSetIDUCS);
 12517  001256  0E5C               	movlw	low SetWindowID@currentBitUCS
 12518  001258  6E16               	movwf	WindowIDBacktrack@currentBitUC,c
 12519  00125A  0E00               	movlw	high SetWindowID@currentBitUCS
 12520  00125C  6E17               	movwf	WindowIDBacktrack@currentBitUC+1,c
 12521  00125E  0E58               	movlw	low SetWindowID@currentSerialUSS
 12522  001260  6E18               	movwf	WindowIDBacktrack@currentSerialUS,c
 12523  001262  0E00               	movlw	high SetWindowID@currentSerialUSS
 12524  001264  6E19               	movwf	WindowIDBacktrack@currentSerialUS+1,c
 12525  001266  0E5D               	movlw	low SetWindowID@statusSetIDUCS
 12526  001268  6E1A               	movwf	WindowIDBacktrack@statusSetIDUC,c
 12527  00126A  0E00               	movlw	high SetWindowID@statusSetIDUCS
 12528  00126C  6E1B               	movwf	WindowIDBacktrack@statusSetIDUC+1,c
 12529  00126E  EC74  F009         	call	_WindowIDBacktrack	;wreg free
 12530  001272  0012               	return	
 12531  001274                     i2l4939:
 12532  001274  0E03               	movlw	3
 12533  001276  185D               	xorwf	SetWindowID@statusSetIDUCS,w,c
 12534  001278  A4D8               	btfss	status,2,c
 12535  00127A  D016               	goto	i2l4953
 12536                           
 12537                           ;boostercomms.c: 719: ResetBoosterStates();
 12538  00127C  ECA4  F017         	call	i2_ResetBoosterStates	;wreg free
 12539                           
 12540                           ;boostercomms.c: 720: statusFlagsUSLG |= 0b000000100000000000000000;
 12541  001280  8238               	bsf	_statusFlagsUSLG+2,1,c	;volatile
 12542                           
 12543                           ;boostercomms.c: 721: currentBitUCS = 0;
 12544  001282  0E00               	movlw	0
 12545  001284  6E5C               	movwf	SetWindowID@currentBitUCS,c
 12546                           
 12547                           ;boostercomms.c: 722: currentSerialUSS = 0;
 12548  001286  0E00               	movlw	0
 12549  001288  6E59               	movwf	SetWindowID@currentSerialUSS+1,c
 12550  00128A  0E00               	movlw	0
 12551  00128C  6E58               	movwf	SetWindowID@currentSerialUSS,c
 12552                           
 12553                           ;boostercomms.c: 723: statusSetIDUCS = 4;
 12554  00128E  0E04               	movlw	4
 12555  001290  6E5D               	movwf	SetWindowID@statusSetIDUCS,c
 12556                           
 12557                           ;boostercomms.c: 724: BoosterCommandStart(0, 0b000, 0);
 12558  001292  0E00               	movlw	0
 12559  001294  6E08               	movwf	BoosterCommandStart@destSerialUS+1,c
 12560  001296  0E00               	movlw	0
 12561  001298  6E07               	movwf	BoosterCommandStart@destSerialUS,c
 12562  00129A  0E00               	movlw	0
 12563  00129C  6E09               	movwf	BoosterCommandStart@destCommandUC,c
 12564  00129E  0E00               	movlw	0
 12565  0012A0  6E0A               	movwf	BoosterCommandStart@destPayloadUC,c
 12566  0012A2  EC07  F012         	call	_BoosterCommandStart	;wreg free
 12567                           
 12568                           ;boostercomms.c: 725: }else if(statusSetIDUCS == 1){
 12569  0012A6  D01E               	goto	i2l4973
 12570  0012A8                     i2l4953:
 12571  0012A8  045D               	decf	SetWindowID@statusSetIDUCS,w,c
 12572  0012AA  A4D8               	btfss	status,2,c
 12573  0012AC  D00F               	goto	i2l4969
 12574                           
 12575                           ;boostercomms.c: 726: if((statusFlagsUSLG & 0b000000000000100000000000) && !(statusFlags
      +                          USLG & 0b000000000100000000000000))
 12576  0012AE  B637               	btfsc	_statusFlagsUSLG+1,3,c	;volatile
 12577  0012B0  BC37               	btfsc	_statusFlagsUSLG+1,6,c	;volatile
 12578  0012B2  D003               	goto	i2l552
 12579                           
 12580                           ;boostercomms.c: 727: AssignSerialNumber();
 12581  0012B4  EC57  F017         	call	_AssignSerialNumber	;wreg free
 12582  0012B8  D006               	goto	i2l4967
 12583  0012BA                     i2l552:
 12584                           
 12585                           ;boostercomms.c: 728: else if(statusFlagsUSLG & 0b000000000100000000000000){
 12586  0012BA  AC37               	btfss	_statusFlagsUSLG+1,6,c	;volatile
 12587  0012BC  D004               	goto	i2l4967
 12588                           
 12589                           ;boostercomms.c: 729: statusSetIDUCS = 0;
 12590  0012BE  0E00               	movlw	0
 12591  0012C0  6E5D               	movwf	SetWindowID@statusSetIDUCS,c
 12592                           
 12593                           ;boostercomms.c: 730: return 1;
 12594  0012C2  0E01               	movlw	1
 12595  0012C4  0012               	return	
 12596  0012C6                     i2l4967:
 12597                           
 12598                           ;boostercomms.c: 731: }
 12599                           ;boostercomms.c: 732: statusSetIDUCS = 3;
 12600  0012C6  0E03               	movlw	3
 12601  0012C8                     L7:
 12602  0012C8  6E5D               	movwf	SetWindowID@statusSetIDUCS,c
 12603                           
 12604                           ;boostercomms.c: 733: }else{
 12605  0012CA  D00C               	goto	i2l4973
 12606  0012CC                     i2l4969:
 12607                           
 12608                           ;boostercomms.c: 734: statusSetIDUCS = 1;
 12609  0012CC  0E01               	movlw	1
 12610  0012CE  6E5D               	movwf	SetWindowID@statusSetIDUCS,c
 12611                           
 12612                           ;boostercomms.c: 735: BoosterCommandStart(0x3FFE, 0b000, 13);
 12613  0012D0  0E3F               	movlw	63
 12614  0012D2  6E08               	movwf	BoosterCommandStart@destSerialUS+1,c
 12615  0012D4  0EFE               	movlw	254
 12616  0012D6  6E07               	movwf	BoosterCommandStart@destSerialUS,c
 12617  0012D8  0E00               	movlw	0
 12618  0012DA  6E09               	movwf	BoosterCommandStart@destCommandUC,c
 12619  0012DC  0E0D               	movlw	13
 12620  0012DE  6E0A               	movwf	BoosterCommandStart@destPayloadUC,c
 12621  0012E0  EC07  F012         	call	_BoosterCommandStart	;wreg free
 12622  0012E4                     i2l4973:
 12623                           
 12624                           ;boostercomms.c: 736: }
 12625                           ;boostercomms.c: 738: return 0;
 12626  0012E4  0E00               	movlw	0
 12627  0012E6  0012               	return	
 12628  0012E8                     __end_of_SetWindowID:
 12629                           	opt stack 0
 12630                           pclatu	equ	0xFFB
 12631                           pclath	equ	0xFFA
 12632                           tblptru	equ	0xFF8
 12633                           tblptrh	equ	0xFF7
 12634                           tblptrl	equ	0xFF6
 12635                           tablat	equ	0xFF5
 12636                           prodh	equ	0xFF4
 12637                           prodl	equ	0xFF3
 12638                           intcon	equ	0xFF2
 12639                           postinc0	equ	0xFEE
 12640                           fsr0h	equ	0xFEA
 12641                           fsr0l	equ	0xFE9
 12642                           wreg	equ	0xFE8
 12643                           indf1	equ	0xFE7
 12644                           postinc1	equ	0xFE6
 12645                           postdec1	equ	0xFE5
 12646                           fsr1h	equ	0xFE2
 12647                           fsr1l	equ	0xFE1
 12648                           indf2	equ	0xFDF
 12649                           postinc2	equ	0xFDE
 12650                           postdec2	equ	0xFDD
 12651                           plusw2	equ	0xFDB
 12652                           fsr2h	equ	0xFDA
 12653                           fsr2l	equ	0xFD9
 12654                           status	equ	0xFD8
 12655                           
 12656 ;; *************** function i2_ResetBoosterStates *****************
 12657 ;; Defined at:
 12658 ;;		line 589 in file "boostercomms.c"
 12659 ;; Parameters:    Size  Location     Type
 12660 ;;		None
 12661 ;; Auto vars:     Size  Location     Type
 12662 ;;  ResetBooster    1    1[COMRAM] unsigned char 
 12663 ;; Return value:  Size  Location     Type
 12664 ;;                  1    wreg      void 
 12665 ;; Registers used:
 12666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12667 ;; Tracked objects:
 12668 ;;		On entry : 0/0
 12669 ;;		On exit  : 0/0
 12670 ;;		Unchanged: 0/0
 12671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12672 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12673 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12674 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12675 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12676 ;;Total ram usage:        1 bytes
 12677 ;; Hardware stack levels used:    1
 12678 ;; Hardware stack levels required when called:    1
 12679 ;; This function calls:
 12680 ;;		i2_ResetSingleBoosterState
 12681 ;; This function is called by:
 12682 ;;		_SetWindowID
 12683 ;;		i2_ForceFiringMode
 12684 ;; This function uses a non-reentrant model
 12685 ;;
 12686                           
 12687                           	psect	text67
 12688  002F48                     __ptext67:
 12689                           	opt stack 0
 12690  002F48                     i2_ResetBoosterStates:
 12691                           	opt stack 21
 12692                           
 12693                           ;boostercomms.c: 590: unsigned char boosterCountUC;
 12694                           ;boostercomms.c: 592: for(boosterCountUC = 0; boosterCountUC < 30; boosterCountUC++)
 12695                           
 12696                           ;incstack = 0
 12697  002F48  0E00               	movlw	0
 12698  002F4A  6E02               	movwf	i2ResetBoosterStates@boosterCountUC,c
 12699  002F4C                     i2l4577:
 12700  002F4C  0E1D               	movlw	29
 12701  002F4E  6402               	cpfsgt	i2ResetBoosterStates@boosterCountUC,c
 12702  002F50  D001               	goto	i2l4581
 12703  002F52  0012               	return	
 12704  002F54                     i2l4581:
 12705                           
 12706                           ;boostercomms.c: 593: ResetSingleBoosterState(boosterCountUC);
 12707  002F54  5002               	movf	i2ResetBoosterStates@boosterCountUC,w,c
 12708  002F56  EC56  F010         	call	i2_ResetSingleBoosterState
 12709  002F5A  2A02               	incf	i2ResetBoosterStates@boosterCountUC,f,c
 12710  002F5C  D7F7               	goto	i2l4577
 12711  002F5E                     __end_ofi2_ResetBoosterStates:
 12712                           	opt stack 0
 12713                           pclatu	equ	0xFFB
 12714                           pclath	equ	0xFFA
 12715                           tblptru	equ	0xFF8
 12716                           tblptrh	equ	0xFF7
 12717                           tblptrl	equ	0xFF6
 12718                           tablat	equ	0xFF5
 12719                           prodh	equ	0xFF4
 12720                           prodl	equ	0xFF3
 12721                           intcon	equ	0xFF2
 12722                           postinc0	equ	0xFEE
 12723                           fsr0h	equ	0xFEA
 12724                           fsr0l	equ	0xFE9
 12725                           wreg	equ	0xFE8
 12726                           indf1	equ	0xFE7
 12727                           postinc1	equ	0xFE6
 12728                           postdec1	equ	0xFE5
 12729                           fsr1h	equ	0xFE2
 12730                           fsr1l	equ	0xFE1
 12731                           indf2	equ	0xFDF
 12732                           postinc2	equ	0xFDE
 12733                           postdec2	equ	0xFDD
 12734                           plusw2	equ	0xFDB
 12735                           fsr2h	equ	0xFDA
 12736                           fsr2l	equ	0xFD9
 12737                           status	equ	0xFD8
 12738                           
 12739 ;; *************** function _WindowIDBacktrack *****************
 12740 ;; Defined at:
 12741 ;;		line 624 in file "boostercomms.c"
 12742 ;; Parameters:    Size  Location     Type
 12743 ;;  currentBitUC    2   21[COMRAM] PTR unsigned char 
 12744 ;;		 -> SetWindowID@currentBitUCS(1), 
 12745 ;;  currentSeria    2   23[COMRAM] PTR unsigned short 
 12746 ;;		 -> SetWindowID@currentSerialUSS(2), 
 12747 ;;  statusSetIDU    2   25[COMRAM] PTR unsigned char 
 12748 ;;		 -> SetWindowID@statusSetIDUCS(1), 
 12749 ;; Auto vars:     Size  Location     Type
 12750 ;;		None
 12751 ;; Return value:  Size  Location     Type
 12752 ;;                  1    wreg      unsigned char 
 12753 ;; Registers used:
 12754 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12755 ;; Tracked objects:
 12756 ;;		On entry : 0/0
 12757 ;;		On exit  : 0/0
 12758 ;;		Unchanged: 0/0
 12759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 12760 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12762 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12763 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 12764 ;;Total ram usage:       13 bytes
 12765 ;; Hardware stack levels used:    1
 12766 ;; Hardware stack levels required when called:    2
 12767 ;; This function calls:
 12768 ;;		_BoosterCommandStart
 12769 ;; This function is called by:
 12770 ;;		_SetWindowID
 12771 ;; This function uses a non-reentrant model
 12772 ;;
 12773                           
 12774                           	psect	text68
 12775  0012E8                     __ptext68:
 12776                           	opt stack 0
 12777  0012E8                     _WindowIDBacktrack:
 12778                           	opt stack 19
 12779                           
 12780                           ;boostercomms.c: 626: while(*currentBitUC && (*currentSerialUS & (1 << *currentBitUC))){
 12781                           
 12782                           ;incstack = 0
 12783  0012E8  D02E               	goto	i2l4441
 12784  0012EA                     i2l4437:
 12785                           
 12786                           ;boostercomms.c: 627: *currentSerialUS &= ~(*currentSerialUS & (1 << *currentBitUC));
 12787  0012EA  C018  FFD9         	movff	WindowIDBacktrack@currentSerialUS,fsr2l
 12788  0012EE  C019  FFDA         	movff	WindowIDBacktrack@currentSerialUS+1,fsr2h
 12789  0012F2  CFDE F01C          	movff	postinc2,??_WindowIDBacktrack
 12790  0012F6  CFDD F01D          	movff	postdec2,??_WindowIDBacktrack+1
 12791  0012FA  C016  FFD9         	movff	WindowIDBacktrack@currentBitUC,fsr2l
 12792  0012FE  C017  FFDA         	movff	WindowIDBacktrack@currentBitUC+1,fsr2h
 12793  001302  50DF               	movf	indf2,w,c
 12794  001304  6E1E               	movwf	(??_WindowIDBacktrack+2)& (0+255),c
 12795  001306  0E01               	movlw	1
 12796  001308  6E1F               	movwf	(??_WindowIDBacktrack+3)& (0+255),c
 12797  00130A  0E00               	movlw	0
 12798  00130C  6E20               	movwf	(??_WindowIDBacktrack+4)& (0+255),c
 12799  00130E  2A1E               	incf	??_WindowIDBacktrack+2,f,c
 12800  001310  D003               	goto	i2u395_44
 12801  001312                     i2u395_45:
 12802  001312  90D8               	bcf	status,0,c
 12803  001314  361F               	rlcf	??_WindowIDBacktrack+3,f,c
 12804  001316  3620               	rlcf	??_WindowIDBacktrack+4,f,c
 12805  001318                     i2u395_44:
 12806  001318  2E1E               	decfsz	??_WindowIDBacktrack+2,f,c
 12807  00131A  D7FB               	goto	i2u395_45
 12808  00131C  501C               	movf	??_WindowIDBacktrack,w,c
 12809  00131E  161F               	andwf	??_WindowIDBacktrack+3,f,c
 12810  001320  501D               	movf	??_WindowIDBacktrack+1,w,c
 12811  001322  1620               	andwf	??_WindowIDBacktrack+4,f,c
 12812  001324  1C1F               	comf	??_WindowIDBacktrack+3,w,c
 12813  001326  6E21               	movwf	(??_WindowIDBacktrack+5)& (0+255),c
 12814  001328  1C20               	comf	??_WindowIDBacktrack+4,w,c
 12815  00132A  6E22               	movwf	(??_WindowIDBacktrack+6)& (0+255),c
 12816  00132C  C018  FFD9         	movff	WindowIDBacktrack@currentSerialUS,fsr2l
 12817  001330  C019  FFDA         	movff	WindowIDBacktrack@currentSerialUS+1,fsr2h
 12818  001334  5021               	movf	??_WindowIDBacktrack+5,w,c
 12819  001336  16DE               	andwf	postinc2,f,c
 12820  001338  5022               	movf	??_WindowIDBacktrack+6,w,c
 12821  00133A  16DD               	andwf	postdec2,f,c
 12822                           
 12823                           ;boostercomms.c: 628: (*currentBitUC)--;
 12824  00133C  C016  FFD9         	movff	WindowIDBacktrack@currentBitUC,fsr2l
 12825  001340  C017  FFDA         	movff	WindowIDBacktrack@currentBitUC+1,fsr2h
 12826  001344  06DF               	decf	indf2,f,c
 12827  001346                     i2l4441:
 12828  001346  C016  FFD9         	movff	WindowIDBacktrack@currentBitUC,fsr2l
 12829  00134A  C017  FFDA         	movff	WindowIDBacktrack@currentBitUC+1,fsr2h
 12830  00134E  50DF               	movf	indf2,w,c
 12831  001350  B4D8               	btfsc	status,2,c
 12832  001352  D021               	goto	i2l4445
 12833  001354  C018  FFD9         	movff	WindowIDBacktrack@currentSerialUS,fsr2l
 12834  001358  C019  FFDA         	movff	WindowIDBacktrack@currentSerialUS+1,fsr2h
 12835  00135C  CFDE F01C          	movff	postinc2,??_WindowIDBacktrack
 12836  001360  CFDD F01D          	movff	postdec2,??_WindowIDBacktrack+1
 12837  001364  C016  FFD9         	movff	WindowIDBacktrack@currentBitUC,fsr2l
 12838  001368  C017  FFDA         	movff	WindowIDBacktrack@currentBitUC+1,fsr2h
 12839  00136C  50DF               	movf	indf2,w,c
 12840  00136E  6E1E               	movwf	(??_WindowIDBacktrack+2)& (0+255),c
 12841  001370  0E01               	movlw	1
 12842  001372  6E1F               	movwf	(??_WindowIDBacktrack+3)& (0+255),c
 12843  001374  0E00               	movlw	0
 12844  001376  6E20               	movwf	(??_WindowIDBacktrack+4)& (0+255),c
 12845  001378  2A1E               	incf	??_WindowIDBacktrack+2,f,c
 12846  00137A  D003               	goto	i2u397_44
 12847  00137C                     i2u397_45:
 12848  00137C  90D8               	bcf	status,0,c
 12849  00137E  361F               	rlcf	??_WindowIDBacktrack+3,f,c
 12850  001380  3620               	rlcf	??_WindowIDBacktrack+4,f,c
 12851  001382                     i2u397_44:
 12852  001382  2E1E               	decfsz	??_WindowIDBacktrack+2,f,c
 12853  001384  D7FB               	goto	i2u397_45
 12854  001386  501C               	movf	??_WindowIDBacktrack,w,c
 12855  001388  161F               	andwf	??_WindowIDBacktrack+3,f,c
 12856  00138A  501D               	movf	??_WindowIDBacktrack+1,w,c
 12857  00138C  1620               	andwf	??_WindowIDBacktrack+4,f,c
 12858  00138E  501F               	movf	??_WindowIDBacktrack+3,w,c
 12859  001390  1020               	iorwf	??_WindowIDBacktrack+4,w,c
 12860  001392  A4D8               	btfss	status,2,c
 12861  001394  D7AA               	goto	i2l4437
 12862  001396                     i2l4445:
 12863                           
 12864                           ;boostercomms.c: 629: }
 12865                           ;boostercomms.c: 630: if(!(*currentBitUC) && (*currentSerialUS & (1 << *currentBitUC))){
 12866  001396  C016  FFD9         	movff	WindowIDBacktrack@currentBitUC,fsr2l
 12867  00139A  C017  FFDA         	movff	WindowIDBacktrack@currentBitUC+1,fsr2h
 12868  00139E  50DF               	movf	indf2,w,c
 12869  0013A0  A4D8               	btfss	status,2,c
 12870  0013A2  D029               	goto	i2l4457
 12871  0013A4  C018  FFD9         	movff	WindowIDBacktrack@currentSerialUS,fsr2l
 12872  0013A8  C019  FFDA         	movff	WindowIDBacktrack@currentSerialUS+1,fsr2h
 12873  0013AC  CFDE F01C          	movff	postinc2,??_WindowIDBacktrack
 12874  0013B0  CFDD F01D          	movff	postdec2,??_WindowIDBacktrack+1
 12875  0013B4  C016  FFD9         	movff	WindowIDBacktrack@currentBitUC,fsr2l
 12876  0013B8  C017  FFDA         	movff	WindowIDBacktrack@currentBitUC+1,fsr2h
 12877  0013BC  50DF               	movf	indf2,w,c
 12878  0013BE  6E1E               	movwf	(??_WindowIDBacktrack+2)& (0+255),c
 12879  0013C0  0E01               	movlw	1
 12880  0013C2  6E1F               	movwf	(??_WindowIDBacktrack+3)& (0+255),c
 12881  0013C4  0E00               	movlw	0
 12882  0013C6  6E20               	movwf	(??_WindowIDBacktrack+4)& (0+255),c
 12883  0013C8  2A1E               	incf	??_WindowIDBacktrack+2,f,c
 12884  0013CA  D003               	goto	i2u400_44
 12885  0013CC                     i2u400_45:
 12886  0013CC  90D8               	bcf	status,0,c
 12887  0013CE  361F               	rlcf	??_WindowIDBacktrack+3,f,c
 12888  0013D0  3620               	rlcf	??_WindowIDBacktrack+4,f,c
 12889  0013D2                     i2u400_44:
 12890  0013D2  2E1E               	decfsz	??_WindowIDBacktrack+2,f,c
 12891  0013D4  D7FB               	goto	i2u400_45
 12892  0013D6  501C               	movf	??_WindowIDBacktrack,w,c
 12893  0013D8  161F               	andwf	??_WindowIDBacktrack+3,f,c
 12894  0013DA  501D               	movf	??_WindowIDBacktrack+1,w,c
 12895  0013DC  1620               	andwf	??_WindowIDBacktrack+4,f,c
 12896  0013DE  501F               	movf	??_WindowIDBacktrack+3,w,c
 12897  0013E0  1020               	iorwf	??_WindowIDBacktrack+4,w,c
 12898  0013E2  B4D8               	btfsc	status,2,c
 12899  0013E4  D008               	goto	i2l4457
 12900                           
 12901                           ;boostercomms.c: 631: *statusSetIDUC = 0;
 12902  0013E6  C01A  FFD9         	movff	WindowIDBacktrack@statusSetIDUC,fsr2l
 12903  0013EA  C01B  FFDA         	movff	WindowIDBacktrack@statusSetIDUC+1,fsr2h
 12904  0013EE  0E00               	movlw	0
 12905  0013F0  6EDF               	movwf	indf2,c
 12906                           
 12907                           ;boostercomms.c: 632: return 1;
 12908  0013F2  0E01               	movlw	1
 12909                           
 12910                           ;boostercomms.c: 633: }else{
 12911  0013F4  0012               	return	
 12912  0013F6                     i2l4457:
 12913                           
 12914                           ;boostercomms.c: 634: *currentSerialUS |= (1 << *currentBitUC);
 12915  0013F6  C016  FFD9         	movff	WindowIDBacktrack@currentBitUC,fsr2l
 12916  0013FA  C017  FFDA         	movff	WindowIDBacktrack@currentBitUC+1,fsr2h
 12917  0013FE  50DF               	movf	indf2,w,c
 12918  001400  6E1C               	movwf	??_WindowIDBacktrack& (0+255),c
 12919  001402  0E01               	movlw	1
 12920  001404  6E1D               	movwf	(??_WindowIDBacktrack+1)& (0+255),c
 12921  001406  0E00               	movlw	0
 12922  001408  6E1E               	movwf	(??_WindowIDBacktrack+2)& (0+255),c
 12923  00140A  2A1C               	incf	??_WindowIDBacktrack,f,c
 12924  00140C  D003               	goto	i2u402_44
 12925  00140E                     i2u402_45:
 12926  00140E  90D8               	bcf	status,0,c
 12927  001410  361D               	rlcf	??_WindowIDBacktrack+1,f,c
 12928  001412  361E               	rlcf	??_WindowIDBacktrack+2,f,c
 12929  001414                     i2u402_44:
 12930  001414  2E1C               	decfsz	??_WindowIDBacktrack,f,c
 12931  001416  D7FB               	goto	i2u402_45
 12932  001418  C018  FFD9         	movff	WindowIDBacktrack@currentSerialUS,fsr2l
 12933  00141C  C019  FFDA         	movff	WindowIDBacktrack@currentSerialUS+1,fsr2h
 12934  001420  501D               	movf	??_WindowIDBacktrack+1,w,c
 12935  001422  12DE               	iorwf	postinc2,f,c
 12936  001424  501E               	movf	??_WindowIDBacktrack+2,w,c
 12937  001426  12DD               	iorwf	postdec2,f,c
 12938                           
 12939                           ;boostercomms.c: 635: BoosterCommandStart(*currentSerialUS, 0b000, *currentBitUC);
 12940  001428  C018  FFD9         	movff	WindowIDBacktrack@currentSerialUS,fsr2l
 12941  00142C  C019  FFDA         	movff	WindowIDBacktrack@currentSerialUS+1,fsr2h
 12942  001430  CFDE F007          	movff	postinc2,BoosterCommandStart@destSerialUS
 12943  001434  CFDD F008          	movff	postdec2,BoosterCommandStart@destSerialUS+1
 12944  001438  0E00               	movlw	0
 12945  00143A  6E09               	movwf	BoosterCommandStart@destCommandUC,c
 12946  00143C  C016  FFD9         	movff	WindowIDBacktrack@currentBitUC,fsr2l
 12947  001440  C017  FFDA         	movff	WindowIDBacktrack@currentBitUC+1,fsr2h
 12948  001444  50DF               	movf	indf2,w,c
 12949  001446  6E0A               	movwf	BoosterCommandStart@destPayloadUC,c
 12950  001448  EC07  F012         	call	_BoosterCommandStart	;wreg free
 12951                           
 12952                           ;boostercomms.c: 636: return 0;
 12953  00144C  0E00               	movlw	0
 12954  00144E  0012               	return	
 12955  001450                     __end_of_WindowIDBacktrack:
 12956                           	opt stack 0
 12957                           pclatu	equ	0xFFB
 12958                           pclath	equ	0xFFA
 12959                           tblptru	equ	0xFF8
 12960                           tblptrh	equ	0xFF7
 12961                           tblptrl	equ	0xFF6
 12962                           tablat	equ	0xFF5
 12963                           prodh	equ	0xFF4
 12964                           prodl	equ	0xFF3
 12965                           intcon	equ	0xFF2
 12966                           postinc0	equ	0xFEE
 12967                           fsr0h	equ	0xFEA
 12968                           fsr0l	equ	0xFE9
 12969                           wreg	equ	0xFE8
 12970                           indf1	equ	0xFE7
 12971                           postinc1	equ	0xFE6
 12972                           postdec1	equ	0xFE5
 12973                           fsr1h	equ	0xFE2
 12974                           fsr1l	equ	0xFE1
 12975                           indf2	equ	0xFDF
 12976                           postinc2	equ	0xFDE
 12977                           postdec2	equ	0xFDD
 12978                           plusw2	equ	0xFDB
 12979                           fsr2h	equ	0xFDA
 12980                           fsr2l	equ	0xFD9
 12981                           status	equ	0xFD8
 12982                           
 12983 ;; *************** function _AssignWindowID *****************
 12984 ;; Defined at:
 12985 ;;		line 640 in file "boostercomms.c"
 12986 ;; Parameters:    Size  Location     Type
 12987 ;;		None
 12988 ;; Auto vars:     Size  Location     Type
 12989 ;;  serialNumber    2   21[COMRAM] unsigned short 
 12990 ;;  newWindowUC     1   23[COMRAM] unsigned char 
 12991 ;; Return value:  Size  Location     Type
 12992 ;;                  1    wreg      void 
 12993 ;; Registers used:
 12994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12995 ;; Tracked objects:
 12996 ;;		On entry : 0/0
 12997 ;;		On exit  : 0/0
 12998 ;;		Unchanged: 0/0
 12999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13001 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13003 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13004 ;;Total ram usage:        3 bytes
 13005 ;; Hardware stack levels used:    1
 13006 ;; Hardware stack levels required when called:    2
 13007 ;; This function calls:
 13008 ;;		_BoosterCommandStart
 13009 ;;		_LowestIdleWindow
 13010 ;; This function is called by:
 13011 ;;		_SetWindowID
 13012 ;; This function uses a non-reentrant model
 13013 ;;
 13014                           
 13015                           	psect	text69
 13016  0028B2                     __ptext69:
 13017                           	opt stack 0
 13018  0028B2                     _AssignWindowID:
 13019                           	opt stack 19
 13020                           
 13021                           ;boostercomms.c: 641: unsigned char newWindowUC;
 13022                           ;boostercomms.c: 642: unsigned short serialNumberUS;
 13023                           ;boostercomms.c: 644: newWindowUC = LowestIdleWindow();
 13024                           
 13025                           ;incstack = 0
 13026  0028B2  EC6D  F016         	call	_LowestIdleWindow	;wreg free
 13027  0028B6  6E18               	movwf	AssignWindowID@newWindowUC,c
 13028                           
 13029                           ;boostercomms.c: 645: serialNumberUS = (commandResponseUS & ~0b1000000000000000);
 13030  0028B8  0EFF               	movlw	255
 13031  0028BA  145A               	andwf	_commandResponseUS,w,c
 13032  0028BC  6E16               	movwf	AssignWindowID@serialNumberUS,c
 13033  0028BE  0E7F               	movlw	127
 13034  0028C0  145B               	andwf	_commandResponseUS+1,w,c
 13035  0028C2  6E17               	movwf	AssignWindowID@serialNumberUS+1,c
 13036                           
 13037                           ;boostercomms.c: 646: boosterCommsDataSerial[newWindowUC] = serialNumberUS;
 13038  0028C4  5018               	movf	AssignWindowID@newWindowUC,w,c
 13039  0028C6  0D02               	mullw	2
 13040  0028C8  0E84               	movlw	low _boosterCommsDataSerial
 13041  0028CA  24F3               	addwf	prodl,w,c
 13042  0028CC  6ED9               	movwf	fsr2l,c
 13043  0028CE  0E01               	movlw	high _boosterCommsDataSerial
 13044  0028D0  20F4               	addwfc	prodh,w,c
 13045  0028D2  6EDA               	movwf	fsr2h,c
 13046  0028D4  C016  FFDE         	movff	AssignWindowID@serialNumberUS,postinc2
 13047  0028D8  C017  FFDD         	movff	AssignWindowID@serialNumberUS+1,postdec2
 13048                           
 13049                           ;boostercomms.c: 647: boosterCommsData[4][newWindowUC] = 0;
 13050  0028DC  5018               	movf	AssignWindowID@newWindowUC,w,c
 13051  0028DE  0D01               	mullw	1
 13052  0028E0  0E78               	movlw	low (_boosterCommsData+120)
 13053  0028E2  24F3               	addwf	prodl,w,c
 13054  0028E4  6ED9               	movwf	fsr2l,c
 13055  0028E6  0E03               	movlw	high (_boosterCommsData+120)
 13056  0028E8  20F4               	addwfc	prodh,w,c
 13057  0028EA  6EDA               	movwf	fsr2h,c
 13058  0028EC  0E00               	movlw	0
 13059  0028EE  6EDF               	movwf	indf2,c
 13060                           
 13061                           ;boostercomms.c: 649: BoosterCommandStart(serialNumberUS, 0b010, newWindowUC+1);
 13062  0028F0  C016  F007         	movff	AssignWindowID@serialNumberUS,BoosterCommandStart@destSerialUS
 13063  0028F4  C017  F008         	movff	AssignWindowID@serialNumberUS+1,BoosterCommandStart@destSerialUS+1
 13064  0028F8  0E02               	movlw	2
 13065  0028FA  6E09               	movwf	BoosterCommandStart@destCommandUC,c
 13066  0028FC  2818               	incf	AssignWindowID@newWindowUC,w,c
 13067  0028FE  6E0A               	movwf	BoosterCommandStart@destPayloadUC,c
 13068  002900  EC07  F012         	call	_BoosterCommandStart	;wreg free
 13069  002904  0012               	return		;funcret
 13070  002906                     __end_of_AssignWindowID:
 13071                           	opt stack 0
 13072                           pclatu	equ	0xFFB
 13073                           pclath	equ	0xFFA
 13074                           tblptru	equ	0xFF8
 13075                           tblptrh	equ	0xFF7
 13076                           tblptrl	equ	0xFF6
 13077                           tablat	equ	0xFF5
 13078                           prodh	equ	0xFF4
 13079                           prodl	equ	0xFF3
 13080                           intcon	equ	0xFF2
 13081                           postinc0	equ	0xFEE
 13082                           fsr0h	equ	0xFEA
 13083                           fsr0l	equ	0xFE9
 13084                           wreg	equ	0xFE8
 13085                           indf1	equ	0xFE7
 13086                           postinc1	equ	0xFE6
 13087                           postdec1	equ	0xFE5
 13088                           fsr1h	equ	0xFE2
 13089                           fsr1l	equ	0xFE1
 13090                           indf2	equ	0xFDF
 13091                           postinc2	equ	0xFDE
 13092                           postdec2	equ	0xFDD
 13093                           plusw2	equ	0xFDB
 13094                           fsr2h	equ	0xFDA
 13095                           fsr2l	equ	0xFD9
 13096                           status	equ	0xFD8
 13097                           
 13098 ;; *************** function _AssignSerialNumber *****************
 13099 ;; Defined at:
 13100 ;;		line 652 in file "boostercomms.c"
 13101 ;; Parameters:    Size  Location     Type
 13102 ;;		None
 13103 ;; Auto vars:     Size  Location     Type
 13104 ;;		None
 13105 ;; Return value:  Size  Location     Type
 13106 ;;                  1    wreg      void 
 13107 ;; Registers used:
 13108 ;;		wreg, status,2, status,0, cstack
 13109 ;; Tracked objects:
 13110 ;;		On entry : 0/0
 13111 ;;		On exit  : 0/0
 13112 ;;		Unchanged: 0/0
 13113 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13114 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13115 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13116 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13117 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13118 ;;Total ram usage:        0 bytes
 13119 ;; Hardware stack levels used:    1
 13120 ;; Hardware stack levels required when called:    3
 13121 ;; This function calls:
 13122 ;;		_BoosterCommandStart
 13123 ;;		i2_WriteFlashValues
 13124 ;; This function is called by:
 13125 ;;		_SetWindowID
 13126 ;; This function uses a non-reentrant model
 13127 ;;
 13128                           
 13129                           	psect	text70
 13130  002EAE                     __ptext70:
 13131                           	opt stack 0
 13132  002EAE                     _AssignSerialNumber:
 13133                           	opt stack 18
 13134                           
 13135                           ;boostercomms.c: 653: BoosterCommandStart(nextSerialUSG++, 0b001, 0);
 13136                           
 13137                           ;incstack = 0
 13138  002EAE  C041  F007         	movff	_nextSerialUSG,BoosterCommandStart@destSerialUS
 13139  002EB2  C042  F008         	movff	_nextSerialUSG+1,BoosterCommandStart@destSerialUS+1
 13140  002EB6  0E01               	movlw	1
 13141  002EB8  6E09               	movwf	BoosterCommandStart@destCommandUC,c
 13142  002EBA  0E00               	movlw	0
 13143  002EBC  6E0A               	movwf	BoosterCommandStart@destPayloadUC,c
 13144  002EBE  EC07  F012         	call	_BoosterCommandStart	;wreg free
 13145  002EC2  4A41               	infsnz	_nextSerialUSG,f,c
 13146  002EC4  2A42               	incf	_nextSerialUSG+1,f,c
 13147                           
 13148                           ;boostercomms.c: 654: WriteFlashValues();
 13149  002EC6  ECCF  F015         	call	i2_WriteFlashValues	;wreg free
 13150  002ECA  0012               	return		;funcret
 13151  002ECC                     __end_of_AssignSerialNumber:
 13152                           	opt stack 0
 13153                           pclatu	equ	0xFFB
 13154                           pclath	equ	0xFFA
 13155                           tblptru	equ	0xFF8
 13156                           tblptrh	equ	0xFF7
 13157                           tblptrl	equ	0xFF6
 13158                           tablat	equ	0xFF5
 13159                           prodh	equ	0xFF4
 13160                           prodl	equ	0xFF3
 13161                           intcon	equ	0xFF2
 13162                           postinc0	equ	0xFEE
 13163                           fsr0h	equ	0xFEA
 13164                           fsr0l	equ	0xFE9
 13165                           wreg	equ	0xFE8
 13166                           indf1	equ	0xFE7
 13167                           postinc1	equ	0xFE6
 13168                           postdec1	equ	0xFE5
 13169                           fsr1h	equ	0xFE2
 13170                           fsr1l	equ	0xFE1
 13171                           indf2	equ	0xFDF
 13172                           postinc2	equ	0xFDE
 13173                           postdec2	equ	0xFDD
 13174                           plusw2	equ	0xFDB
 13175                           fsr2h	equ	0xFDA
 13176                           fsr2l	equ	0xFD9
 13177                           status	equ	0xFD8
 13178                           
 13179 ;; *************** function i2_WriteFlashValues *****************
 13180 ;; Defined at:
 13181 ;;		line 180 in file "peripherals.c"
 13182 ;; Parameters:    Size  Location     Type
 13183 ;;		None
 13184 ;; Auto vars:     Size  Location     Type
 13185 ;;		None
 13186 ;; Return value:  Size  Location     Type
 13187 ;;                  1    wreg      void 
 13188 ;; Registers used:
 13189 ;;		wreg, status,2, status,0, cstack
 13190 ;; Tracked objects:
 13191 ;;		On entry : 0/0
 13192 ;;		On exit  : 0/0
 13193 ;;		Unchanged: 0/0
 13194 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13195 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13196 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13197 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13198 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13199 ;;Total ram usage:        0 bytes
 13200 ;; Hardware stack levels used:    1
 13201 ;; Hardware stack levels required when called:    2
 13202 ;; This function calls:
 13203 ;;		i2_FlashEraseBlock
 13204 ;;		i2_FlashWriteWord
 13205 ;; This function is called by:
 13206 ;;		_AssignSerialNumber
 13207 ;; This function uses a non-reentrant model
 13208 ;;
 13209                           
 13210                           	psect	text71
 13211  002B9E                     __ptext71:
 13212                           	opt stack 0
 13213  002B9E                     i2_WriteFlashValues:
 13214                           	opt stack 18
 13215                           
 13216                           ;peripherals.c: 181: FlashEraseBlock(0xFBFE);
 13217                           
 13218                           ;incstack = 0
 13219  002B9E  0EFB               	movlw	251
 13220  002BA0  6E02               	movwf	i2FlashEraseBlock@flashAddressUS+1,c
 13221  002BA2  0EFE               	movlw	254
 13222  002BA4  6E01               	movwf	i2FlashEraseBlock@flashAddressUS,c
 13223  002BA6  ECC9  F016         	call	i2_FlashEraseBlock	;wreg free
 13224                           
 13225                           ;peripherals.c: 182: FlashWriteWord(0xFBFE, nextSerialUSG, nextSerialUSG >> 8);
 13226  002BAA  0EFB               	movlw	251
 13227  002BAC  6E02               	movwf	i2FlashWriteWord@flashAddressUS+1,c
 13228  002BAE  0EFE               	movlw	254
 13229  002BB0  6E01               	movwf	i2FlashWriteWord@flashAddressUS,c
 13230  002BB2  C041  F003         	movff	_nextSerialUSG,i2FlashWriteWord@lsbUC
 13231  002BB6  5042               	movf	_nextSerialUSG+1,w,c
 13232  002BB8  6E04               	movwf	i2FlashWriteWord@msbUC,c
 13233  002BBA  ECEB  F015         	call	i2_FlashWriteWord	;wreg free
 13234                           
 13235                           ;peripherals.c: 183: FlashWriteWord(0xFBFC, iscSerialUSG, iscSerialUSG >> 8);
 13236  002BBE  0EFB               	movlw	251
 13237  002BC0  6E02               	movwf	i2FlashWriteWord@flashAddressUS+1,c
 13238  002BC2  0EFC               	movlw	252
 13239  002BC4  6E01               	movwf	i2FlashWriteWord@flashAddressUS,c
 13240  002BC6  C0DC  F003         	movff	_iscSerialUSG,i2FlashWriteWord@lsbUC
 13241  002BCA  0100               	movlb	0	; () banked
 13242  002BCC  51DD               	movf	(_iscSerialUSG+1)& (0+255),w,b
 13243  002BCE  6E04               	movwf	i2FlashWriteWord@msbUC,c
 13244  002BD0  ECEB  F015         	call	i2_FlashWriteWord	;wreg free
 13245  002BD4  0012               	return		;funcret
 13246  002BD6                     __end_ofi2_WriteFlashValues:
 13247                           	opt stack 0
 13248                           pclatu	equ	0xFFB
 13249                           pclath	equ	0xFFA
 13250                           tblptru	equ	0xFF8
 13251                           tblptrh	equ	0xFF7
 13252                           tblptrl	equ	0xFF6
 13253                           tablat	equ	0xFF5
 13254                           prodh	equ	0xFF4
 13255                           prodl	equ	0xFF3
 13256                           intcon	equ	0xFF2
 13257                           postinc0	equ	0xFEE
 13258                           fsr0h	equ	0xFEA
 13259                           fsr0l	equ	0xFE9
 13260                           wreg	equ	0xFE8
 13261                           indf1	equ	0xFE7
 13262                           postinc1	equ	0xFE6
 13263                           postdec1	equ	0xFE5
 13264                           fsr1h	equ	0xFE2
 13265                           fsr1l	equ	0xFE1
 13266                           indf2	equ	0xFDF
 13267                           postinc2	equ	0xFDE
 13268                           postdec2	equ	0xFDD
 13269                           plusw2	equ	0xFDB
 13270                           fsr2h	equ	0xFDA
 13271                           fsr2l	equ	0xFD9
 13272                           status	equ	0xFD8
 13273                           
 13274 ;; *************** function i2_FlashWriteWord *****************
 13275 ;; Defined at:
 13276 ;;		line 148 in file "peripherals.c"
 13277 ;; Parameters:    Size  Location     Type
 13278 ;;  flashAddress    2    0[COMRAM] unsigned short 
 13279 ;;  lsbUC           1    2[COMRAM] unsigned char 
 13280 ;;  msbUC           1    3[COMRAM] unsigned char 
 13281 ;; Auto vars:     Size  Location     Type
 13282 ;;  FlashWriteWo    1    4[COMRAM] unsigned char 
 13283 ;; Return value:  Size  Location     Type
 13284 ;;                  1    wreg      void 
 13285 ;; Registers used:
 13286 ;;		wreg, status,2, cstack
 13287 ;; Tracked objects:
 13288 ;;		On entry : 0/0
 13289 ;;		On exit  : 0/0
 13290 ;;		Unchanged: 0/0
 13291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13292 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13293 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13295 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13296 ;;Total ram usage:        5 bytes
 13297 ;; Hardware stack levels used:    1
 13298 ;; Hardware stack levels required when called:    1
 13299 ;; This function calls:
 13300 ;;		i2_FlashUnlockSequence
 13301 ;; This function is called by:
 13302 ;;		i2_WriteFlashValues
 13303 ;; This function uses a non-reentrant model
 13304 ;;
 13305                           
 13306                           	psect	text72
 13307  002BD6                     __ptext72:
 13308                           	opt stack 0
 13309  002BD6                     i2_FlashWriteWord:
 13310                           	opt stack 18
 13311                           
 13312                           ;peripherals.c: 149: unsigned char intStatusUC;
 13313                           ;peripherals.c: 151: intStatusUC = INTCONbits.GIE;
 13314                           
 13315                           ;incstack = 0
 13316  002BD6  0E00               	movlw	0
 13317  002BD8  BEF2               	btfsc	intcon,7,c	;volatile
 13318  002BDA  0E01               	movlw	1
 13319  002BDC  6E05               	movwf	i2FlashWriteWord@intStatusUC,c
 13320                           
 13321                           ;peripherals.c: 152: INTCONbits.GIE = 0;
 13322  002BDE  9EF2               	bcf	intcon,7,c	;volatile
 13323                           
 13324                           ;peripherals.c: 154: TBLPTRU = 0;
 13325  002BE0  0E00               	movlw	0
 13326  002BE2  6EF8               	movwf	tblptru,c	;volatile
 13327                           
 13328                           ;peripherals.c: 155: TBLPTRH = flashAddressUS >> 8;
 13329  002BE4  5002               	movf	i2FlashWriteWord@flashAddressUS+1,w,c
 13330  002BE6  6EF7               	movwf	tblptrh,c	;volatile
 13331                           
 13332                           ;peripherals.c: 156: TBLPTRL = flashAddressUS;
 13333  002BE8  C001  FFF6         	movff	i2FlashWriteWord@flashAddressUS,tblptrl	;volatile
 13334                           
 13335                           ;peripherals.c: 158: TABLAT = lsbUC;
 13336  002BEC  C003  FFF5         	movff	i2FlashWriteWord@lsbUC,tablat	;volatile
 13337  002BF0  000D               	tblwt		*+	;# 
 13338                           
 13339                           ;peripherals.c: 164: TABLAT = msbUC;
 13340  002BF2  C004  FFF5         	movff	i2FlashWriteWord@msbUC,tablat	;volatile
 13341  002BF6  000C               	tblwt		*	;# 
 13342                           
 13343                           ;peripherals.c: 170: EECON1bits.WPROG = 1;
 13344  002BF8  8AA6               	bsf	4006,5,c	;volatile
 13345                           
 13346                           ;peripherals.c: 171: EECON1bits.WREN = 1;
 13347  002BFA  84A6               	bsf	4006,2,c	;volatile
 13348                           
 13349                           ;peripherals.c: 172: FlashUnlockSequence();
 13350  002BFC  ECFB  F017         	call	i2_FlashUnlockSequence	;wreg free
 13351                           
 13352                           ;peripherals.c: 173: EECON1bits.WPROG = 0;
 13353  002C00  9AA6               	bcf	4006,5,c	;volatile
 13354                           
 13355                           ;peripherals.c: 174: EECON1bits.WREN = 0;
 13356  002C02  94A6               	bcf	4006,2,c	;volatile
 13357                           
 13358                           ;peripherals.c: 176: if(intStatusUC)
 13359  002C04  5005               	movf	i2FlashWriteWord@intStatusUC,w,c
 13360  002C06  B4D8               	btfsc	status,2,c
 13361  002C08  0012               	return	
 13362                           
 13363                           ;peripherals.c: 177: INTCONbits.GIE = 1;
 13364  002C0A  8EF2               	bsf	intcon,7,c	;volatile
 13365  002C0C  0012               	return	
 13366  002C0E                     __end_ofi2_FlashWriteWord:
 13367                           	opt stack 0
 13368                           pclatu	equ	0xFFB
 13369                           pclath	equ	0xFFA
 13370                           tblptru	equ	0xFF8
 13371                           tblptrh	equ	0xFF7
 13372                           tblptrl	equ	0xFF6
 13373                           tablat	equ	0xFF5
 13374                           prodh	equ	0xFF4
 13375                           prodl	equ	0xFF3
 13376                           intcon	equ	0xFF2
 13377                           postinc0	equ	0xFEE
 13378                           fsr0h	equ	0xFEA
 13379                           fsr0l	equ	0xFE9
 13380                           wreg	equ	0xFE8
 13381                           indf1	equ	0xFE7
 13382                           postinc1	equ	0xFE6
 13383                           postdec1	equ	0xFE5
 13384                           fsr1h	equ	0xFE2
 13385                           fsr1l	equ	0xFE1
 13386                           indf2	equ	0xFDF
 13387                           postinc2	equ	0xFDE
 13388                           postdec2	equ	0xFDD
 13389                           plusw2	equ	0xFDB
 13390                           fsr2h	equ	0xFDA
 13391                           fsr2l	equ	0xFD9
 13392                           status	equ	0xFD8
 13393                           
 13394 ;; *************** function i2_FlashEraseBlock *****************
 13395 ;; Defined at:
 13396 ;;		line 123 in file "peripherals.c"
 13397 ;; Parameters:    Size  Location     Type
 13398 ;;  flashAddress    2    0[COMRAM] unsigned short 
 13399 ;; Auto vars:     Size  Location     Type
 13400 ;;  FlashEraseBl    1    2[COMRAM] unsigned char 
 13401 ;; Return value:  Size  Location     Type
 13402 ;;                  1    wreg      void 
 13403 ;; Registers used:
 13404 ;;		wreg, status,2, status,0, cstack
 13405 ;; Tracked objects:
 13406 ;;		On entry : 0/0
 13407 ;;		On exit  : 0/0
 13408 ;;		Unchanged: 0/0
 13409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13410 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13411 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13413 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13414 ;;Total ram usage:        3 bytes
 13415 ;; Hardware stack levels used:    1
 13416 ;; Hardware stack levels required when called:    1
 13417 ;; This function calls:
 13418 ;;		i2_FlashUnlockSequence
 13419 ;; This function is called by:
 13420 ;;		i2_WriteFlashValues
 13421 ;; This function uses a non-reentrant model
 13422 ;;
 13423                           
 13424                           	psect	text73
 13425  002D92                     __ptext73:
 13426                           	opt stack 0
 13427  002D92                     i2_FlashEraseBlock:
 13428                           	opt stack 18
 13429                           
 13430                           ;peripherals.c: 124: unsigned char intStatusUC;
 13431                           ;peripherals.c: 126: intStatusUC = INTCONbits.GIE;
 13432                           
 13433                           ;incstack = 0
 13434  002D92  0E00               	movlw	0
 13435  002D94  BEF2               	btfsc	intcon,7,c	;volatile
 13436  002D96  0E01               	movlw	1
 13437  002D98  6E03               	movwf	i2FlashEraseBlock@intStatusUC,c
 13438                           
 13439                           ;peripherals.c: 127: INTCONbits.GIE = 0;
 13440  002D9A  9EF2               	bcf	intcon,7,c	;volatile
 13441                           
 13442                           ;peripherals.c: 129: TBLPTRU = 0;
 13443  002D9C  0E00               	movlw	0
 13444  002D9E  6EF8               	movwf	tblptru,c	;volatile
 13445                           
 13446                           ;peripherals.c: 130: TBLPTRH = (flashAddressUS >> 8) & ~0b11;
 13447  002DA0  5002               	movf	i2FlashEraseBlock@flashAddressUS+1,w,c
 13448  002DA2  0BFC               	andlw	252
 13449  002DA4  6EF7               	movwf	tblptrh,c	;volatile
 13450                           
 13451                           ;peripherals.c: 131: TBLPTRU = 0;
 13452  002DA6  0E00               	movlw	0
 13453  002DA8  6EF8               	movwf	tblptru,c	;volatile
 13454                           
 13455                           ;peripherals.c: 133: EECON1bits.WREN = 1;
 13456  002DAA  84A6               	bsf	4006,2,c	;volatile
 13457                           
 13458                           ;peripherals.c: 134: EECON1bits.FREE = 1;
 13459  002DAC  88A6               	bsf	4006,4,c	;volatile
 13460                           
 13461                           ;peripherals.c: 135: FlashUnlockSequence();
 13462  002DAE  ECFB  F017         	call	i2_FlashUnlockSequence	;wreg free
 13463                           
 13464                           ;peripherals.c: 136: EECON1bits.WREN = 0;
 13465  002DB2  94A6               	bcf	4006,2,c	;volatile
 13466                           
 13467                           ;peripherals.c: 138: if(intStatusUC)
 13468  002DB4  5003               	movf	i2FlashEraseBlock@intStatusUC,w,c
 13469  002DB6  B4D8               	btfsc	status,2,c
 13470  002DB8  0012               	return	
 13471                           
 13472                           ;peripherals.c: 139: INTCONbits.GIE = 1;
 13473  002DBA  8EF2               	bsf	intcon,7,c	;volatile
 13474  002DBC  0012               	return	
 13475  002DBE                     __end_ofi2_FlashEraseBlock:
 13476                           	opt stack 0
 13477                           pclatu	equ	0xFFB
 13478                           pclath	equ	0xFFA
 13479                           tblptru	equ	0xFF8
 13480                           tblptrh	equ	0xFF7
 13481                           tblptrl	equ	0xFF6
 13482                           tablat	equ	0xFF5
 13483                           prodh	equ	0xFF4
 13484                           prodl	equ	0xFF3
 13485                           intcon	equ	0xFF2
 13486                           postinc0	equ	0xFEE
 13487                           fsr0h	equ	0xFEA
 13488                           fsr0l	equ	0xFE9
 13489                           wreg	equ	0xFE8
 13490                           indf1	equ	0xFE7
 13491                           postinc1	equ	0xFE6
 13492                           postdec1	equ	0xFE5
 13493                           fsr1h	equ	0xFE2
 13494                           fsr1l	equ	0xFE1
 13495                           indf2	equ	0xFDF
 13496                           postinc2	equ	0xFDE
 13497                           postdec2	equ	0xFDD
 13498                           plusw2	equ	0xFDB
 13499                           fsr2h	equ	0xFDA
 13500                           fsr2l	equ	0xFD9
 13501                           status	equ	0xFD8
 13502                           
 13503 ;; *************** function i2_FlashUnlockSequence *****************
 13504 ;; Defined at:
 13505 ;;		line 142 in file "peripherals.c"
 13506 ;; Parameters:    Size  Location     Type
 13507 ;;		None
 13508 ;; Auto vars:     Size  Location     Type
 13509 ;;		None
 13510 ;; Return value:  Size  Location     Type
 13511 ;;                  1    wreg      void 
 13512 ;; Registers used:
 13513 ;;		wreg, status,2
 13514 ;; Tracked objects:
 13515 ;;		On entry : 0/0
 13516 ;;		On exit  : 0/0
 13517 ;;		Unchanged: 0/0
 13518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13523 ;;Total ram usage:        0 bytes
 13524 ;; Hardware stack levels used:    1
 13525 ;; This function calls:
 13526 ;;		Nothing
 13527 ;; This function is called by:
 13528 ;;		i2_FlashEraseBlock
 13529 ;;		i2_FlashWriteWord
 13530 ;; This function uses a non-reentrant model
 13531 ;;
 13532                           
 13533                           	psect	text74
 13534  002FF6                     __ptext74:
 13535                           	opt stack 0
 13536  002FF6                     i2_FlashUnlockSequence:
 13537                           	opt stack 18
 13538                           
 13539                           ;peripherals.c: 143: EECON2 = 0x55;
 13540                           
 13541                           ;incstack = 0
 13542  002FF6  0E55               	movlw	85
 13543  002FF8  6EA7               	movwf	4007,c	;volatile
 13544                           
 13545                           ;peripherals.c: 144: EECON2 = 0xAA;
 13546  002FFA  0EAA               	movlw	170
 13547  002FFC  6EA7               	movwf	4007,c	;volatile
 13548                           
 13549                           ;peripherals.c: 145: EECON1bits.WR = 1;
 13550  002FFE  82A6               	bsf	4006,1,c	;volatile
 13551  003000  0012               	return		;funcret
 13552  003002                     __end_ofi2_FlashUnlockSequence:
 13553                           	opt stack 0
 13554                           pclatu	equ	0xFFB
 13555                           pclath	equ	0xFFA
 13556                           tblptru	equ	0xFF8
 13557                           tblptrh	equ	0xFF7
 13558                           tblptrl	equ	0xFF6
 13559                           tablat	equ	0xFF5
 13560                           prodh	equ	0xFF4
 13561                           prodl	equ	0xFF3
 13562                           intcon	equ	0xFF2
 13563                           postinc0	equ	0xFEE
 13564                           fsr0h	equ	0xFEA
 13565                           fsr0l	equ	0xFE9
 13566                           wreg	equ	0xFE8
 13567                           indf1	equ	0xFE7
 13568                           postinc1	equ	0xFE6
 13569                           postdec1	equ	0xFE5
 13570                           fsr1h	equ	0xFE2
 13571                           fsr1l	equ	0xFE1
 13572                           indf2	equ	0xFDF
 13573                           postinc2	equ	0xFDE
 13574                           postdec2	equ	0xFDD
 13575                           plusw2	equ	0xFDB
 13576                           fsr2h	equ	0xFDA
 13577                           fsr2l	equ	0xFD9
 13578                           status	equ	0xFD8
 13579                           
 13580 ;; *************** function _QueryWinSerial *****************
 13581 ;; Defined at:
 13582 ;;		line 751 in file "boostercomms.c"
 13583 ;; Parameters:    Size  Location     Type
 13584 ;;		None
 13585 ;; Auto vars:     Size  Location     Type
 13586 ;;  j               1   27[COMRAM] unsigned char 
 13587 ;;  i               1   28[COMRAM] unsigned char 
 13588 ;;  serialNumber    2   25[COMRAM] unsigned short 
 13589 ;; Return value:  Size  Location     Type
 13590 ;;                  1    wreg      unsigned char 
 13591 ;; Registers used:
 13592 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13593 ;; Tracked objects:
 13594 ;;		On entry : 0/0
 13595 ;;		On exit  : 0/0
 13596 ;;		Unchanged: 0/0
 13597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13598 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13599 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13600 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13601 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13602 ;;Total ram usage:        8 bytes
 13603 ;; Hardware stack levels used:    1
 13604 ;; Hardware stack levels required when called:    2
 13605 ;; This function calls:
 13606 ;;		_BoosterCommandStart
 13607 ;;		_LowestMissingSerial
 13608 ;;		i2_ClearPastValue
 13609 ;;		i2_ResetSingleBoosterState
 13610 ;; This function is called by:
 13611 ;;		_BoosterCommsDispatcher
 13612 ;; This function uses a non-reentrant model
 13613 ;;
 13614                           
 13615                           	psect	text75
 13616  001450                     __ptext75:
 13617                           	opt stack 0
 13618  001450                     _QueryWinSerial:
 13619                           	opt stack 20
 13620                           
 13621                           ;boostercomms.c: 754: unsigned short serialNumberUS;
 13622                           ;boostercomms.c: 757: if(statusGetSerialUCS == 1){
 13623                           
 13624                           ;incstack = 0
 13625  001450  0457               	decf	_statusGetSerialUCS,w,c
 13626  001452  A4D8               	btfss	status,2,c
 13627  001454  D092               	goto	i2l5063
 13628                           
 13629                           ;boostercomms.c: 758: __nop();
 13630  001456  F000               	nop	
 13631                           
 13632                           ;boostercomms.c: 759: if(!(statusFlagsUSLG & 0b000000000000100000000000) ||
 13633                           ;boostercomms.c: 760: (statusFlagsUSLG & 0b000000000100000000000000) ||
 13634                           ;boostercomms.c: 761: (statusFlagsUSLG & 0b000000000010000000000000) ||!(statusFlagsUSLG
      +                           & 0b000000000001000000000000)){
 13635  001458  B637               	btfsc	_statusFlagsUSLG+1,3,c	;volatile
 13636  00145A  BC37               	btfsc	_statusFlagsUSLG+1,6,c	;volatile
 13637  00145C  D004               	goto	i2l4987
 13638  00145E  AA37               	btfss	_statusFlagsUSLG+1,5,c	;volatile
 13639  001460  A837               	btfss	_statusFlagsUSLG+1,4,c	;volatile
 13640  001462  D001               	goto	i2l4987
 13641  001464  D014               	goto	i2l565
 13642  001466                     i2l4987:
 13643                           
 13644                           ;boostercomms.c: 763: if(QueryFailureCounter>10){
 13645  001466  0E0A               	movlw	10
 13646  001468  644B               	cpfsgt	_QueryFailureCounter,c
 13647  00146A  D004               	goto	i2l4995
 13648                           
 13649                           ;boostercomms.c: 764: statusGetSerialUCS = 0;
 13650  00146C  0E00               	movlw	0
 13651  00146E  6E57               	movwf	_statusGetSerialUCS,c
 13652                           
 13653                           ;boostercomms.c: 765: return 1;
 13654  001470  0E01               	movlw	1
 13655  001472  0012               	return	
 13656  001474                     i2l4995:
 13657                           
 13658                           ;boostercomms.c: 766: }
 13659                           ;boostercomms.c: 767: QueryFailureCounter++;
 13660  001474  2A4B               	incf	_QueryFailureCounter,f,c
 13661                           
 13662                           ;boostercomms.c: 768: BoosterCommandStart(0, 0b101, missingSerialWinUCS+1);
 13663  001476  0E00               	movlw	0
 13664  001478  6E08               	movwf	BoosterCommandStart@destSerialUS+1,c
 13665  00147A  0E00               	movlw	0
 13666  00147C  6E07               	movwf	BoosterCommandStart@destSerialUS,c
 13667  00147E  0E05               	movlw	5
 13668  001480  6E09               	movwf	BoosterCommandStart@destCommandUC,c
 13669  001482  2856               	incf	_missingSerialWinUCS,w,c
 13670  001484  6E0A               	movwf	BoosterCommandStart@destPayloadUC,c
 13671  001486  EC07  F012         	call	_BoosterCommandStart	;wreg free
 13672  00148A                     i2l4999:
 13673                           
 13674                           ;boostercomms.c: 769: return 0;
 13675  00148A  0E00               	movlw	0
 13676  00148C  0012               	return	
 13677  00148E                     i2l565:
 13678  00148E  B637               	btfsc	_statusFlagsUSLG+1,3,c	;volatile
 13679  001490  A837               	btfss	_statusFlagsUSLG+1,4,c	;volatile
 13680  001492  D02A               	goto	i2l5025
 13681  001494  BA37               	btfsc	_statusFlagsUSLG+1,5,c	;volatile
 13682  001496  D028               	goto	i2l5025
 13683                           
 13684                           ;boostercomms.c: 771: QueryFailureCounter=0;
 13685  001498  0E00               	movlw	0
 13686  00149A  6E4B               	movwf	_QueryFailureCounter,c
 13687                           
 13688                           ;boostercomms.c: 772: serialNumberUS = (commandResponseUS & ~0b1000000000000000);
 13689  00149C  0EFF               	movlw	255
 13690  00149E  145A               	andwf	_commandResponseUS,w,c
 13691  0014A0  6E1A               	movwf	QueryWinSerial@serialNumberUS,c
 13692  0014A2  0E7F               	movlw	127
 13693  0014A4  145B               	andwf	_commandResponseUS+1,w,c
 13694  0014A6  6E1B               	movwf	QueryWinSerial@serialNumberUS+1,c
 13695                           
 13696                           ;boostercomms.c: 773: boosterCommsDataSerial[missingSerialWinUCS] = serialNumberUS;
 13697  0014A8  5056               	movf	_missingSerialWinUCS,w,c
 13698  0014AA  0D02               	mullw	2
 13699  0014AC  0E84               	movlw	low _boosterCommsDataSerial
 13700  0014AE  24F3               	addwf	prodl,w,c
 13701  0014B0  6ED9               	movwf	fsr2l,c
 13702  0014B2  0E01               	movlw	high _boosterCommsDataSerial
 13703  0014B4  20F4               	addwfc	prodh,w,c
 13704  0014B6  6EDA               	movwf	fsr2h,c
 13705  0014B8  C01A  FFDE         	movff	QueryWinSerial@serialNumberUS,postinc2
 13706  0014BC  C01B  FFDD         	movff	QueryWinSerial@serialNumberUS+1,postdec2
 13707                           
 13708                           ;boostercomms.c: 774: ClearPastValue(missingSerialWinUCS);
 13709  0014C0  5056               	movf	_missingSerialWinUCS,w,c
 13710  0014C2  ECC5  F013         	call	i2_ClearPastValue
 13711                           
 13712                           ;boostercomms.c: 775: if((missingSerialWinUCS = LowestMissingSerial()) < 30){
 13713  0014C6  ECCE  F014         	call	_LowestMissingSerial	;wreg free
 13714  0014CA  6E56               	movwf	_missingSerialWinUCS,c
 13715  0014CC  0E1E               	movlw	30
 13716  0014CE  6056               	cpfslt	_missingSerialWinUCS,c
 13717  0014D0  D00B               	goto	i2l5025
 13718                           
 13719                           ;boostercomms.c: 776: BoosterCommandStart(0, 0b101, missingSerialWinUCS+1);
 13720  0014D2  0E00               	movlw	0
 13721  0014D4  6E08               	movwf	BoosterCommandStart@destSerialUS+1,c
 13722  0014D6  0E00               	movlw	0
 13723  0014D8  6E07               	movwf	BoosterCommandStart@destSerialUS,c
 13724  0014DA  0E05               	movlw	5
 13725  0014DC  6E09               	movwf	BoosterCommandStart@destCommandUC,c
 13726  0014DE  2856               	incf	_missingSerialWinUCS,w,c
 13727  0014E0  6E0A               	movwf	BoosterCommandStart@destPayloadUC,c
 13728  0014E2  EC07  F012         	call	_BoosterCommandStart	;wreg free
 13729  0014E6  D7D1               	goto	i2l4999
 13730  0014E8                     i2l5025:
 13731                           
 13732                           ;boostercomms.c: 778: }
 13733                           ;boostercomms.c: 779: }
 13734                           ;boostercomms.c: 780: for(char i=1;i<29;i++){
 13735  0014E8  0E01               	movlw	1
 13736  0014EA  6E1D               	movwf	QueryWinSerial@i,c
 13737  0014EC                     i2l5027:
 13738  0014EC  0E1C               	movlw	28
 13739  0014EE  641D               	cpfsgt	QueryWinSerial@i,c
 13740  0014F0  D001               	goto	i2l5031
 13741  0014F2  D03F               	goto	i2l5055
 13742  0014F4                     i2l5031:
 13743                           
 13744                           ;boostercomms.c: 781: for(char j=i+1;j<29;j++){
 13745  0014F4  281D               	incf	QueryWinSerial@i,w,c
 13746  0014F6  6E1C               	movwf	QueryWinSerial@j,c
 13747  0014F8  0E1C               	movlw	28
 13748  0014FA  641C               	cpfsgt	QueryWinSerial@j,c
 13749  0014FC  D001               	goto	i2l5035
 13750  0014FE  D037               	goto	i2l5051
 13751  001500                     i2l5035:
 13752                           
 13753                           ;boostercomms.c: 782: if((boosterCommsDataSerial[i]==boosterCommsDataSerial[j])&&!(boost
      +                          erCommsDataSerial[i]==0)){
 13754  001500  501C               	movf	QueryWinSerial@j,w,c
 13755  001502  0D02               	mullw	2
 13756  001504  0E84               	movlw	low _boosterCommsDataSerial
 13757  001506  24F3               	addwf	prodl,w,c
 13758  001508  6ED9               	movwf	fsr2l,c
 13759  00150A  0E01               	movlw	high _boosterCommsDataSerial
 13760  00150C  20F4               	addwfc	prodh,w,c
 13761  00150E  6EDA               	movwf	fsr2h,c
 13762  001510  501D               	movf	QueryWinSerial@i,w,c
 13763  001512  0D02               	mullw	2
 13764  001514  0E84               	movlw	low _boosterCommsDataSerial
 13765  001516  24F3               	addwf	prodl,w,c
 13766  001518  6EE1               	movwf	fsr1l,c
 13767  00151A  0E01               	movlw	high _boosterCommsDataSerial
 13768  00151C  20F4               	addwfc	prodh,w,c
 13769  00151E  6EE2               	movwf	fsr1h,c
 13770  001520  50DE               	movf	postinc2,w,c
 13771  001522  18E6               	xorwf	postinc1,w,c
 13772  001524  E122               	bnz	i2l5047
 13773  001526  50DE               	movf	postinc2,w,c
 13774  001528  18E6               	xorwf	postinc1,w,c
 13775  00152A  A4D8               	btfss	status,2,c
 13776  00152C  D01E               	goto	i2l5047
 13777  00152E  501D               	movf	QueryWinSerial@i,w,c
 13778  001530  0D02               	mullw	2
 13779  001532  0E84               	movlw	low _boosterCommsDataSerial
 13780  001534  24F3               	addwf	prodl,w,c
 13781  001536  6ED9               	movwf	fsr2l,c
 13782  001538  0E01               	movlw	high _boosterCommsDataSerial
 13783  00153A  20F4               	addwfc	prodh,w,c
 13784  00153C  6EDA               	movwf	fsr2h,c
 13785  00153E  50DE               	movf	postinc2,w,c
 13786  001540  10DE               	iorwf	postinc2,w,c
 13787  001542  B4D8               	btfsc	status,2,c
 13788  001544  D012               	goto	i2l5047
 13789                           
 13790                           ;boostercomms.c: 783: ResetSingleBoosterState(i);
 13791  001546  501D               	movf	QueryWinSerial@i,w,c
 13792  001548  EC56  F010         	call	i2_ResetSingleBoosterState
 13793                           
 13794                           ;boostercomms.c: 784: ResetSingleBoosterState(j);
 13795  00154C  501C               	movf	QueryWinSerial@j,w,c
 13796  00154E  EC56  F010         	call	i2_ResetSingleBoosterState
 13797                           
 13798                           ;boostercomms.c: 785: BoosterCommandStart(0, 0b101, i+1);
 13799  001552  0E00               	movlw	0
 13800  001554  6E08               	movwf	BoosterCommandStart@destSerialUS+1,c
 13801  001556  0E00               	movlw	0
 13802  001558  6E07               	movwf	BoosterCommandStart@destSerialUS,c
 13803  00155A  0E05               	movlw	5
 13804  00155C  6E09               	movwf	BoosterCommandStart@destCommandUC,c
 13805  00155E  281D               	incf	QueryWinSerial@i,w,c
 13806  001560  6E0A               	movwf	BoosterCommandStart@destPayloadUC,c
 13807  001562  EC07  F012         	call	_BoosterCommandStart	;wreg free
 13808                           
 13809                           ;boostercomms.c: 786: return 0;
 13810  001566  0E00               	movlw	0
 13811  001568  0012               	return	
 13812  00156A                     i2l5047:
 13813  00156A  2A1C               	incf	QueryWinSerial@j,f,c
 13814  00156C  D7C5               	goto	L8
 13815  00156E                     i2l5051:
 13816  00156E  2A1D               	incf	QueryWinSerial@i,f,c
 13817  001570  D7BD               	goto	i2l5027
 13818  001572                     i2l5055:
 13819                           
 13820                           ;boostercomms.c: 787: }
 13821                           ;boostercomms.c: 788: }
 13822                           ;boostercomms.c: 789: }
 13823                           ;boostercomms.c: 791: statusGetSerialUCS = 0;
 13824  001572  0E00               	movlw	0
 13825  001574  6E57               	movwf	_statusGetSerialUCS,c
 13826                           
 13827                           ;boostercomms.c: 792: return 1;
 13828  001576  0E01               	movlw	1
 13829                           
 13830                           ;boostercomms.c: 793: }else{
 13831  001578  0012               	return	
 13832  00157A                     i2l5063:
 13833                           
 13834                           ;boostercomms.c: 794: statusFlagsUSLG |= 0b000000100000000000000000;
 13835  00157A  8238               	bsf	_statusFlagsUSLG+2,1,c	;volatile
 13836                           
 13837                           ;boostercomms.c: 795: statusGetSerialUCS = 1;
 13838  00157C  0E01               	movlw	1
 13839  00157E  6E57               	movwf	_statusGetSerialUCS,c
 13840                           
 13841                           ;boostercomms.c: 796: if((missingSerialWinUCS = LowestMissingSerial()) < 30){
 13842  001580  ECCE  F014         	call	_LowestMissingSerial	;wreg free
 13843  001584  6E56               	movwf	_missingSerialWinUCS,c
 13844  001586  0E1E               	movlw	30
 13845  001588  6056               	cpfslt	_missingSerialWinUCS,c
 13846  00158A  D00E               	goto	i2l5077
 13847                           
 13848                           ;boostercomms.c: 797: QueryFailureCounter=0;
 13849  00158C  0E00               	movlw	0
 13850  00158E  6E4B               	movwf	_QueryFailureCounter,c
 13851                           
 13852                           ;boostercomms.c: 798: BoosterCommandStart(0, 0b101, missingSerialWinUCS+1);
 13853  001590  0E00               	movlw	0
 13854  001592  6E08               	movwf	BoosterCommandStart@destSerialUS+1,c
 13855  001594  0E00               	movlw	0
 13856  001596  6E07               	movwf	BoosterCommandStart@destSerialUS,c
 13857  001598  0E05               	movlw	5
 13858  00159A  6E09               	movwf	BoosterCommandStart@destCommandUC,c
 13859  00159C  2856               	incf	_missingSerialWinUCS,w,c
 13860  00159E  6E0A               	movwf	BoosterCommandStart@destPayloadUC,c
 13861  0015A0  EC07  F012         	call	_BoosterCommandStart	;wreg free
 13862                           
 13863                           ;boostercomms.c: 799: return 0;
 13864  0015A4  0E00               	movlw	0
 13865  0015A6  0012               	return	
 13866  0015A8                     i2l5077:
 13867                           
 13868                           ;boostercomms.c: 800: }
 13869                           ;boostercomms.c: 801: return 1;
 13870  0015A8  0E01               	movlw	1
 13871  0015AA  0012               	return	
 13872  0015AC                     __end_of_QueryWinSerial:
 13873                           	opt stack 0
 13874                           pclatu	equ	0xFFB
 13875                           pclath	equ	0xFFA
 13876                           tblptru	equ	0xFF8
 13877                           tblptrh	equ	0xFF7
 13878                           tblptrl	equ	0xFF6
 13879                           tablat	equ	0xFF5
 13880                           prodh	equ	0xFF4
 13881                           prodl	equ	0xFF3
 13882                           intcon	equ	0xFF2
 13883                           postinc0	equ	0xFEE
 13884                           fsr0h	equ	0xFEA
 13885                           fsr0l	equ	0xFE9
 13886                           wreg	equ	0xFE8
 13887                           indf1	equ	0xFE7
 13888                           postinc1	equ	0xFE6
 13889                           postdec1	equ	0xFE5
 13890                           fsr1h	equ	0xFE2
 13891                           fsr1l	equ	0xFE1
 13892                           indf2	equ	0xFDF
 13893                           postinc2	equ	0xFDE
 13894                           postdec2	equ	0xFDD
 13895                           plusw2	equ	0xFDB
 13896                           fsr2h	equ	0xFDA
 13897                           fsr2l	equ	0xFD9
 13898                           status	equ	0xFD8
 13899                           
 13900 ;; *************** function i2_ResetSingleBoosterState *****************
 13901 ;; Defined at:
 13902 ;;		line 577 in file "boostercomms.c"
 13903 ;; Parameters:    Size  Location     Type
 13904 ;;  boosterNumbe    1    wreg     unsigned char 
 13905 ;; Auto vars:     Size  Location     Type
 13906 ;;  boosterNumbe    1    0[COMRAM] unsigned char 
 13907 ;; Return value:  Size  Location     Type
 13908 ;;                  1    wreg      void 
 13909 ;; Registers used:
 13910 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13911 ;; Tracked objects:
 13912 ;;		On entry : 0/0
 13913 ;;		On exit  : 0/0
 13914 ;;		Unchanged: 0/0
 13915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 13916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13917 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13919 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 13920 ;;Total ram usage:        1 bytes
 13921 ;; Hardware stack levels used:    1
 13922 ;; This function calls:
 13923 ;;		Nothing
 13924 ;; This function is called by:
 13925 ;;		_ProcessRXFrame
 13926 ;;		_QueryWinSerial
 13927 ;;		i2_ResetBoosterStates
 13928 ;; This function uses a non-reentrant model
 13929 ;;
 13930                           
 13931                           	psect	text76
 13932  0020AC                     __ptext76:
 13933                           	opt stack 0
 13934  0020AC                     i2_ResetSingleBoosterState:
 13935                           	opt stack 21
 13936                           
 13937                           ;incstack = 0
 13938                           ;i2ResetSingleBoosterState@boosterNumberUC stored from wreg
 13939  0020AC  6E01               	movwf	i2ResetSingleBoosterState@boosterNumberUC,c
 13940                           
 13941                           ;boostercomms.c: 578: boosterCommsData[4][boosterNumberUC] = 10;
 13942  0020AE  5001               	movf	i2ResetSingleBoosterState@boosterNumberUC,w,c
 13943  0020B0  0D01               	mullw	1
 13944  0020B2  0E78               	movlw	low (_boosterCommsData+120)
 13945  0020B4  24F3               	addwf	prodl,w,c
 13946  0020B6  6ED9               	movwf	fsr2l,c
 13947  0020B8  0E03               	movlw	high (_boosterCommsData+120)
 13948  0020BA  20F4               	addwfc	prodh,w,c
 13949  0020BC  6EDA               	movwf	fsr2h,c
 13950  0020BE  0E0A               	movlw	10
 13951  0020C0  6EDF               	movwf	indf2,c
 13952                           
 13953                           ;boostercomms.c: 579: boosterCommsData[5][boosterNumberUC] = 0;
 13954  0020C2  5001               	movf	i2ResetSingleBoosterState@boosterNumberUC,w,c
 13955  0020C4  0D01               	mullw	1
 13956  0020C6  0E96               	movlw	low (_boosterCommsData+150)
 13957  0020C8  24F3               	addwf	prodl,w,c
 13958  0020CA  6ED9               	movwf	fsr2l,c
 13959  0020CC  0E03               	movlw	high (_boosterCommsData+150)
 13960  0020CE  20F4               	addwfc	prodh,w,c
 13961  0020D0  6EDA               	movwf	fsr2h,c
 13962  0020D2  0E00               	movlw	0
 13963  0020D4  6EDF               	movwf	indf2,c
 13964                           
 13965                           ;boostercomms.c: 580: boosterCommsData[6][boosterNumberUC] = 0;
 13966  0020D6  5001               	movf	i2ResetSingleBoosterState@boosterNumberUC,w,c
 13967  0020D8  0D01               	mullw	1
 13968  0020DA  0EB4               	movlw	low (_boosterCommsData+180)
 13969  0020DC  24F3               	addwf	prodl,w,c
 13970  0020DE  6ED9               	movwf	fsr2l,c
 13971  0020E0  0E03               	movlw	high (_boosterCommsData+180)
 13972  0020E2  20F4               	addwfc	prodh,w,c
 13973  0020E4  6EDA               	movwf	fsr2h,c
 13974  0020E6  0E00               	movlw	0
 13975  0020E8  6EDF               	movwf	indf2,c
 13976                           
 13977                           ;boostercomms.c: 581: boosterCommsData[7][boosterNumberUC] = 0;
 13978  0020EA  5001               	movf	i2ResetSingleBoosterState@boosterNumberUC,w,c
 13979  0020EC  0D01               	mullw	1
 13980  0020EE  0ED2               	movlw	low (_boosterCommsData+210)
 13981  0020F0  24F3               	addwf	prodl,w,c
 13982  0020F2  6ED9               	movwf	fsr2l,c
 13983  0020F4  0E03               	movlw	high (_boosterCommsData+210)
 13984  0020F6  20F4               	addwfc	prodh,w,c
 13985  0020F8  6EDA               	movwf	fsr2h,c
 13986  0020FA  0E00               	movlw	0
 13987  0020FC  6EDF               	movwf	indf2,c
 13988                           
 13989                           ;boostercomms.c: 582: boosterCommsData[0][boosterNumberUC] = 0;
 13990  0020FE  5001               	movf	i2ResetSingleBoosterState@boosterNumberUC,w,c
 13991  002100  0D01               	mullw	1
 13992  002102  0E00               	movlw	low _boosterCommsData
 13993  002104  24F3               	addwf	prodl,w,c
 13994  002106  6ED9               	movwf	fsr2l,c
 13995  002108  0E03               	movlw	high _boosterCommsData
 13996  00210A  20F4               	addwfc	prodh,w,c
 13997  00210C  6EDA               	movwf	fsr2h,c
 13998  00210E  0E00               	movlw	0
 13999  002110  6EDF               	movwf	indf2,c
 14000                           
 14001                           ;boostercomms.c: 583: boosterCommsData[1][boosterNumberUC] = 0;
 14002  002112  5001               	movf	i2ResetSingleBoosterState@boosterNumberUC,w,c
 14003  002114  0D01               	mullw	1
 14004  002116  0E1E               	movlw	low (_boosterCommsData+30)
 14005  002118  24F3               	addwf	prodl,w,c
 14006  00211A  6ED9               	movwf	fsr2l,c
 14007  00211C  0E03               	movlw	high (_boosterCommsData+30)
 14008  00211E  20F4               	addwfc	prodh,w,c
 14009  002120  6EDA               	movwf	fsr2h,c
 14010  002122  0E00               	movlw	0
 14011  002124  6EDF               	movwf	indf2,c
 14012                           
 14013                           ;boostercomms.c: 584: boosterCommsData[2][boosterNumberUC] = 0;
 14014  002126  5001               	movf	i2ResetSingleBoosterState@boosterNumberUC,w,c
 14015  002128  0D01               	mullw	1
 14016  00212A  0E3C               	movlw	low (_boosterCommsData+60)
 14017  00212C  24F3               	addwf	prodl,w,c
 14018  00212E  6ED9               	movwf	fsr2l,c
 14019  002130  0E03               	movlw	high (_boosterCommsData+60)
 14020  002132  20F4               	addwfc	prodh,w,c
 14021  002134  6EDA               	movwf	fsr2h,c
 14022  002136  0E00               	movlw	0
 14023  002138  6EDF               	movwf	indf2,c
 14024                           
 14025                           ;boostercomms.c: 585: boosterCommsData[3][boosterNumberUC] = 0;
 14026  00213A  5001               	movf	i2ResetSingleBoosterState@boosterNumberUC,w,c
 14027  00213C  0D01               	mullw	1
 14028  00213E  0E5A               	movlw	low (_boosterCommsData+90)
 14029  002140  24F3               	addwf	prodl,w,c
 14030  002142  6ED9               	movwf	fsr2l,c
 14031  002144  0E03               	movlw	high (_boosterCommsData+90)
 14032  002146  20F4               	addwfc	prodh,w,c
 14033  002148  6EDA               	movwf	fsr2h,c
 14034  00214A  0E00               	movlw	0
 14035  00214C  6EDF               	movwf	indf2,c
 14036                           
 14037                           ;boostercomms.c: 586: boosterCommsDataSerial[boosterNumberUC] = 0;
 14038  00214E  5001               	movf	i2ResetSingleBoosterState@boosterNumberUC,w,c
 14039  002150  0D02               	mullw	2
 14040  002152  0E84               	movlw	low _boosterCommsDataSerial
 14041  002154  24F3               	addwf	prodl,w,c
 14042  002156  6ED9               	movwf	fsr2l,c
 14043  002158  0E01               	movlw	high _boosterCommsDataSerial
 14044  00215A  20F4               	addwfc	prodh,w,c
 14045  00215C  6EDA               	movwf	fsr2h,c
 14046  00215E  0E00               	movlw	0
 14047  002160  6EDE               	movwf	postinc2,c
 14048  002162  0E00               	movlw	0
 14049  002164  6EDD               	movwf	postdec2,c
 14050  002166  0012               	return		;funcret
 14051  002168                     __end_ofi2_ResetSingleBoosterState:
 14052                           	opt stack 0
 14053                           pclatu	equ	0xFFB
 14054                           pclath	equ	0xFFA
 14055                           tblptru	equ	0xFF8
 14056                           tblptrh	equ	0xFF7
 14057                           tblptrl	equ	0xFF6
 14058                           tablat	equ	0xFF5
 14059                           prodh	equ	0xFF4
 14060                           prodl	equ	0xFF3
 14061                           intcon	equ	0xFF2
 14062                           postinc0	equ	0xFEE
 14063                           fsr0h	equ	0xFEA
 14064                           fsr0l	equ	0xFE9
 14065                           wreg	equ	0xFE8
 14066                           indf1	equ	0xFE7
 14067                           postinc1	equ	0xFE6
 14068                           postdec1	equ	0xFE5
 14069                           fsr1h	equ	0xFE2
 14070                           fsr1l	equ	0xFE1
 14071                           indf2	equ	0xFDF
 14072                           postinc2	equ	0xFDE
 14073                           postdec2	equ	0xFDD
 14074                           plusw2	equ	0xFDB
 14075                           fsr2h	equ	0xFDA
 14076                           fsr2l	equ	0xFD9
 14077                           status	equ	0xFD8
 14078                           
 14079 ;; *************** function i2_ClearPastValue *****************
 14080 ;; Defined at:
 14081 ;;		line 270 in file "mastercomms.c"
 14082 ;; Parameters:    Size  Location     Type
 14083 ;;  valuePosUC      1    wreg     unsigned char 
 14084 ;; Auto vars:     Size  Location     Type
 14085 ;;  valuePosUC      1    0[COMRAM] unsigned char 
 14086 ;; Return value:  Size  Location     Type
 14087 ;;                  1    wreg      void 
 14088 ;; Registers used:
 14089 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14090 ;; Tracked objects:
 14091 ;;		On entry : 0/0
 14092 ;;		On exit  : 0/0
 14093 ;;		Unchanged: 0/0
 14094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14096 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14098 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14099 ;;Total ram usage:        1 bytes
 14100 ;; Hardware stack levels used:    1
 14101 ;; This function calls:
 14102 ;;		Nothing
 14103 ;; This function is called by:
 14104 ;;		_ProcessRXFrame
 14105 ;;		_QueryWinSerial
 14106 ;;		i2_ClearPastValues
 14107 ;; This function uses a non-reentrant model
 14108 ;;
 14109                           
 14110                           	psect	text77
 14111  00278A                     __ptext77:
 14112                           	opt stack 0
 14113  00278A                     i2_ClearPastValue:
 14114                           	opt stack 21
 14115                           
 14116                           ;incstack = 0
 14117                           ;i2ClearPastValue@valuePosUC stored from wreg
 14118  00278A  6E01               	movwf	i2ClearPastValue@valuePosUC,c
 14119                           
 14120                           ;mastercomms.c: 271: pastBoosterValuesUSAG[0][valuePosUC] = 0;
 14121  00278C  5001               	movf	i2ClearPastValue@valuePosUC,w,c
 14122  00278E  0D02               	mullw	2
 14123  002790  0E00               	movlw	low _pastBoosterValuesUSAG
 14124  002792  24F3               	addwf	prodl,w,c
 14125  002794  6ED9               	movwf	fsr2l,c
 14126  002796  0E05               	movlw	high _pastBoosterValuesUSAG
 14127  002798  20F4               	addwfc	prodh,w,c
 14128  00279A  6EDA               	movwf	fsr2h,c
 14129  00279C  0E00               	movlw	0
 14130  00279E  6EDE               	movwf	postinc2,c
 14131  0027A0  0E00               	movlw	0
 14132  0027A2  6EDD               	movwf	postdec2,c
 14133                           
 14134                           ;mastercomms.c: 272: pastBoosterValuesUSAG[1][valuePosUC] = 0;
 14135  0027A4  5001               	movf	i2ClearPastValue@valuePosUC,w,c
 14136  0027A6  0D02               	mullw	2
 14137  0027A8  0E3E               	movlw	low (_pastBoosterValuesUSAG+62)
 14138  0027AA  24F3               	addwf	prodl,w,c
 14139  0027AC  6ED9               	movwf	fsr2l,c
 14140  0027AE  0E05               	movlw	high (_pastBoosterValuesUSAG+62)
 14141  0027B0  20F4               	addwfc	prodh,w,c
 14142  0027B2  6EDA               	movwf	fsr2h,c
 14143  0027B4  0E00               	movlw	0
 14144  0027B6  6EDE               	movwf	postinc2,c
 14145  0027B8  0E00               	movlw	0
 14146  0027BA  6EDD               	movwf	postdec2,c
 14147                           
 14148                           ;mastercomms.c: 273: pastBoosterValuesUSAG[2][valuePosUC] = 0;
 14149  0027BC  5001               	movf	i2ClearPastValue@valuePosUC,w,c
 14150  0027BE  0D02               	mullw	2
 14151  0027C0  0E7C               	movlw	low (_pastBoosterValuesUSAG+124)
 14152  0027C2  24F3               	addwf	prodl,w,c
 14153  0027C4  6ED9               	movwf	fsr2l,c
 14154  0027C6  0E05               	movlw	high (_pastBoosterValuesUSAG+124)
 14155  0027C8  20F4               	addwfc	prodh,w,c
 14156  0027CA  6EDA               	movwf	fsr2h,c
 14157  0027CC  0E00               	movlw	0
 14158  0027CE  6EDE               	movwf	postinc2,c
 14159  0027D0  0E00               	movlw	0
 14160  0027D2  6EDD               	movwf	postdec2,c
 14161                           
 14162                           ;mastercomms.c: 274: pastBoosterValuesUSAG[3][valuePosUC] = 0;
 14163  0027D4  5001               	movf	i2ClearPastValue@valuePosUC,w,c
 14164  0027D6  0D02               	mullw	2
 14165  0027D8  0EBA               	movlw	low (_pastBoosterValuesUSAG+186)
 14166  0027DA  24F3               	addwf	prodl,w,c
 14167  0027DC  6ED9               	movwf	fsr2l,c
 14168  0027DE  0E05               	movlw	high (_pastBoosterValuesUSAG+186)
 14169  0027E0  20F4               	addwfc	prodh,w,c
 14170  0027E2  6EDA               	movwf	fsr2h,c
 14171  0027E4  0E00               	movlw	0
 14172  0027E6  6EDE               	movwf	postinc2,c
 14173  0027E8  0E00               	movlw	0
 14174  0027EA  6EDD               	movwf	postdec2,c
 14175  0027EC  0012               	return		;funcret
 14176  0027EE                     __end_ofi2_ClearPastValue:
 14177                           	opt stack 0
 14178                           pclatu	equ	0xFFB
 14179                           pclath	equ	0xFFA
 14180                           tblptru	equ	0xFF8
 14181                           tblptrh	equ	0xFF7
 14182                           tblptrl	equ	0xFF6
 14183                           tablat	equ	0xFF5
 14184                           prodh	equ	0xFF4
 14185                           prodl	equ	0xFF3
 14186                           intcon	equ	0xFF2
 14187                           postinc0	equ	0xFEE
 14188                           fsr0h	equ	0xFEA
 14189                           fsr0l	equ	0xFE9
 14190                           wreg	equ	0xFE8
 14191                           indf1	equ	0xFE7
 14192                           postinc1	equ	0xFE6
 14193                           postdec1	equ	0xFE5
 14194                           fsr1h	equ	0xFE2
 14195                           fsr1l	equ	0xFE1
 14196                           indf2	equ	0xFDF
 14197                           postinc2	equ	0xFDE
 14198                           postdec2	equ	0xFDD
 14199                           plusw2	equ	0xFDB
 14200                           fsr2h	equ	0xFDA
 14201                           fsr2l	equ	0xFD9
 14202                           status	equ	0xFD8
 14203                           
 14204 ;; *************** function _LowestMissingSerial *****************
 14205 ;; Defined at:
 14206 ;;		line 741 in file "boostercomms.c"
 14207 ;; Parameters:    Size  Location     Type
 14208 ;;		None
 14209 ;; Auto vars:     Size  Location     Type
 14210 ;;		None
 14211 ;; Return value:  Size  Location     Type
 14212 ;;                  1    wreg      unsigned char 
 14213 ;; Registers used:
 14214 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14215 ;; Tracked objects:
 14216 ;;		On entry : 0/0
 14217 ;;		On exit  : 0/0
 14218 ;;		Unchanged: 0/0
 14219 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14220 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14221 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14222 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14223 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14224 ;;Total ram usage:        2 bytes
 14225 ;; Hardware stack levels used:    1
 14226 ;; This function calls:
 14227 ;;		Nothing
 14228 ;; This function is called by:
 14229 ;;		_QueryWinSerial
 14230 ;;		_BoosterCommsDispatcher
 14231 ;; This function uses a non-reentrant model
 14232 ;;
 14233                           
 14234                           	psect	text78
 14235  00299C                     __ptext78:
 14236                           	opt stack 0
 14237  00299C                     _LowestMissingSerial:
 14238                           	opt stack 21
 14239                           
 14240                           ;boostercomms.c: 744: for(boosterCountUC = 1; boosterCountUC < 30; boosterCountUC++)
 14241                           
 14242                           ;incstack = 0
 14243  00299C  0E01               	movlw	1
 14244  00299E  6E4C               	movwf	_boosterCountUC,c
 14245  0029A0                     i2l4489:
 14246  0029A0  0E1D               	movlw	29
 14247  0029A2  644C               	cpfsgt	_boosterCountUC,c
 14248  0029A4  D001               	goto	i2l4493
 14249  0029A6  D01C               	goto	i2l4505
 14250  0029A8                     i2l4493:
 14251                           
 14252                           ;boostercomms.c: 745: if((boosterCommsData[4][boosterCountUC] != 10) &&
 14253                           ;boostercomms.c: 746: !boosterCommsDataSerial[boosterCountUC])
 14254  0029A8  504C               	movf	_boosterCountUC,w,c
 14255  0029AA  0D01               	mullw	1
 14256  0029AC  0E78               	movlw	low (_boosterCommsData+120)
 14257  0029AE  24F3               	addwf	prodl,w,c
 14258  0029B0  6ED9               	movwf	fsr2l,c
 14259  0029B2  0E03               	movlw	high (_boosterCommsData+120)
 14260  0029B4  20F4               	addwfc	prodh,w,c
 14261  0029B6  6EDA               	movwf	fsr2h,c
 14262  0029B8  0E0A               	movlw	10
 14263  0029BA  18DE               	xorwf	postinc2,w,c
 14264  0029BC  B4D8               	btfsc	status,2,c
 14265  0029BE  D00E               	goto	i2l4501
 14266  0029C0  504C               	movf	_boosterCountUC,w,c
 14267  0029C2  0D02               	mullw	2
 14268  0029C4  0E84               	movlw	low _boosterCommsDataSerial
 14269  0029C6  24F3               	addwf	prodl,w,c
 14270  0029C8  6ED9               	movwf	fsr2l,c
 14271  0029CA  0E01               	movlw	high _boosterCommsDataSerial
 14272  0029CC  20F4               	addwfc	prodh,w,c
 14273  0029CE  6EDA               	movwf	fsr2h,c
 14274  0029D0  50DE               	movf	postinc2,w,c
 14275  0029D2  10DE               	iorwf	postinc2,w,c
 14276  0029D4  A4D8               	btfss	status,2,c
 14277  0029D6  D002               	goto	i2l4501
 14278                           
 14279                           ;boostercomms.c: 747: return boosterCountUC;
 14280  0029D8  504C               	movf	_boosterCountUC,w,c
 14281  0029DA  0012               	return	
 14282  0029DC                     i2l4501:
 14283  0029DC  2A4C               	incf	_boosterCountUC,f,c
 14284  0029DE  D7E0               	goto	i2l4489
 14285  0029E0                     i2l4505:
 14286                           
 14287                           ;boostercomms.c: 748: return boosterCountUC;
 14288  0029E0  504C               	movf	_boosterCountUC,w,c
 14289  0029E2  0012               	return	
 14290  0029E4                     __end_of_LowestMissingSerial:
 14291                           	opt stack 0
 14292                           pclatu	equ	0xFFB
 14293                           pclath	equ	0xFFA
 14294                           tblptru	equ	0xFF8
 14295                           tblptrh	equ	0xFF7
 14296                           tblptrl	equ	0xFF6
 14297                           tablat	equ	0xFF5
 14298                           prodh	equ	0xFF4
 14299                           prodl	equ	0xFF3
 14300                           intcon	equ	0xFF2
 14301                           postinc0	equ	0xFEE
 14302                           fsr0h	equ	0xFEA
 14303                           fsr0l	equ	0xFE9
 14304                           wreg	equ	0xFE8
 14305                           indf1	equ	0xFE7
 14306                           postinc1	equ	0xFE6
 14307                           postdec1	equ	0xFE5
 14308                           fsr1h	equ	0xFE2
 14309                           fsr1l	equ	0xFE1
 14310                           indf2	equ	0xFDF
 14311                           postinc2	equ	0xFDE
 14312                           postdec2	equ	0xFDD
 14313                           plusw2	equ	0xFDB
 14314                           fsr2h	equ	0xFDA
 14315                           fsr2l	equ	0xFD9
 14316                           status	equ	0xFD8
 14317                           
 14318 ;; *************** function _BoosterCommandStart *****************
 14319 ;; Defined at:
 14320 ;;		line 473 in file "boostercomms.c"
 14321 ;; Parameters:    Size  Location     Type
 14322 ;;  destSerialUS    2    6[COMRAM] unsigned short 
 14323 ;;  destCommandU    1    8[COMRAM] unsigned char 
 14324 ;;  destPayloadU    1    9[COMRAM] unsigned char 
 14325 ;; Auto vars:     Size  Location     Type
 14326 ;;		None
 14327 ;; Return value:  Size  Location     Type
 14328 ;;                  1    wreg      void 
 14329 ;; Registers used:
 14330 ;;		wreg, status,2, status,0, cstack
 14331 ;; Tracked objects:
 14332 ;;		On entry : 0/0
 14333 ;;		On exit  : 0/0
 14334 ;;		Unchanged: 0/0
 14335 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14336 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14338 ;;      Temps:         11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14339 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14340 ;;Total ram usage:       15 bytes
 14341 ;; Hardware stack levels used:    1
 14342 ;; Hardware stack levels required when called:    1
 14343 ;; This function calls:
 14344 ;;		_BoosterCommsActive
 14345 ;;		_CheckBoosterRXParity
 14346 ;; This function is called by:
 14347 ;;		_WindowIDBacktrack
 14348 ;;		_AssignWindowID
 14349 ;;		_AssignSerialNumber
 14350 ;;		_SetWindowID
 14351 ;;		_QueryWinSerial
 14352 ;;		_RunBLCalibration
 14353 ;; This function uses a non-reentrant model
 14354 ;;
 14355                           
 14356                           	psect	text79
 14357  00240E                     __ptext79:
 14358                           	opt stack 0
 14359  00240E                     _BoosterCommandStart:
 14360                           	opt stack 19
 14361                           
 14362                           ;boostercomms.c: 474: if(BoosterCommsActive())
 14363                           
 14364                           ;incstack = 0
 14365  00240E  ECE2  F017         	call	_BoosterCommsActive	;wreg free
 14366  002412  0900               	iorlw	0
 14367  002414  A4D8               	btfss	status,2,c
 14368  002416  0012               	return	
 14369                           
 14370                           ;boostercomms.c: 476: statusFlagsUSLG &= ~0b000000000000000000000100;
 14371                           
 14372                           ;boostercomms.c: 475: return;
 14373  002418  9436               	bcf	_statusFlagsUSLG,2,c	;volatile
 14374                           
 14375                           ;boostercomms.c: 477: commsTXBitsUSLG = (((unsigned short long) destSerialUS) << 8) | (d
      +                          estCommandUC << 5) | destPayloadUC;
 14376  00241A  500A               	movf	BoosterCommandStart@destPayloadUC,w,c
 14377  00241C  6E0B               	movwf	??_BoosterCommandStart& (0+255),c
 14378  00241E  6A0C               	clrf	(??_BoosterCommandStart+1)& (0+255),c
 14379  002420  6A0D               	clrf	(??_BoosterCommandStart+2)& (0+255),c
 14380  002422  5009               	movf	BoosterCommandStart@destCommandUC,w,c
 14381  002424  6E0E               	movwf	(??_BoosterCommandStart+3)& (0+255),c
 14382  002426  6A0F               	clrf	(??_BoosterCommandStart+4)& (0+255),c
 14383  002428  0E05               	movlw	5
 14384  00242A                     i2u374_45:
 14385  00242A  90D8               	bcf	status,0,c
 14386  00242C  360E               	rlcf	??_BoosterCommandStart+3,f,c
 14387  00242E  360F               	rlcf	??_BoosterCommandStart+4,f,c
 14388  002430  2EE8               	decfsz	wreg,f,c
 14389  002432  D7FB               	goto	i2u374_45
 14390  002434  C007  F010         	movff	BoosterCommandStart@destSerialUS,??_BoosterCommandStart+5
 14391  002438  C008  F011         	movff	BoosterCommandStart@destSerialUS+1,??_BoosterCommandStart+6
 14392  00243C  6A12               	clrf	(??_BoosterCommandStart+7)& (0+255),c
 14393  00243E  C011  F012         	movff	??_BoosterCommandStart+6,??_BoosterCommandStart+7
 14394  002442  C010  F011         	movff	??_BoosterCommandStart+5,??_BoosterCommandStart+6
 14395  002446  6A10               	clrf	??_BoosterCommandStart+5,c
 14396  002448  500E               	movf	??_BoosterCommandStart+3,w,c
 14397  00244A  1010               	iorwf	??_BoosterCommandStart+5,w,c
 14398  00244C  6E13               	movwf	(??_BoosterCommandStart+8)& (0+255),c
 14399  00244E  500F               	movf	??_BoosterCommandStart+4,w,c
 14400  002450  1011               	iorwf	??_BoosterCommandStart+6,w,c
 14401  002452  6E14               	movwf	(??_BoosterCommandStart+9)& (0+255),c
 14402  002454  0E00               	movlw	0
 14403  002456  BE0F               	btfsc	??_BoosterCommandStart+4,7,c
 14404  002458  0EFF               	movlw	255
 14405  00245A  1012               	iorwf	??_BoosterCommandStart+7,w,c
 14406  00245C  6E15               	movwf	(??_BoosterCommandStart+10)& (0+255),c
 14407  00245E  500B               	movf	??_BoosterCommandStart,w,c
 14408  002460  1013               	iorwf	??_BoosterCommandStart+8,w,c
 14409  002462  0100               	movlb	0	; () banked
 14410  002464  6FCF               	movwf	_commsTXBitsUSLG& (0+255),b
 14411  002466  500C               	movf	??_BoosterCommandStart+1,w,c
 14412  002468  1014               	iorwf	??_BoosterCommandStart+9,w,c
 14413  00246A  0100               	movlb	0	; () banked
 14414  00246C  6FD0               	movwf	(_commsTXBitsUSLG+1)& (0+255),b
 14415  00246E  500D               	movf	??_BoosterCommandStart+2,w,c
 14416  002470  1015               	iorwf	??_BoosterCommandStart+10,w,c
 14417  002472  0100               	movlb	0	; () banked
 14418  002474  6FD1               	movwf	(_commsTXBitsUSLG+2)& (0+255),b
 14419                           
 14420                           ; BSR set to: 0
 14421                           ;boostercomms.c: 478: if(CheckBoosterRXParity(destSerialUS) ^ CheckBoosterRXParity(destC
      +                          ommandUC) ^ CheckBoosterRXParity(destPayloadUC))
 14422  002476  C00A  F001         	movff	BoosterCommandStart@destPayloadUC,CheckBoosterRXParity@recvFrameUS
 14423  00247A  6A02               	clrf	CheckBoosterRXParity@recvFrameUS+1,c
 14424  00247C  EC3C  F016         	call	_CheckBoosterRXParity	;wreg free
 14425  002480  6E0B               	movwf	??_BoosterCommandStart& (0+255),c
 14426  002482  C009  F001         	movff	BoosterCommandStart@destCommandUC,CheckBoosterRXParity@recvFrameUS
 14427  002486  6A02               	clrf	CheckBoosterRXParity@recvFrameUS+1,c
 14428  002488  EC3C  F016         	call	_CheckBoosterRXParity	;wreg free
 14429  00248C  6E0C               	movwf	(??_BoosterCommandStart+1)& (0+255),c
 14430  00248E  C007  F001         	movff	BoosterCommandStart@destSerialUS,CheckBoosterRXParity@recvFrameUS
 14431  002492  C008  F002         	movff	BoosterCommandStart@destSerialUS+1,CheckBoosterRXParity@recvFrameUS+1
 14432  002496  EC3C  F016         	call	_CheckBoosterRXParity	;wreg free
 14433  00249A  180C               	xorwf	??_BoosterCommandStart+1,w,c
 14434  00249C  180B               	xorwf	??_BoosterCommandStart,w,c
 14435  00249E  0900               	iorlw	0
 14436  0024A0  B4D8               	btfsc	status,2,c
 14437  0024A2  D002               	goto	i2l4211
 14438                           
 14439                           ;boostercomms.c: 479: commsTXBitsUSLG |= 0b100000000000000000000000;
 14440  0024A4  0100               	movlb	0	; () banked
 14441  0024A6  8FD1               	bsf	(_commsTXBitsUSLG+2)& (0+255),7,b
 14442  0024A8                     i2l4211:
 14443                           
 14444                           ;boostercomms.c: 480: commsStatusUCG = 1;
 14445  0024A8  0E01               	movlw	1
 14446  0024AA  6E53               	movwf	_commsStatusUCG,c
 14447  0024AC  0012               	return		;funcret
 14448  0024AE                     __end_of_BoosterCommandStart:
 14449                           	opt stack 0
 14450                           pclatu	equ	0xFFB
 14451                           pclath	equ	0xFFA
 14452                           tblptru	equ	0xFF8
 14453                           tblptrh	equ	0xFF7
 14454                           tblptrl	equ	0xFF6
 14455                           tablat	equ	0xFF5
 14456                           prodh	equ	0xFF4
 14457                           prodl	equ	0xFF3
 14458                           intcon	equ	0xFF2
 14459                           postinc0	equ	0xFEE
 14460                           fsr0h	equ	0xFEA
 14461                           fsr0l	equ	0xFE9
 14462                           wreg	equ	0xFE8
 14463                           indf1	equ	0xFE7
 14464                           postinc1	equ	0xFE6
 14465                           postdec1	equ	0xFE5
 14466                           fsr1h	equ	0xFE2
 14467                           fsr1l	equ	0xFE1
 14468                           indf2	equ	0xFDF
 14469                           postinc2	equ	0xFDE
 14470                           postdec2	equ	0xFDD
 14471                           plusw2	equ	0xFDB
 14472                           fsr2h	equ	0xFDA
 14473                           fsr2l	equ	0xFD9
 14474                           status	equ	0xFD8
 14475                           
 14476 ;; *************** function _CheckBoosterRXParity *****************
 14477 ;; Defined at:
 14478 ;;		line 493 in file "boostercomms.c"
 14479 ;; Parameters:    Size  Location     Type
 14480 ;;  recvFrameUS     2    0[COMRAM] unsigned short 
 14481 ;; Auto vars:     Size  Location     Type
 14482 ;;  tmpRecvFrame    2    2[COMRAM] unsigned short 
 14483 ;;  bitCountUC      1    5[COMRAM] unsigned char 
 14484 ;;  bitParityUC     1    4[COMRAM] unsigned char 
 14485 ;; Return value:  Size  Location     Type
 14486 ;;                  1    wreg      unsigned char 
 14487 ;; Registers used:
 14488 ;;		wreg, status,2, status,0
 14489 ;; Tracked objects:
 14490 ;;		On entry : 0/0
 14491 ;;		On exit  : 0/0
 14492 ;;		Unchanged: 0/0
 14493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14494 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14495 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14496 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14497 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14498 ;;Total ram usage:        6 bytes
 14499 ;; Hardware stack levels used:    1
 14500 ;; This function calls:
 14501 ;;		Nothing
 14502 ;; This function is called by:
 14503 ;;		_BoosterCommandStart
 14504 ;;		_ProcessRXFrame
 14505 ;; This function uses a non-reentrant model
 14506 ;;
 14507                           
 14508                           	psect	text80
 14509  002C78                     __ptext80:
 14510                           	opt stack 0
 14511  002C78                     _CheckBoosterRXParity:
 14512                           	opt stack 21
 14513                           
 14514                           ;boostercomms.c: 494: unsigned char bitCountUC;
 14515                           ;boostercomms.c: 495: unsigned char bitParityUC;
 14516                           ;boostercomms.c: 496: unsigned short tmpRecvFrameUS = recvFrameUS;
 14517                           
 14518                           ;incstack = 0
 14519  002C78  C001  F003         	movff	CheckBoosterRXParity@recvFrameUS,CheckBoosterRXParity@tmpRecvFrameUS
 14520  002C7C  C002  F004         	movff	CheckBoosterRXParity@recvFrameUS+1,CheckBoosterRXParity@tmpRecvFrameUS+1
 14521                           
 14522                           ;boostercomms.c: 498: for(bitCountUC = 0, bitParityUC = 0; bitCountUC < 16; bitCountUC++
      +                          ){
 14523  002C80  0E00               	movlw	0
 14524  002C82  6E06               	movwf	CheckBoosterRXParity@bitCountUC,c
 14525  002C84  0E00               	movlw	0
 14526  002C86  6E05               	movwf	CheckBoosterRXParity@bitParityUC,c
 14527  002C88                     i2l3951:
 14528  002C88  0E0F               	movlw	15
 14529  002C8A  6406               	cpfsgt	CheckBoosterRXParity@bitCountUC,c
 14530  002C8C  D001               	goto	i2l444
 14531  002C8E  D007               	goto	i2l445
 14532  002C90                     i2l444:
 14533                           
 14534                           ;boostercomms.c: 499: (tmpRecvFrameUS & 1)?bitParityUC++:1;
 14535  002C90  B003               	btfsc	CheckBoosterRXParity@tmpRecvFrameUS,0,c
 14536  002C92  2A05               	incf	CheckBoosterRXParity@bitParityUC,f,c
 14537                           
 14538                           ;boostercomms.c: 500: tmpRecvFrameUS >>= 1;
 14539  002C94  90D8               	bcf	status,0,c
 14540  002C96  3204               	rrcf	CheckBoosterRXParity@tmpRecvFrameUS+1,f,c
 14541  002C98  3203               	rrcf	CheckBoosterRXParity@tmpRecvFrameUS,f,c
 14542  002C9A  2A06               	incf	CheckBoosterRXParity@bitCountUC,f,c
 14543  002C9C  D7F5               	goto	i2l3951
 14544  002C9E                     i2l445:
 14545                           
 14546                           ;boostercomms.c: 501: }
 14547                           ;boostercomms.c: 503: if(bitParityUC % 2)
 14548  002C9E  A005               	btfss	CheckBoosterRXParity@bitParityUC,0,c
 14549  002CA0  D002               	goto	i2l3967
 14550                           
 14551                           ;boostercomms.c: 504: return 1;
 14552  002CA2  0E01               	movlw	1
 14553  002CA4  0012               	return	
 14554  002CA6                     i2l3967:
 14555                           
 14556                           ;boostercomms.c: 505: else
 14557                           ;boostercomms.c: 506: return 0;
 14558  002CA6  0E00               	movlw	0
 14559  002CA8  0012               	return	
 14560  002CAA                     __end_of_CheckBoosterRXParity:
 14561                           	opt stack 0
 14562                           pclatu	equ	0xFFB
 14563                           pclath	equ	0xFFA
 14564                           tblptru	equ	0xFF8
 14565                           tblptrh	equ	0xFF7
 14566                           tblptrl	equ	0xFF6
 14567                           tablat	equ	0xFF5
 14568                           prodh	equ	0xFF4
 14569                           prodl	equ	0xFF3
 14570                           intcon	equ	0xFF2
 14571                           postinc0	equ	0xFEE
 14572                           fsr0h	equ	0xFEA
 14573                           fsr0l	equ	0xFE9
 14574                           wreg	equ	0xFE8
 14575                           indf1	equ	0xFE7
 14576                           postinc1	equ	0xFE6
 14577                           postdec1	equ	0xFE5
 14578                           fsr1h	equ	0xFE2
 14579                           fsr1l	equ	0xFE1
 14580                           indf2	equ	0xFDF
 14581                           postinc2	equ	0xFDE
 14582                           postdec2	equ	0xFDD
 14583                           plusw2	equ	0xFDB
 14584                           fsr2h	equ	0xFDA
 14585                           fsr2l	equ	0xFD9
 14586                           status	equ	0xFD8
 14587                           
 14588 ;; *************** function _NewBoosterAdded *****************
 14589 ;; Defined at:
 14590 ;;		line 617 in file "boostercomms.c"
 14591 ;; Parameters:    Size  Location     Type
 14592 ;;		None
 14593 ;; Auto vars:     Size  Location     Type
 14594 ;;		None
 14595 ;; Return value:  Size  Location     Type
 14596 ;;                  1    wreg      unsigned char 
 14597 ;; Registers used:
 14598 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 14599 ;; Tracked objects:
 14600 ;;		On entry : 0/0
 14601 ;;		On exit  : 0/0
 14602 ;;		Unchanged: 0/0
 14603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14604 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14605 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14606 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14607 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14608 ;;Total ram usage:        1 bytes
 14609 ;; Hardware stack levels used:    1
 14610 ;; Hardware stack levels required when called:    1
 14611 ;; This function calls:
 14612 ;;		_LowestIdleWindow
 14613 ;; This function is called by:
 14614 ;;		_BoosterCommsDispatcher
 14615 ;; This function uses a non-reentrant model
 14616 ;;
 14617                           
 14618                           	psect	text81
 14619  002ECC                     __ptext81:
 14620                           	opt stack 0
 14621  002ECC                     _NewBoosterAdded:
 14622                           	opt stack 21
 14623                           
 14624                           ;boostercomms.c: 619: if((LowestIdleWindow() < 29) && (boosterCommsData[4][29] != 10))
 14625                           
 14626                           ;incstack = 0
 14627  002ECC  EC6D  F016         	call	_LowestIdleWindow	;wreg free
 14628  002ED0  6E04               	movwf	??_NewBoosterAdded& (0+255),c
 14629  002ED2  0E1D               	movlw	29
 14630  002ED4  6004               	cpfslt	??_NewBoosterAdded,c
 14631  002ED6  D007               	goto	i2l4869
 14632  002ED8  0E0A               	movlw	10
 14633  002EDA  0103               	movlb	3	; () banked
 14634  002EDC  1995               	xorwf	(_boosterCommsData+149)& (0+255),w,b
 14635  002EDE  B4D8               	btfsc	status,2,c
 14636  002EE0  D002               	goto	i2l4869
 14637                           
 14638                           ; BSR set to: 3
 14639                           ;boostercomms.c: 620: return 1;
 14640  002EE2  0E01               	movlw	1
 14641                           
 14642                           ; BSR set to: 3
 14643  002EE4  0012               	return	
 14644  002EE6                     i2l4869:
 14645                           
 14646                           ;boostercomms.c: 621: return 0;
 14647  002EE6  0E00               	movlw	0
 14648  002EE8  0012               	return	
 14649  002EEA                     __end_of_NewBoosterAdded:
 14650                           	opt stack 0
 14651                           pclatu	equ	0xFFB
 14652                           pclath	equ	0xFFA
 14653                           tblptru	equ	0xFF8
 14654                           tblptrh	equ	0xFF7
 14655                           tblptrl	equ	0xFF6
 14656                           tablat	equ	0xFF5
 14657                           prodh	equ	0xFF4
 14658                           prodl	equ	0xFF3
 14659                           intcon	equ	0xFF2
 14660                           postinc0	equ	0xFEE
 14661                           fsr0h	equ	0xFEA
 14662                           fsr0l	equ	0xFE9
 14663                           wreg	equ	0xFE8
 14664                           indf1	equ	0xFE7
 14665                           postinc1	equ	0xFE6
 14666                           postdec1	equ	0xFE5
 14667                           fsr1h	equ	0xFE2
 14668                           fsr1l	equ	0xFE1
 14669                           indf2	equ	0xFDF
 14670                           postinc2	equ	0xFDE
 14671                           postdec2	equ	0xFDD
 14672                           plusw2	equ	0xFDB
 14673                           fsr2h	equ	0xFDA
 14674                           fsr2l	equ	0xFD9
 14675                           status	equ	0xFD8
 14676                           
 14677 ;; *************** function _LowestIdleWindow *****************
 14678 ;; Defined at:
 14679 ;;		line 607 in file "boostercomms.c"
 14680 ;; Parameters:    Size  Location     Type
 14681 ;;		None
 14682 ;; Auto vars:     Size  Location     Type
 14683 ;;  boosterCount    1    2[COMRAM] unsigned char 
 14684 ;; Return value:  Size  Location     Type
 14685 ;;                  1    wreg      unsigned char 
 14686 ;; Registers used:
 14687 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14688 ;; Tracked objects:
 14689 ;;		On entry : 0/0
 14690 ;;		On exit  : 0/0
 14691 ;;		Unchanged: 0/0
 14692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14693 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14694 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14695 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14696 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14697 ;;Total ram usage:        3 bytes
 14698 ;; Hardware stack levels used:    1
 14699 ;; This function calls:
 14700 ;;		Nothing
 14701 ;; This function is called by:
 14702 ;;		_NewBoosterAdded
 14703 ;;		_AssignWindowID
 14704 ;; This function uses a non-reentrant model
 14705 ;;
 14706                           
 14707                           	psect	text82
 14708  002CDA                     __ptext82:
 14709                           	opt stack 0
 14710  002CDA                     _LowestIdleWindow:
 14711                           	opt stack 20
 14712                           
 14713                           ;boostercomms.c: 608: unsigned char boosterCountUC;
 14714                           ;boostercomms.c: 610: for(boosterCountUC = 1; boosterCountUC < 30; boosterCountUC++)
 14715                           
 14716                           ;incstack = 0
 14717  002CDA  0E01               	movlw	1
 14718  002CDC  6E03               	movwf	LowestIdleWindow@boosterCountUC,c
 14719  002CDE                     i2l4219:
 14720  002CDE  0E1D               	movlw	29
 14721  002CE0  6403               	cpfsgt	LowestIdleWindow@boosterCountUC,c
 14722  002CE2  D001               	goto	i2l4223
 14723  002CE4  D010               	goto	i2l4233
 14724  002CE6                     i2l4223:
 14725                           
 14726                           ;boostercomms.c: 611: if(!(boosterCommsDataSerial[boosterCountUC]))
 14727  002CE6  5003               	movf	LowestIdleWindow@boosterCountUC,w,c
 14728  002CE8  0D02               	mullw	2
 14729  002CEA  0E84               	movlw	low _boosterCommsDataSerial
 14730  002CEC  24F3               	addwf	prodl,w,c
 14731  002CEE  6ED9               	movwf	fsr2l,c
 14732  002CF0  0E01               	movlw	high _boosterCommsDataSerial
 14733  002CF2  20F4               	addwfc	prodh,w,c
 14734  002CF4  6EDA               	movwf	fsr2h,c
 14735  002CF6  50DE               	movf	postinc2,w,c
 14736  002CF8  10DE               	iorwf	postinc2,w,c
 14737  002CFA  A4D8               	btfss	status,2,c
 14738  002CFC  D002               	goto	i2l4229
 14739                           
 14740                           ;boostercomms.c: 612: return boosterCountUC;
 14741  002CFE  5003               	movf	LowestIdleWindow@boosterCountUC,w,c
 14742  002D00  0012               	return	
 14743  002D02                     i2l4229:
 14744  002D02  2A03               	incf	LowestIdleWindow@boosterCountUC,f,c
 14745  002D04  D7EC               	goto	i2l4219
 14746  002D06                     i2l4233:
 14747                           
 14748                           ;boostercomms.c: 614: return boosterCountUC;
 14749  002D06  5003               	movf	LowestIdleWindow@boosterCountUC,w,c
 14750  002D08  0012               	return	
 14751  002D0A                     __end_of_LowestIdleWindow:
 14752                           	opt stack 0
 14753                           pclatu	equ	0xFFB
 14754                           pclath	equ	0xFFA
 14755                           tblptru	equ	0xFF8
 14756                           tblptrh	equ	0xFF7
 14757                           tblptrl	equ	0xFF6
 14758                           tablat	equ	0xFF5
 14759                           prodh	equ	0xFF4
 14760                           prodl	equ	0xFF3
 14761                           intcon	equ	0xFF2
 14762                           postinc0	equ	0xFEE
 14763                           fsr0h	equ	0xFEA
 14764                           fsr0l	equ	0xFE9
 14765                           wreg	equ	0xFE8
 14766                           indf1	equ	0xFE7
 14767                           postinc1	equ	0xFE6
 14768                           postdec1	equ	0xFE5
 14769                           fsr1h	equ	0xFE2
 14770                           fsr1l	equ	0xFE1
 14771                           indf2	equ	0xFDF
 14772                           postinc2	equ	0xFDE
 14773                           postdec2	equ	0xFDD
 14774                           plusw2	equ	0xFDB
 14775                           fsr2h	equ	0xFDA
 14776                           fsr2l	equ	0xFD9
 14777                           status	equ	0xFD8
 14778                           
 14779 ;; *************** function _CheckDataCollision *****************
 14780 ;; Defined at:
 14781 ;;		line 596 in file "boostercomms.c"
 14782 ;; Parameters:    Size  Location     Type
 14783 ;;		None
 14784 ;; Auto vars:     Size  Location     Type
 14785 ;;  boosterCount    1    0[COMRAM] unsigned char 
 14786 ;; Return value:  Size  Location     Type
 14787 ;;                  1    wreg      unsigned char 
 14788 ;; Registers used:
 14789 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 14790 ;; Tracked objects:
 14791 ;;		On entry : 0/0
 14792 ;;		On exit  : 0/0
 14793 ;;		Unchanged: 0/0
 14794 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14796 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14797 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14798 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14799 ;;Total ram usage:        1 bytes
 14800 ;; Hardware stack levels used:    1
 14801 ;; This function calls:
 14802 ;;		Nothing
 14803 ;; This function is called by:
 14804 ;;		_BoosterCommsDispatcher
 14805 ;; This function uses a non-reentrant model
 14806 ;;
 14807                           
 14808                           	psect	text83
 14809  002D38                     __ptext83:
 14810                           	opt stack 0
 14811  002D38                     _CheckDataCollision:
 14812                           	opt stack 22
 14813                           
 14814                           ;boostercomms.c: 597: unsigned char boosterCountUC;
 14815                           ;boostercomms.c: 599: for(boosterCountUC = 0; boosterCountUC < 28; boosterCountUC++){
 14816                           
 14817                           ;incstack = 0
 14818  002D38  0E00               	movlw	0
 14819  002D3A  6E01               	movwf	CheckDataCollision@boosterCountUC,c
 14820  002D3C                     i2l4843:
 14821  002D3C  0E1B               	movlw	27
 14822  002D3E  6401               	cpfsgt	CheckDataCollision@boosterCountUC,c
 14823  002D40  D001               	goto	i2l4847
 14824  002D42  D00F               	goto	i2l4857
 14825  002D44                     i2l4847:
 14826                           
 14827                           ;boostercomms.c: 600: if(boosterCommsData[6][boosterCountUC] & 0b00001000)
 14828  002D44  5001               	movf	CheckDataCollision@boosterCountUC,w,c
 14829  002D46  0D01               	mullw	1
 14830  002D48  0EB4               	movlw	low (_boosterCommsData+180)
 14831  002D4A  24F3               	addwf	prodl,w,c
 14832  002D4C  6ED9               	movwf	fsr2l,c
 14833  002D4E  0E03               	movlw	high (_boosterCommsData+180)
 14834  002D50  20F4               	addwfc	prodh,w,c
 14835  002D52  6EDA               	movwf	fsr2h,c
 14836  002D54  0103               	movlb	3	; () banked
 14837  002D56  A6DF               	btfss	indf2,3,c
 14838  002D58  D002               	goto	i2l4853
 14839                           
 14840                           ; BSR set to: 3
 14841                           ;boostercomms.c: 601: return 1;
 14842  002D5A  0E01               	movlw	1
 14843                           
 14844                           ; BSR set to: 3
 14845  002D5C  0012               	return	
 14846  002D5E                     i2l4853:
 14847                           
 14848                           ; BSR set to: 3
 14849  002D5E  2A01               	incf	CheckDataCollision@boosterCountUC,f,c
 14850  002D60  D7ED               	goto	i2l4843
 14851  002D62                     i2l4857:
 14852                           
 14853                           ;boostercomms.c: 602: }
 14854                           ;boostercomms.c: 604: return 0;
 14855  002D62  0E00               	movlw	0
 14856  002D64  0012               	return	
 14857  002D66                     __end_of_CheckDataCollision:
 14858                           	opt stack 0
 14859                           pclatu	equ	0xFFB
 14860                           pclath	equ	0xFFA
 14861                           tblptru	equ	0xFF8
 14862                           tblptrh	equ	0xFF7
 14863                           tblptrl	equ	0xFF6
 14864                           tablat	equ	0xFF5
 14865                           prodh	equ	0xFF4
 14866                           prodl	equ	0xFF3
 14867                           intcon	equ	0xFF2
 14868                           postinc0	equ	0xFEE
 14869                           fsr0h	equ	0xFEA
 14870                           fsr0l	equ	0xFE9
 14871                           wreg	equ	0xFE8
 14872                           indf1	equ	0xFE7
 14873                           postinc1	equ	0xFE6
 14874                           postdec1	equ	0xFE5
 14875                           fsr1h	equ	0xFE2
 14876                           fsr1l	equ	0xFE1
 14877                           indf2	equ	0xFDF
 14878                           postinc2	equ	0xFDE
 14879                           postdec2	equ	0xFDD
 14880                           plusw2	equ	0xFDB
 14881                           fsr2h	equ	0xFDA
 14882                           fsr2l	equ	0xFD9
 14883                           status	equ	0xFD8
 14884                           
 14885 ;; *************** function _BoosterQueryStart *****************
 14886 ;; Defined at:
 14887 ;;		line 464 in file "boostercomms.c"
 14888 ;; Parameters:    Size  Location     Type
 14889 ;;  queryValUC      1    wreg     unsigned char 
 14890 ;; Auto vars:     Size  Location     Type
 14891 ;;  queryValUC      1    0[COMRAM] unsigned char 
 14892 ;; Return value:  Size  Location     Type
 14893 ;;                  1    wreg      void 
 14894 ;; Registers used:
 14895 ;;		wreg, status,2, status,0, cstack
 14896 ;; Tracked objects:
 14897 ;;		On entry : 0/0
 14898 ;;		On exit  : 0/0
 14899 ;;		Unchanged: 0/0
 14900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14901 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14902 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14904 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14905 ;;Total ram usage:        1 bytes
 14906 ;; Hardware stack levels used:    1
 14907 ;; Hardware stack levels required when called:    1
 14908 ;; This function calls:
 14909 ;;		_BoosterCommsActive
 14910 ;; This function is called by:
 14911 ;;		_BoosterCommsDispatcher
 14912 ;; This function uses a non-reentrant model
 14913 ;;
 14914                           
 14915                           	psect	text84
 14916  002E32                     __ptext84:
 14917                           	opt stack 0
 14918  002E32                     _BoosterQueryStart:
 14919                           	opt stack 21
 14920                           
 14921                           ;incstack = 0
 14922                           ;BoosterQueryStart@queryValUC stored from wreg
 14923  002E32  6E01               	movwf	BoosterQueryStart@queryValUC,c
 14924                           
 14925                           ;boostercomms.c: 465: if(BoosterCommsActive())
 14926  002E34  ECE2  F017         	call	_BoosterCommsActive	;wreg free
 14927  002E38  0900               	iorlw	0
 14928  002E3A  A4D8               	btfss	status,2,c
 14929  002E3C  0012               	return	
 14930                           
 14931                           ;boostercomms.c: 467: statusFlagsUSLG |= 0b000000000000000000000100;
 14932                           
 14933                           ;boostercomms.c: 466: return;
 14934  002E3E  8436               	bsf	_statusFlagsUSLG,2,c	;volatile
 14935                           
 14936                           ;boostercomms.c: 468: commsTXBitsUSLG = queryValUC;
 14937  002E40  5001               	movf	BoosterQueryStart@queryValUC,w,c
 14938  002E42  0100               	movlb	0	; () banked
 14939  002E44  6FCF               	movwf	_commsTXBitsUSLG& (0+255),b
 14940  002E46  6BD0               	clrf	(_commsTXBitsUSLG+1)& (0+255),b
 14941  002E48  6BD1               	clrf	(_commsTXBitsUSLG+2)& (0+255),b
 14942                           
 14943                           ; BSR set to: 0
 14944                           ;boostercomms.c: 469: commsDataModeUCG = queryValUC;
 14945  002E4A  C001  F052         	movff	BoosterQueryStart@queryValUC,_commsDataModeUCG
 14946                           
 14947                           ; BSR set to: 0
 14948                           ;boostercomms.c: 470: commsStatusUCG = 1;
 14949  002E4E  0E01               	movlw	1
 14950  002E50  6E53               	movwf	_commsStatusUCG,c
 14951  002E52  0012               	return		;funcret
 14952  002E54                     __end_of_BoosterQueryStart:
 14953                           	opt stack 0
 14954                           pclatu	equ	0xFFB
 14955                           pclath	equ	0xFFA
 14956                           tblptru	equ	0xFF8
 14957                           tblptrh	equ	0xFF7
 14958                           tblptrl	equ	0xFF6
 14959                           tablat	equ	0xFF5
 14960                           prodh	equ	0xFF4
 14961                           prodl	equ	0xFF3
 14962                           intcon	equ	0xFF2
 14963                           postinc0	equ	0xFEE
 14964                           fsr0h	equ	0xFEA
 14965                           fsr0l	equ	0xFE9
 14966                           wreg	equ	0xFE8
 14967                           indf1	equ	0xFE7
 14968                           postinc1	equ	0xFE6
 14969                           postdec1	equ	0xFE5
 14970                           fsr1h	equ	0xFE2
 14971                           fsr1l	equ	0xFE1
 14972                           indf2	equ	0xFDF
 14973                           postinc2	equ	0xFDE
 14974                           postdec2	equ	0xFDD
 14975                           plusw2	equ	0xFDB
 14976                           fsr2h	equ	0xFDA
 14977                           fsr2l	equ	0xFD9
 14978                           status	equ	0xFD8
 14979                           
 14980 ;; *************** function _BoosterCommsActive *****************
 14981 ;; Defined at:
 14982 ;;		line 458 in file "boostercomms.c"
 14983 ;; Parameters:    Size  Location     Type
 14984 ;;		None
 14985 ;; Auto vars:     Size  Location     Type
 14986 ;;		None
 14987 ;; Return value:  Size  Location     Type
 14988 ;;                  1    wreg      unsigned char 
 14989 ;; Registers used:
 14990 ;;		wreg, status,2
 14991 ;; Tracked objects:
 14992 ;;		On entry : 0/0
 14993 ;;		On exit  : 0/0
 14994 ;;		Unchanged: 0/0
 14995 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
 14996 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14997 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14998 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 14999 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
 15000 ;;Total ram usage:        0 bytes
 15001 ;; Hardware stack levels used:    1
 15002 ;; This function calls:
 15003 ;;		Nothing
 15004 ;; This function is called by:
 15005 ;;		_BoosterQueryStart
 15006 ;;		_BoosterCommandStart
 15007 ;;		_BoosterCommsDispatcher
 15008 ;; This function uses a non-reentrant model
 15009 ;;
 15010                           
 15011                           	psect	text85
 15012  002FC4                     __ptext85:
 15013                           	opt stack 0
 15014  002FC4                     _BoosterCommsActive:
 15015                           	opt stack 19
 15016                           
 15017                           ;boostercomms.c: 459: if(commsStatusUCG != 0)
 15018                           
 15019                           ;incstack = 0
 15020  002FC4  5053               	movf	_commsStatusUCG,w,c
 15021  002FC6  B4D8               	btfsc	status,2,c
 15022  002FC8  D002               	goto	i2l3943
 15023                           
 15024                           ;boostercomms.c: 460: return 1;
 15025  002FCA  0E01               	movlw	1
 15026  002FCC  0012               	return	
 15027  002FCE                     i2l3943:
 15028                           
 15029                           ;boostercomms.c: 461: return 0;
 15030  002FCE  0E00               	movlw	0
 15031  002FD0  0012               	return	
 15032  002FD2                     __end_of_BoosterCommsActive:
 15033                           	opt stack 0
 15034  0000                     pclatu	equ	0xFFB
 15035                           pclath	equ	0xFFA
 15036                           tblptru	equ	0xFF8
 15037                           tblptrh	equ	0xFF7
 15038                           tblptrl	equ	0xFF6
 15039                           tablat	equ	0xFF5
 15040                           prodh	equ	0xFF4
 15041                           prodl	equ	0xFF3
 15042                           intcon	equ	0xFF2
 15043                           postinc0	equ	0xFEE
 15044                           fsr0h	equ	0xFEA
 15045                           fsr0l	equ	0xFE9
 15046                           wreg	equ	0xFE8
 15047                           indf1	equ	0xFE7
 15048                           postinc1	equ	0xFE6
 15049                           postdec1	equ	0xFE5
 15050                           fsr1h	equ	0xFE2
 15051                           fsr1l	equ	0xFE1
 15052                           indf2	equ	0xFDF
 15053                           postinc2	equ	0xFDE
 15054                           postdec2	equ	0xFDD
 15055                           plusw2	equ	0xFDB
 15056                           fsr2h	equ	0xFDA
 15057                           fsr2l	equ	0xFD9
 15058                           status	equ	0xFD8
 15059                           pclatu	equ	0xFFB
 15060                           pclath	equ	0xFFA
 15061                           tblptru	equ	0xFF8
 15062                           tblptrh	equ	0xFF7
 15063                           tblptrl	equ	0xFF6
 15064                           tablat	equ	0xFF5
 15065                           prodh	equ	0xFF4
 15066                           prodl	equ	0xFF3
 15067                           intcon	equ	0xFF2
 15068                           postinc0	equ	0xFEE
 15069                           fsr0h	equ	0xFEA
 15070                           fsr0l	equ	0xFE9
 15071                           wreg	equ	0xFE8
 15072                           indf1	equ	0xFE7
 15073                           postinc1	equ	0xFE6
 15074                           postdec1	equ	0xFE5
 15075                           fsr1h	equ	0xFE2
 15076                           fsr1l	equ	0xFE1
 15077                           indf2	equ	0xFDF
 15078                           postinc2	equ	0xFDE
 15079                           postdec2	equ	0xFDD
 15080                           plusw2	equ	0xFDB
 15081                           fsr2h	equ	0xFDA
 15082                           fsr2l	equ	0xFD9
 15083                           status	equ	0xFD8
 15084                           
 15085                           	psect	rparam
 15086  0000                     pclatu	equ	0xFFB
 15087                           pclath	equ	0xFFA
 15088                           tblptru	equ	0xFF8
 15089                           tblptrh	equ	0xFF7
 15090                           tblptrl	equ	0xFF6
 15091                           tablat	equ	0xFF5
 15092                           prodh	equ	0xFF4
 15093                           prodl	equ	0xFF3
 15094                           intcon	equ	0xFF2
 15095                           postinc0	equ	0xFEE
 15096                           fsr0h	equ	0xFEA
 15097                           fsr0l	equ	0xFE9
 15098                           wreg	equ	0xFE8
 15099                           indf1	equ	0xFE7
 15100                           postinc1	equ	0xFE6
 15101                           postdec1	equ	0xFE5
 15102                           fsr1h	equ	0xFE2
 15103                           fsr1l	equ	0xFE1
 15104                           indf2	equ	0xFDF
 15105                           postinc2	equ	0xFDE
 15106                           postdec2	equ	0xFDD
 15107                           plusw2	equ	0xFDB
 15108                           fsr2h	equ	0xFDA
 15109                           fsr2l	equ	0xFD9
 15110                           status	equ	0xFD8
 15111                           
 15112                           	psect	temp
 15113  00005E                     btemp:
 15114                           	opt stack 0
 15115  00005E                     	ds	1
 15116  0000                     int$flags	set	btemp
 15117                           pclatu	equ	0xFFB
 15118                           pclath	equ	0xFFA
 15119                           tblptru	equ	0xFF8
 15120                           tblptrh	equ	0xFF7
 15121                           tblptrl	equ	0xFF6
 15122                           tablat	equ	0xFF5
 15123                           prodh	equ	0xFF4
 15124                           prodl	equ	0xFF3
 15125                           intcon	equ	0xFF2
 15126                           postinc0	equ	0xFEE
 15127                           fsr0h	equ	0xFEA
 15128                           fsr0l	equ	0xFE9
 15129                           wreg	equ	0xFE8
 15130                           indf1	equ	0xFE7
 15131                           postinc1	equ	0xFE6
 15132                           postdec1	equ	0xFE5
 15133                           fsr1h	equ	0xFE2
 15134                           fsr1l	equ	0xFE1
 15135                           indf2	equ	0xFDF
 15136                           postinc2	equ	0xFDE
 15137                           postdec2	equ	0xFDD
 15138                           plusw2	equ	0xFDB
 15139                           fsr2h	equ	0xFDA
 15140                           fsr2l	equ	0xFD9
 15141                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         881
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     53      93
    BANK0           160    111     126
    BANK1           256    132     192
    BANK2           256      0     154
    BANK3           256      0     240
    BANK4           256      0     124
    BANK5           256      0     248
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          176      0       0

Pointer List with Targets:

    CreateAndSend@dataBuf	PTR unsigned char  size(2) Largest target is 62
		 -> ProcessSerialCMD@serialListUSA(BANK0[60]), ReturnBoosterData@partRespUSA(BANK1[62]), ReturnBoosterData@allRespUSA(BANK1[62]), NULL(NULL[0]), 
		 -> iscSerialUSG(BANK0[2]), 

    SetSerialNumber@dataBufUSP	PTR unsigned short  size(2) Largest target is 75
		 -> bufferRXST7540UCAG(BANK2[75]), 

    CRC16@data_p	PTR unsigned char  size(2) Largest target is 79
		 -> bufferRXST7540UCAG(BANK2[75]), bufferTXST7540UCAG(BANK2[79]), 

    WindowIDBacktrack@statusSetIDUC	PTR unsigned char  size(2) Largest target is 1
		 -> SetWindowID@statusSetIDUCS(COMRAM[1]), 

    WindowIDBacktrack@currentBitUC	PTR unsigned char  size(2) Largest target is 1
		 -> SetWindowID@currentBitUCS(COMRAM[1]), 

    WindowIDBacktrack@currentSerialUS	PTR unsigned short  size(2) Largest target is 2
		 -> SetWindowID@currentSerialUSS(COMRAM[2]), 

    CreateMessageST7540@dataBuf	PTR unsigned char  size(2) Largest target is 75
		 -> ProcessSerialCMD@serialListUSA(BANK0[60]), ReturnBoosterData@partRespUSA(BANK1[62]), ReturnBoosterData@allRespUSA(BANK1[62]), NULL(NULL[0]), 
		 -> iscSerialUSG(BANK0[2]), bufferRXST7540UCAG(BANK2[75]), 

    sp__PacketDataST7540	PTR unsigned char  size(2) Largest target is 75
		 -> bufferRXST7540UCAG(BANK2[75]), 

    RetransmitMessageSt7540@dataBuf	PTR unsigned char  size(2) Largest target is 75
		 -> bufferRXST7540UCAG(BANK2[75]), 

    ReadConfigST7540@configDataUS	PTR unsigned um size(2) Largest target is 3
		 -> InitST7540@configDataRXUS(BANK0[3]), 

    ReadConfigST7540@frameDataUS	PTR unsigned um size(2) Largest target is 3
		 -> InitST7540@frameDataRXUS(BANK0[3]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_BoosterCommsDispatcher
    i2_ForceFiringMode->i2_ClearPastValues
    i2_ForceFiringMode->i2_ResetBoosterStates
    _BoosterDataCommandComms->_ProcessRXFrame
    _ReadKeySwitch->_ReadAnalogVoltage
    _ReadEarthLeakage->_ReadAnalogVoltage
    _ProcessRXFrame->_CheckBoosterRXParity
    _CheckLineFault->___wmul
    _BoosterCommsDispatcher->_SetWindowID
    i2_ClearPastValues->i2_ClearPastValue
    _SetWindowID->_WindowIDBacktrack
    i2_ResetBoosterStates->i2_ResetSingleBoosterState
    _WindowIDBacktrack->_BoosterCommandStart
    _AssignWindowID->_BoosterCommandStart
    _AssignSerialNumber->_BoosterCommandStart
    i2_WriteFlashValues->i2_FlashWriteWord
    _QueryWinSerial->_BoosterCommandStart
    _BoosterCommandStart->_CheckBoosterRXParity
    _NewBoosterAdded->_LowestIdleWindow

Critical Paths under _main in BANK0

    _main->_ProcessMasterComms
    _ProcessMasterComms->_ProcessSerialCMD
    _UpdatePacketNumber->_SavePacketNumber
    _SetSerialNumber->_CreateAndSend
    _ReturnBoosterData->_CreateAndSend
    _RetransmitMessageSt7540->_PacketReadParamST7540
    _ProcessSerialCMD->_CreateAndSend
    _ProcessPingCMD->_CreateAndSend
    _CreateAndSend->_PacketReadParamST7540
    _SavePacketNumber->_GetPacketSlot
    _PacketReadParamST7540->_CheckCRCST7540
    _CheckCRCST7540->_CRC16
    _CreateMessageST7540->_CRC16
    _CollisionCheck->_MangleSerial
    _ForceFiringMode->_ClearPastValues
    _ForceFiringMode->_ResetBoosterStates
    _ClearPastValues->_ClearPastValue
    _InitStates->_ReadFlashValues
    _ResetBoosterStates->_ResetSingleBoosterState
    _WriteFlashValues->_FlashWriteWord
    _InitST7540Wrapper->_InitST7540
    _InitST7540->_WriteConfigST7540
    _WriteConfigST7540->_WaitTickCount

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    _ProcessMasterComms->_ReturnBoosterData

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   48738
                  _InitST7540Wrapper
                         _InitStates
                         _InitSystem
                 _ProcessMasterComms
                       _SetCommsHigh
 ---------------------------------------------------------------------------------
 (1) _SetCommsHigh                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ProcessMasterComms                                   9     9      0   46212
                                            104 BANK0      7     7      0
                     _CollisionCheck
                      _CreateAndSend
                    _DataReadyST7540
                    _ForceFiringMode
              _PacketReadParamST7540
                     _ProcessPingCMD
                   _ProcessSerialCMD
               _ReceiveNewDataST7540
            _RetransmitMessageSt7540
                  _ReturnBoosterData
                  _SetIsolationRelay
                    _SetSerialNumber
                 _UpdatePacketNumber
 ---------------------------------------------------------------------------------
 (2) _UpdatePacketNumber                                  11     7      4    1378
                                             11 BANK0     11     7      4
                _GetLastPacketNumber
                   _SavePacketNumber
 ---------------------------------------------------------------------------------
 (3) _GetLastPacketNumber                                  5     3      2     176
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _SetSerialNumber                                      8     6      2    8293
                                             38 BANK0      8     6      2
                      _CreateAndSend
                   _PacketDataST7540
                   _WriteFlashValues
 ---------------------------------------------------------------------------------
 (2) _SetIsolationRelay                                    1     1      0      44
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ReturnBoosterData                                  143   141      2    8696
                                             38 BANK0     11     9      2
                                              0 BANK1    132   132      0
                      _CreateAndSend
 ---------------------------------------------------------------------------------
 (2) _RetransmitMessageSt7540                              9     9      0    2494
                                             28 BANK0      9     9      0
                _CreateMessageST7540
                     _LineIdleST7540
                   _PacketDataST7540
              _PacketReadParamST7540
                _StartTransmitST7540
                 _TransmitBusyST7540
 ---------------------------------------------------------------------------------
 (3) _PacketDataST7540                                     2     0      2       0
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _ReceiveNewDataST7540                                 1     1      0       1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ProcessSerialCMD                                    66    64      2    7805
                                             38 BANK0     66    64      2
                      _CreateAndSend
 ---------------------------------------------------------------------------------
 (2) _ProcessPingCMD                                       2     0      2    7600
                                             38 BANK0      2     0      2
                      _CreateAndSend
 ---------------------------------------------------------------------------------
 (3) _CreateAndSend                                       10     2      8    7514
                                             28 BANK0     10     2      8
                     _CollisionCheck
                _CreateMessageST7540
                     _LineIdleST7540
              _PacketReadParamST7540
                   _SavePacketNumber
                _StartTransmitST7540
                 _TransmitBusyST7540
 ---------------------------------------------------------------------------------
 (4) _TransmitBusyST7540                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _StartTransmitST7540                                  1     1      0       1
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _SavePacketNumber                                     6     3      3     769
                                              5 BANK0      6     3      3
                 _ClearPacketNumbers
                      _GetPacketSlot
                     _IdlePacketSlot
 ---------------------------------------------------------------------------------
 (4) _IdlePacketSlot                                       3     3      0      90
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (4) _GetPacketSlot                                        5     3      2     176
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (4) _PacketReadParamST7540                                7     5      2     761
                                             21 BANK0      7     5      2
                     _CheckCRCST7540
 ---------------------------------------------------------------------------------
 (5) _CheckCRCST7540                                       8     8      0     690
                                             13 BANK0      8     8      0
                              _CRC16
 ---------------------------------------------------------------------------------
 (4) _CreateMessageST7540                                 13     5      8    1594
                                             13 BANK0     13     5      8
                              _CRC16
 ---------------------------------------------------------------------------------
 (6) _CRC16                                               13     9      4     575
                                              0 BANK0     13     9      4
 ---------------------------------------------------------------------------------
 (4) _CollisionCheck                                       2     2      0     713
                                             15 BANK0      2     2      0
                     _LineIdleST7540
                       _MangleSerial
                      _WaitTickCount
 ---------------------------------------------------------------------------------
 (5) _MangleSerial                                        15    13      2     540
                                              0 BANK0     15    13      2
 ---------------------------------------------------------------------------------
 (4) _LineIdleST7540                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ForceFiringMode                                      1     1      0     444
                                              2 BANK0      1     1      0
                    _ClearPastValues
                 _ResetBoosterStates
 ---------------------------------------------------------------------------------
 (3) _ClearPastValues                                      1     1      0     156
                                              1 BANK0      1     1      0
                     _ClearPastValue
 ---------------------------------------------------------------------------------
 (4) _ClearPastValue                                       1     1      0      88
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _DataReadyST7540                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitSystem                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitStates                                           0     0      0    1260
                 _ClearPacketNumbers
                    _ReadFlashValues
                 _ResetBoosterStates
 ---------------------------------------------------------------------------------
 (3) _ResetBoosterStates                                   1     1      0     266
                                              1 BANK0      1     1      0
            _ResetSingleBoosterState
 ---------------------------------------------------------------------------------
 (4) _ResetSingleBoosterState                              1     1      0     198
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _ReadFlashValues                                      3     3      0     904
                                              5 BANK0      3     3      0
                   _FlashReadAddress
                   _WriteFlashValues
 ---------------------------------------------------------------------------------
 (3) _WriteFlashValues                                     0     0      0     604
                    _FlashEraseBlock
                     _FlashWriteWord
 ---------------------------------------------------------------------------------
 (4) _FlashWriteWord                                       5     1      4     495
                                              0 BANK0      5     1      4
                _FlashUnlockSequence
 ---------------------------------------------------------------------------------
 (4) _FlashEraseBlock                                      3     1      2     109
                                              0 BANK0      3     1      2
                _FlashUnlockSequence
 ---------------------------------------------------------------------------------
 (5) _FlashUnlockSequence                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _FlashReadAddress                                     2     0      2     300
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _ClearPacketNumbers                                   1     1      0      90
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _InitST7540Wrapper                                    1     1      0    1266
                                             25 BANK0      1     1      0
                         _InitST7540
 ---------------------------------------------------------------------------------
 (2) _InitST7540                                          12    12      0    1220
                                             13 BANK0     12    12      0
                     _InitST7540Pins
                   _ReadConfigST7540
                  _WriteConfigST7540
 ---------------------------------------------------------------------------------
 (3) _WriteConfigST7540                                   11     5      6     607
                                              2 BANK0     11     5      6
                      _WaitTickCount
 ---------------------------------------------------------------------------------
 (5) _WaitTickCount                                        2     0      2     150
                                              0 BANK0      2     0      2
                        _WaitNewTick
 ---------------------------------------------------------------------------------
 (6) _WaitNewTick                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ReadConfigST7540                                     9     5      4     373
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (3) _InitST7540Pins                                       0     0      0       0
                        _PPSLockFunc
                      _PPSUnlockFunc
 ---------------------------------------------------------------------------------
 (4) _PPSUnlockFunc                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _PPSLockFunc                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _isr                                                 15    15      0   21713
                                             38 COMRAM    15    15      0
             _BoosterCommsDispatcher
            _BoosterDataCommandComms
            _RXReadyISRHandlerST7540
                _SPIISRHandlerST7540
                  i2_ForceFiringMode
 ---------------------------------------------------------------------------------
 (8) i2_ForceFiringMode                                    1     1      0     444
                                              2 COMRAM     1     1      0
                  i2_ClearPastValues
               i2_ResetBoosterStates
 ---------------------------------------------------------------------------------
 (8) _SPIISRHandlerST7540                                  1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (8) _RXReadyISRHandlerST7540                              0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _BoosterDataCommandComms                              4     4      0    2488
                                             17 COMRAM     4     4      0
                     _CheckLineFault
                   _InitEarthLeakage
                     _ProcessRXFrame
                  _ReadAnalogVoltage
                   _ReadEarthLeakage
                      _ReadKeySwitch
                        _SetCommsLow
                     i2_SetCommsHigh
 ---------------------------------------------------------------------------------
 (9) i2_SetCommsHigh                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _SetCommsLow                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _ReadKeySwitch                                        2     2      0      45
                                              3 COMRAM     2     2      0
                  _ReadAnalogVoltage
 ---------------------------------------------------------------------------------
 (9) _ReadEarthLeakage                                     2     2      0      45
                                              3 COMRAM     2     2      0
                  _ReadAnalogVoltage
 ---------------------------------------------------------------------------------
 (9) _ProcessRXFrame                                      11     8      3    1534
                                              6 COMRAM    11     8      3
               _CheckBoosterRXParity
                   i2_ClearPastValue
          i2_ResetSingleBoosterState
 ---------------------------------------------------------------------------------
 (9) _InitEarthLeakage                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _CheckLineFault                                      10    10      0     709
                                              6 COMRAM    10    10      0
                  _ReadAnalogVoltage
                             ___wmul
 ---------------------------------------------------------------------------------
 (10) ___wmul                                              6     2      4     415
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) _ReadAnalogVoltage                                   3     1      2      22
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (8) _BoosterCommsDispatcher                               1     1      0   18757
                                             37 COMRAM     1     1      0
                 _BoosterCommsActive
                  _BoosterQueryStart
                 _CheckDataCollision
                _LowestMissingSerial
                    _NewBoosterAdded
                     _QueryWinSerial
                        _SetWindowID
                  i2_ClearPastValues
 ---------------------------------------------------------------------------------
 (9) i2_ClearPastValues                                    1     1      0     156
                                              1 COMRAM     1     1      0
                   i2_ClearPastValue
 ---------------------------------------------------------------------------------
 (9) _SetWindowID                                          3     3      0   14566
                                             34 COMRAM     3     3      0
                 _AssignSerialNumber
                     _AssignWindowID
                _BoosterCommandStart
                  _WindowIDBacktrack
               i2_ResetBoosterStates
 ---------------------------------------------------------------------------------
 (9) i2_ResetBoosterStates                                 1     1      0     266
                                              1 COMRAM     1     1      0
          i2_ResetSingleBoosterState
 ---------------------------------------------------------------------------------
 (10) _WindowIDBacktrack                                  13     7      6    3970
                                             21 COMRAM    13     7      6
                _BoosterCommandStart
 ---------------------------------------------------------------------------------
 (10) _AssignWindowID                                      3     3      0    3480
                                             21 COMRAM     3     3      0
                _BoosterCommandStart
                   _LowestIdleWindow
 ---------------------------------------------------------------------------------
 (10) _AssignSerialNumber                                  0     0      0    3594
                _BoosterCommandStart
                 i2_WriteFlashValues
 ---------------------------------------------------------------------------------
 (11) i2_WriteFlashValues                                  0     0      0     338
                  i2_FlashEraseBlock
                   i2_FlashWriteWord
 ---------------------------------------------------------------------------------
 (12) i2_FlashWriteWord                                    5     1      4     267
                                              0 COMRAM     5     1      4
              i2_FlashUnlockSequence
 ---------------------------------------------------------------------------------
 (12) i2_FlashEraseBlock                                   3     1      2      71
                                              0 COMRAM     3     1      2
              i2_FlashUnlockSequence
 ---------------------------------------------------------------------------------
 (13) i2_FlashUnlockSequence                               0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _QueryWinSerial                                       8     8      0    3811
                                             21 COMRAM     8     8      0
                _BoosterCommandStart
                _LowestMissingSerial
                   i2_ClearPastValue
          i2_ResetSingleBoosterState
 ---------------------------------------------------------------------------------
 (10) i2_ResetSingleBoosterState                           1     1      0     198
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) i2_ClearPastValue                                    1     1      0      88
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (10) _LowestMissingSerial                                 2     2      0       0
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (11) _BoosterCommandStart                                15    11      4    3256
                                              6 COMRAM    15    11      4
                 _BoosterCommsActive
               _CheckBoosterRXParity
 ---------------------------------------------------------------------------------
 (10) _CheckBoosterRXParity                                6     4      2     436
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (9) _NewBoosterAdded                                      1     1      0     112
                                              3 COMRAM     1     1      0
                   _LowestIdleWindow
 ---------------------------------------------------------------------------------
 (11) _LowestIdleWindow                                    3     3      0     112
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (9) _CheckDataCollision                                   1     1      0      68
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (9) _BoosterQueryStart                                    1     1      0      44
                                              0 COMRAM     1     1      0
                 _BoosterCommsActive
 ---------------------------------------------------------------------------------
 (12) _BoosterCommsActive                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _InitST7540Wrapper
     _InitST7540
       _InitST7540Pins
         _PPSLockFunc
         _PPSUnlockFunc
       _ReadConfigST7540
       _WriteConfigST7540
         _WaitTickCount
           _WaitNewTick
   _InitStates
     _ClearPacketNumbers
     _ReadFlashValues
       _FlashReadAddress
       _WriteFlashValues
         _FlashEraseBlock
           _FlashUnlockSequence
         _FlashWriteWord
           _FlashUnlockSequence
     _ResetBoosterStates
       _ResetSingleBoosterState
   _InitSystem
   _ProcessMasterComms
     _CollisionCheck
       _LineIdleST7540
       _MangleSerial
       _WaitTickCount
         _WaitNewTick
     _CreateAndSend
       _CollisionCheck
         _LineIdleST7540
         _MangleSerial
         _WaitTickCount
           _WaitNewTick
       _CreateMessageST7540
         _CRC16
       _LineIdleST7540
       _PacketReadParamST7540
         _CheckCRCST7540
           _CRC16
       _SavePacketNumber
         _ClearPacketNumbers
         _GetPacketSlot
         _IdlePacketSlot
       _StartTransmitST7540
       _TransmitBusyST7540
     _DataReadyST7540
     _ForceFiringMode
       _ClearPastValues
         _ClearPastValue
       _ResetBoosterStates
         _ResetSingleBoosterState
     _PacketReadParamST7540
       _CheckCRCST7540
         _CRC16
     _ProcessPingCMD
       _CreateAndSend
         _CollisionCheck
           _LineIdleST7540
           _MangleSerial
           _WaitTickCount
             _WaitNewTick
         _CreateMessageST7540
           _CRC16
         _LineIdleST7540
         _PacketReadParamST7540
           _CheckCRCST7540
             _CRC16
         _SavePacketNumber
           _ClearPacketNumbers
           _GetPacketSlot
           _IdlePacketSlot
         _StartTransmitST7540
         _TransmitBusyST7540
     _ProcessSerialCMD
       _CreateAndSend
         _CollisionCheck
           _LineIdleST7540
           _MangleSerial
           _WaitTickCount
             _WaitNewTick
         _CreateMessageST7540
           _CRC16
         _LineIdleST7540
         _PacketReadParamST7540
           _CheckCRCST7540
             _CRC16
         _SavePacketNumber
           _ClearPacketNumbers
           _GetPacketSlot
           _IdlePacketSlot
         _StartTransmitST7540
         _TransmitBusyST7540
     _ReceiveNewDataST7540
     _RetransmitMessageSt7540
       _CreateMessageST7540
         _CRC16
       _LineIdleST7540
       _PacketDataST7540
       _PacketReadParamST7540
         _CheckCRCST7540
           _CRC16
       _StartTransmitST7540
       _TransmitBusyST7540
     _ReturnBoosterData
       _CreateAndSend
         _CollisionCheck
           _LineIdleST7540
           _MangleSerial
           _WaitTickCount
             _WaitNewTick
         _CreateMessageST7540
           _CRC16
         _LineIdleST7540
         _PacketReadParamST7540
           _CheckCRCST7540
             _CRC16
         _SavePacketNumber
           _ClearPacketNumbers
           _GetPacketSlot
           _IdlePacketSlot
         _StartTransmitST7540
         _TransmitBusyST7540
     _SetIsolationRelay
     _SetSerialNumber
       _CreateAndSend
         _CollisionCheck
           _LineIdleST7540
           _MangleSerial
           _WaitTickCount
             _WaitNewTick
         _CreateMessageST7540
           _CRC16
         _LineIdleST7540
         _PacketReadParamST7540
           _CheckCRCST7540
             _CRC16
         _SavePacketNumber
           _ClearPacketNumbers
           _GetPacketSlot
           _IdlePacketSlot
         _StartTransmitST7540
         _TransmitBusyST7540
       _PacketDataST7540
       _WriteFlashValues
         _FlashEraseBlock
           _FlashUnlockSequence
         _FlashWriteWord
           _FlashUnlockSequence
     _UpdatePacketNumber
       _GetLastPacketNumber
       _SavePacketNumber
         _ClearPacketNumbers
         _GetPacketSlot
         _IdlePacketSlot
   _SetCommsHigh

 _isr (ROOT)
   _BoosterCommsDispatcher
     _BoosterCommsActive
     _BoosterQueryStart
       _BoosterCommsActive
     _CheckDataCollision
     _LowestMissingSerial
     _NewBoosterAdded
       _LowestIdleWindow
     _QueryWinSerial
       _BoosterCommandStart
         _BoosterCommsActive
         _CheckBoosterRXParity
       _LowestMissingSerial
       i2_ClearPastValue
       i2_ResetSingleBoosterState
     _SetWindowID
       _AssignSerialNumber
         _BoosterCommandStart
           _BoosterCommsActive
           _CheckBoosterRXParity
         i2_WriteFlashValues
           i2_FlashEraseBlock
             i2_FlashUnlockSequence
           i2_FlashWriteWord
             i2_FlashUnlockSequence
       _AssignWindowID
         _BoosterCommandStart
           _BoosterCommsActive
           _CheckBoosterRXParity
         _LowestIdleWindow
       _BoosterCommandStart
         _BoosterCommsActive
         _CheckBoosterRXParity
       _WindowIDBacktrack
         _BoosterCommandStart
           _BoosterCommsActive
           _CheckBoosterRXParity
       i2_ResetBoosterStates
         i2_ResetSingleBoosterState
     i2_ClearPastValues
       i2_ClearPastValue
   _BoosterDataCommandComms
     _CheckLineFault
       _ReadAnalogVoltage
       ___wmul
     _InitEarthLeakage
     _ProcessRXFrame
       _CheckBoosterRXParity
       i2_ClearPastValue
       i2_ResetSingleBoosterState
     _ReadAnalogVoltage
     _ReadEarthLeakage
       _ReadAnalogVoltage
     _ReadKeySwitch
       _ReadAnalogVoltage
     _SetCommsLow
     i2_SetCommsHigh
   _RXReadyISRHandlerST7540
   _SPIISRHandlerST7540
   i2_ForceFiringMode
     i2_ClearPastValues
       i2_ClearPastValue
     i2_ResetBoosterStates
       i2_ResetSingleBoosterState

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             EAF      0       0      35        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0      F8      16       96.9%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      7C      14       48.4%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0      F0      12       93.8%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0      9A      10       60.2%
BITBANK1           100      0       0       7        0.0%
BANK1              100     84      C0       8       75.0%
BITBANK14           B0      0       0      33        0.0%
BANK14              B0      0       0      34        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     6F      7E       5       78.8%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     35      5D       1       98.9%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     499       6        0.0%
DATA                 0      0     499       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.36 build -262312587 
Symbol Table                                                                                   Fri May 26 10:53:22 2017

                           _statusGetSerialUCS 0057                                ?_InitST7540Pins 0001  
               ProcessMasterComms@destSerialUS 00CA                               ?_FlashEraseBlock 0060  
                                           l81 1D5C                                             l90 234E  
                                           l85 231E                                             l96 15B0  
                                           l88 2334                                             l89 2358  
                              ?i2_SetCommsHigh 0001                            ___wmul@multiplicand 0003  
                                ?_MangleSerial 0060                  WindowIDBacktrack@currentBitUC 0016  
                                 __CFG_CP0$OFF 000000                              ??_ReadFlashValues 0065  
                                          l100 15F2                                            l101 15CE  
                                          l136 2F06                                            l153 1DE2  
                                          l154 1DEC                                            l156 1E0A  
                                          l610 17CA                                            l814 1074  
                                          l840 1A50                                            l912 092C  
                                          l827 2C40                                            l916 097C  
                                          l829 2C3E                                            l849 2B86  
                                          l990 3002                                 _LineIdleST7540 2FD2  
                                          _PR2 000FCB                              ?_ReadConfigST7540 0060  
                                          _isr 0008                              _InitST7540Wrapper 2E0E  
                                          prod 000FF3                                            wreg 000FE8  
                                _PPSUnlockFunc 2F84                                   __CFG_IESO$ON 000000  
                           ??_ReadConfigST7540 0064                   __size_of_LowestMissingSerial 0048  
                   ProcessPingCMD@respSerialUS 0086                             ?_InitST7540Wrapper 0001  
                         CheckLineFault@i_1610 000D                                           l1053 22C8  
                                         l4013 2AF4                                           l4007 1A4A  
                                         l4111 1D8A                                           l4023 2B20  
                                         l4033 29EA                                           l4123 1DF6  
                                         l4107 1D76                                           l4043 2A20  
                                         l4027 2B26                                           l4117 1DB6  
                                         l4047 2A26                                           l4129 1E14  
                                         l5113 23F6                                           l4155 1BB4  
                                         l4251 266C                                           l5211 0AA8  
                                         l5203 098A                                           l5213 0AAC  
                                         l5133 079A                                           l4511 2E5A  
                                         l4159 1BF6                                           l5223 0B40  
                                         l5207 0A78                                           l5151 07DA  
                                         l5135 079E                                           l5143 07AE  
                                         l5119 240A                                           l4425 2E78  
                                         l5217 0AE6                                           l5137 07A2  
                                         l5145 07CA                                           l5233 2DD6  
                                         l4515 2E64                                           l5251 1F64  
                                         l5243 1F4E                                           l5219 0AEE  
                                         l5171 0840                                           l5163 0830  
                                         l5147 07D0                                           l5139 07A6  
                                         l4429 2E82                                           l4525 25CE  
                                         l5261 1FB4                                           l5181 085C  
                                         l5157 0814                                           l6053 2EFC  
                                         l3911 2E96                                           l4535 261A  
                                         l5247 1F5A                                           l4631 2528  
                                         l5191 0926                                           l5175 0848  
                                         l5167 0838                                           l4385 15C4  
                                         l4369 232A                                           l5089 2C2A  
                                         l4537 261E                                           l5257 1FAE  
                                         l5185 0866                                           l5177 0850  
                                         l4545 2856                                           l5283 1B38  
                                         l4555 28A0                                           l3909 2E92  
                                         l4549 2860                                           l3919 2FDA  
                                         l5199 0968                                           l5279 1B06  
                                         l4559 28A6                                           l3883 17C2  
                                         l3875 174C                                           l3973 2958  
                                         l3869 1728                                           l3991 1962  
                                         l3887 17D8                                           l3879 1756  
                                         l5913 2E2C                                           l5905 2E14  
                                         l3977 2962                                           l5921 0F00  
                                         l3987 1958                                           ?_isr 0001  
                                         l5909 2E1E                                           l3999 1A00  
                                         l5961 0FD2                                           l5953 0F86  
                                         l5945 0F68                                           l5971 1058  
                                         l5963 0FE4                                           l5973 1066  
                                         l5957 0FA8                                           l5949 0F76  
                                         l5967 1016                                           l5969 104A  
                                         l5985 1084                                           l5987 10C6  
                              ?_ClearPastValue 0001                                           u4200 1D58  
                                         u3500 198C                                           u3510 198E  
                                         u3520 199C                                           u3360 221A  
                                         u3530 199E                                           u3540 19AC  
                                         u3460 196C                                           u4190 1D38  
                                         u3550 19AE                                           u3470 196E  
                                         u3560 19BC                                           u3480 197C  
                                         u3570 19BE                                           u3490 197E  
                                         u3580 19CC                                           u3590 19CE  
                                         u6421 0FA6                               _SavePacketNumber 2638  
                  ProcessRXFrame@parityCheckUC 0011                                  __CFG_FCMEN$ON 000000  
            CreateMessageST7540@packetSourceUS 006D                                           _main 2EEA  
                          ??_InitST7540Wrapper 0079                     i2ClearPastValue@valuePosUC 0001  
                                         fsr0h 000FEA                                           fsr1h 000FE2  
                                         fsr0l 000FE9                                           fsr2h 000FDA  
                                         indf1 000FE7                                           fsr1l 000FE1  
                                         indf2 000FDF                                           fsr2l 000FD9  
             __size_of_RetransmitMessageSt7540 0098                                           btemp 005E  
                                         pclat 000FFA                                           prodh 000FF4  
                                         prodl 000FF3                                           start 00D0  
                               _boosterCountUC 004C                  __size_ofi2_ResetBoosterStates 0016  
                                 ___param_bank 000010                               ?_SetSerialNumber 0086  
                            ??_NewBoosterAdded 0004                 GetLastPacketNumber@srcSerialUS 0060  
                      __size_of_IdlePacketSlot 003C                                          ??_isr 0027  
                      _BoosterDataCommandComms 00D4                                 ??_MangleSerial 0062  
                            ?_FlashReadAddress 0060                                  __CFG_PLLDIV$2 000000  
                       __end_of_LineIdleST7540 2FDE                              _commandResponseUS 005A  
                           ??_FlashReadAddress 0062                                          ?_main 0001  
                                        _ADRES 000FC3                                          _CRC16 1704  
                                _ReadKeySwitch 2D66                      __end_of_InitST7540Wrapper 2E32  
                  CreateAndSend@packetSourceUS 007C                              _ReturnBoosterData 0752  
          ReadEarthLeakage@earthLeakageValueUS 0004                               ?_ClearPastValues 0001  
                                        i2l111 2718                                          i2l107 26B4  
                                        i2l109 26EA                                          i2l316 0322  
                                        i2l341 046A                                          i2l326 040A  
                                        i2l270 00F2                                          i2l415 18CE  
                                        i2l351 04BE                                          i2l361 04E2  
                                        i2l345 0476                                          i2l337 0462  
                                        i2l355 04DA                                          i2l339 046E  
                                        i2l444 2C90                                          i2l276 0100  
                                        i2l268 0750                                          i2l445 2C9E  
                                        i2l533 112E                                          i2l357 04D2  
                                        i2l269 00DE                                          i2l390 064A  
                                        i2l278 0122                                          i2l455 0EC2  
                                        i2l552 12BA                                          i2l288 0196  
                                        i2l537 11B4                                          i2l565 148E  
                                        i2l469 0D52                                          i2l827 2CD6  
                                        i2l829 2CD4                                          i2l696 0094  
                 __size_of_SPIISRHandlerST7540 0070                                 ?_PPSUnlockFunc 0001  
                 FlashWriteWord@flashAddressUS 0060                   i2FlashEraseBlock@intStatusUC 0003  
                   __size_of_SetIsolationRelay 002A                             ?_ReturnBoosterData 0086  
      BoosterDataCommandComms@commsBitsSentUCS 0046                   ReadConfigST7540@configDataUS 0062  
                        __end_of_GetPacketSlot 2A2A                      __size_ofi2_FlashWriteWord 0038  
                  __size_ofi2_WriteFlashValues 0038                               ??_AssignWindowID 0016  
                          ??_ReturnBoosterData 0088                           _CheckBoosterRXParity 2C78  
                                        tablat 000FF5                          __end_of_WaitTickCount 2EAE  
                                        plusw2 000FDB                                     _InitST7540 1C6A  
                                        status 000FD8                           CreateAndSend@dataBuf 0082  
                          _QueryFailureCounter 004B                     __size_of_BoosterQueryStart 0022  
                      __CFG_DSWDTOSC$INTOSCREF 000000                                __initialization 27EE  
                           _ResetBoosterStates 2E72                            _CreateMessageST7540 1B66  
                   __end_of_ClearPacketNumbers 299C                                  ??_SetCommsLow 0001  
                     ?_ResetSingleBoosterState 0001                                   __end_of_main 2F02  
                                   _InitStates 2FB6                                     _InitSystem 2546  
                  __end_of_StartTransmitST7540 2F1A                      __end_of_ReturnBoosterData 0B4E  
                                       CRC16@i 006A                     ReturnBoosterData@dataValUC 0182  
                              ?_LineIdleST7540 0001                            ?_ResetBoosterStates 0001  
                               ?_ReadKeySwitch 0001                  GetLastPacketNumber@iscCountUC 0064  
                                       ??_main 00CF                                         ?_CRC16 0060  
                                __activetblptr 000002              CheckLineFault@activeWindowCounter 0009  
              PacketReadParamST7540@retValueUS 007A             BoosterDataCommandComms@bitsReadUCS 0043  
     BoosterDataCommandComms@cableFaultModeUCS 0044                           ?_CreateMessageST7540 006D  
      ProcessMasterComms@currentPacketNumberUS 00C8                     FlashEraseBlock@intStatusUC 0062  
                             _InitEarthLeakage 2F1A                                  ??_SetWindowID 0023  
             WindowIDBacktrack@currentSerialUS 0018                          _masterCommsTimeoutUSG 00D8  
                                       _EECON2 000FA7                          ?_CheckBoosterRXParity 0001  
                             ??_QueryWinSerial 0016                      __size_of_WriteFlashValues 0042  
                                       i2l1010 2A9E                                         i2l1013 2AA0  
                                    CRC16@data 0068                                         i2l4211 24A8  
                               __CFG_WDTEN$OFF 000000                                         i2l4223 2CE6  
                                       i2l5031 14F4                                         i2l4233 2D06  
                                       i2l5025 14E8                                         i2l4219 2CDE  
                                       i2l5051 156E                                         i2l5035 1500  
                                       i2l5027 14EC                                         i2l6003 2CC0  
                                       i2l4229 2D02                                         i2l4501 29DC  
                                       i2l4413 2A70                                         i2l4421 2A8A  
                                       i2l5047 156A                                         i2l5055 1572  
                                       i2l5063 157A                                         i2l4415 2A78  
                                       i2l6031 007C                                         i2l4505 29E0  
                                       i2l4441 1346                                         i2l4417 2A80  
                                       i2l5321 26D2                                         i2l6025 0072  
                                       i2l5411 01CA                                         i2l5077 15A8  
                                       i2l4445 1396                                         i2l4437 12EA  
                                       i2l5421 01EE                                         i2l4711 0E56  
                                       i2l5511 03C6                                         i2l5431 0226  
                                       i2l5407 01B0                                         i2l4457 13F6  
                                       i2l4713 0E7E                                         i2l4705 0D7A  
                                       i2l5601 04F2                                         i2l5417 01E2  
                                       i2l5409 01BA                                         i2l5291 2F36  
                                       i2l4707 0E06                                         i2l5531 0416  
                                       i2l5507 03BE                                         i2l5435 0238  
                                       i2l5371 013C                                         i2l4493 29A8  
                                       i2l4581 2F54                                         i2l4901 1196  
                                       i2l4805 1942                                         i2l4709 0E2E  
                                       i2l4717 0EA6                                         i2l5621 053A  
                                       i2l5445 0286                                         i2l5525 03E2  
                                       i2l5373 0142                                         i2l5357 010E  
                                       i2l3943 2FCE                                         i2l3951 2C88  
                                       i2l5295 2F3E                                         i2l4807 1946  
                                       i2l5711 068C                                         i2l5631 0564  
                                       i2l5623 0540                                         i2l5607 0510  
                                       i2l5543 0430                                         i2l5455 02A0  
                                       i2l5383 0168                                         i2l4489 29A0  
                                       i2l4577 2F4C                                         i2l5801 2078  
                                       i2l4673 0C0E                                         i2l4665 0BAA  
                                       i2l5705 067C                                         i2l5641 0596  
                                       i2l5625 054E                                         i2l5545 043A  
                                       i2l5481 0330                                         i2l5473 030A  
                                       i2l5457 02C0                                         i2l4843 2D3C  
                                       i2l5811 2090                                         i2l4659 0B5A  
                                       i2l4827 2D8E                                         i2l5547 0444  
                                       i2l5491 037E                                         i2l5379 0158  
                                       i2l4853 2D5E                                         i2l4917 11D2  
                                       i2l4909 11C0                                         i2l5805 2084  
                                       i2l4781 18A6                                         i2l4773 1880  
                                       i2l4765 1856                                         i2l4693 0CCA  
                                       i2l4677 0C38                                         i2l4669 0BE4  
                                       i2l4757 294E                                         i2l4749 292A  
                                       i2l5733 06DA                                         i2l5717 06AA  
                                       i2l5653 05BA                                         i2l5645 05A0  
                                       i2l5637 0582                                         i2l5565 047A  
                                       i2l5477 0314                                         i2l5469 0302  
                                       i2l4847 2D44                                         i2l3967 2CA6  
                                       i2l4935 1256                                         i2l4919 11E8  
                                       i2l4791 18D4                                         i2l4775 1888  
                                       i2l5727 06CA                                         i2l5671 0612  
                                       i2l5663 05D8                                         i2l4857 2D62  
                                       i2l4953 12A8                                         i2l4785 18B6  
                                       i2l4769 1866                                         i2l5745 06FA  
                                       i2l5577 04A0                                         i2l5497 0390  
                                       i2l4939 1274                                         i2l4883 1116  
                                       i2l5763 2014                                         i2l4779 1896  
                                       i2l4699 0D06                                         i2l5667 05DE  
                                       i2l5595 04DE                                         i2l5499 0396  
                                       i2l4869 2EE6                                         i2l4973 12E4  
                                       i2l5781 2046                                         i2l5773 202C  
                                       i2l4797 1904                                         i2l5669 060C  
                                       i2l5597 04E4                                         i2l5749 0710  
                                       _TABLAT 000FF5                                         i2l4967 12C6  
                                       i2l4895 1192                                         i2l5695 065C  
                                       i2l5679 062C                                         i2l4969 12CC  
                                       i2l5793 2060                                         i2l5777 2032  
                                       i2l5697 0662                                         i2l4995 1474  
                                       i2l4987 1466                                         i2l5797 206C  
                                       i2l5789 205A                                         i2l4999 148A  
                         ??_ResetBoosterStates 0061                            FlashWriteWord@lsbUC 0062  
                          FlashWriteWord@msbUC 0063                  __size_of_ReceiveNewDataST7540 0012  
                                       _RPOR21 000ED5                                 __CFG_WPCFG$OFF 000000  
                                ??_WaitNewTick 0060                            _BoosterCommandStart 240E  
                     ?_RXReadyISRHandlerST7540 0001                                 __CFG_WPDIS$OFF 000000  
                            MangleSerial@b10UC 006C                              MangleSerial@b12UC 006D  
                        _commsOffsetADCValueUS 003D                  ProcessSerialCMD@serialListUSA 008A  
                               __CFG_XINST$OFF 000000                      ??_BoosterDataCommandComms 0012  
                        __end_of_CreateAndSend 2638                   __size_of_FlashUnlockSequence 000C  
                                       ___wmul 2DE8                                 __CFG_STVREN$ON 000000  
                   __end_of_TransmitBusyST7540 3016                       __end_of_PacketDataST7540 2FB6  
                                ?_SetCommsHigh 0001             __size_ofi2_ResetSingleBoosterState 00BC  
                                       clear_0 27F4                                         clear_1 2800  
                                       clear_2 280C                                         clear_3 2818  
                                       clear_4 2824                                         clear_5 2830  
                                       clear_6 283C                                __CFG_CLKOEC$OFF 000000  
                      ??_PacketReadParamST7540 0077                                ??_PPSUnlockFunc 0060  
                   __size_of_InitST7540Wrapper 0024                           ?_BoosterCommandStart 0007  
                          __end_of_SetCommsLow 3028                                _DataReadyST7540 3016  
                     __end_of_ProcessSerialCMD 1FE8                          ??_CreateMessageST7540 0075  
                             _boosterCommsData 0300                                         tblptrh 000FF7  
                                       tblptrl 000FF6                                         tblptru 000FF8  
                        i2_FlashUnlockSequence 2FF6                      __size_of_ReadEarthLeakage 004C  
                    __size_of_LowestIdleWindow 0030                                __CFG_DSBOREN$ON 000000  
          BoosterDataCommandComms@recvFrameUSS 00D2                                   ?_PPSLockFunc 0001  
                         __end_of_MangleSerial 1A5C                        _RetransmitMessageSt7540 24AE  
                                  ?_InitST7540 0001                                     __accesstop 0060  
                      __end_of__initialization 2842                             _UpdatePacketNumber 236E  
                 __size_of_GetLastPacketNumber 0062                               ??_InitST7540Pins 0060  
                          __end_of_SetWindowID 12E8                        __size_of_CheckCRCST7540 00B6  
                                __end_of_CRC16 1838                __end_of_ResetSingleBoosterState 1F1E  
                                ___rparam_used 000001                              ?i2_ClearPastValue 0001  
                              _ReadFlashValues 221E                           __CFG_WPEND$PAGE_WPFP 000000  
                        _pastBoosterValuesUSAG 0500                               ??i2_SetCommsHigh 0001  
                          _LowestMissingSerial 299C                             ??i2_ClearPastValue 0001  
                          ?_UpdatePacketNumber 006B                                 __pcstackCOMRAM 0001  
                      __size_of_FlashWriteWord 0040                                    ?_InitStates 0001  
                  __size_of_ProcessMasterComms 0208                                 _IdlePacketSlot 2AEE  
                               ??_SetCommsHigh 0060                            __end_of_WaitNewTick 300A  
                                  ?_InitSystem 0001                    ReadConfigST7540@frameDataUS 0060  
                              ??_ReadKeySwitch 0004                                __CFG_DSWDTEN$ON 000000  
                   __size_of_ReturnBoosterData 03FC                                QueryWinSerial@i 001D  
                              QueryWinSerial@j 001C                       __end_of_SavePacketNumber 26AC  
                              __CFG_DSWDTPS$G2 000000                        IdlePacketSlot@iscCountC 0062  
                      __size_of_ProcessRXFrame 03A8                          ??_BoosterCommandStart 000B  
                   __end_of_AssignSerialNumber 2ECC                                        ??_CRC16 0064  
                      __size_of_ProcessPingCMD 002E                               ??_ClearPastValue 0060  
                    ReadAnalogVoltage@channelC 0003                           ?_LowestMissingSerial 0001  
                         ??_UpdatePacketNumber 006F                     __end_of_BoosterCommsActive 2FD2  
                SPIISRHandlerST7540@dataReadUC 0001                         ??_CheckBoosterRXParity 0003  
                             i2_FlashWriteWord 2BD6                __end_of_RXReadyISRHandlerST7540 2FF6  
                                   __pbssBANK0 00CF                                     __pbssBANK1 0184  
                                   __pbssBANK2 0200                                     __pbssBANK3 0300  
                                   __pbssBANK4 0400                                     __pbssBANK5 0500  
                              _NewBoosterAdded 2ECC                       SetWindowID@currentBitUCS 005C  
                    __size_of_ReadConfigST7540 0158                       ClearPastValue@valuePosUC 0060  
                     ??_BoosterCommsDispatcher 0026                            _SPIISRHandlerST7540 26AC  
                       __end_of_IdlePacketSlot 2B2A                   StartTransmitST7540@discardUC 0060  
                            __CFG_PLLSEL$PLL96 000000                       __size_of_ForceFiringMode 0036  
                  __size_of_CheckDataCollision 002E                  SetIsolationRelay@relayStateUC 0060  
                                      ?___wmul 0001                                    _SetCommsLow 3022  
                      __end_of_DataReadyST7540 301C                                   isr@discardUC 0035  
           BoosterDataCommandComms@lvlCountUCS 0048                   i2ForceFiringMode@forceModeUC 0003  
              CreateMessageST7540@packetDestUS 006F                      FlashWriteWord@intStatusUC 0064  
                          __size_of_InitST7540 00FC                       WaitTickCount@tickCountUS 0060  
                         ?_SPIISRHandlerST7540 0001                             __CFG_OSC$INTOSCPLL 000000  
                 __end_ofi2_ResetBoosterStates 2F5E                          ??_LowestMissingSerial 0001  
                     __size_of_FlashEraseBlock 0034                              _WindowIDBacktrack 12E8  
                       ?i2_FlashUnlockSequence 0001                                        _TBLPTRH 000FF7  
                                      _TBLPTRL 000FF6                                        _TBLPTRU 000FF8  
                                      _RPINR21 000EFC                                        _RPINR22 000EFD  
                                      _SSP2BUF 000F75                             ?_WindowIDBacktrack 0016  
                    ??_RetransmitMessageSt7540 007C                i2FlashEraseBlock@flashAddressUS 0001  
                FlashEraseBlock@flashAddressUS 0060                                    _SetWindowID 10FE  
                    __size_of_FlashReadAddress 0014                 CreateMessageST7540@packetCRCUS 0077  
                          __size_of_InitStates 000E                i2ClearPastValues@boosterCountUC 0002  
                ClearPastValues@boosterCountUC 0061                               _WriteFlashValues 2A2A  
                          __size_of_InitSystem 007E                        __end_of_ReadFlashValues 22CA  
                          ??_WindowIDBacktrack 001C                 i2FlashWriteWord@flashAddressUS 0001  
                                  _WaitNewTick 3002                                        __Hparam 0000  
                                      __Lparam 0000                                ?_IdlePacketSlot 0001  
                             ??_LineIdleST7540 0060                       __end_of_InitEarthLeakage 2F32  
                            i2_ForceFiringMode 2CAA                        __size_of_CheckLineFault 0118  
                              __size_of___wmul 0026                             ?i2_ForceFiringMode 0001  
                        __CFG_RTCOSC$INTOSCREF 000000                                        __pcinit 27EE  
                    SetSerialNumber@dataBufUSP 008C                                        __ramtop 0F00  
                                      __ptext0 2EEA                                        __ptext1 300A  
                                      __ptext2 0EF6                                        __ptext3 236E  
                                      __ptext4 2850                                        __ptext5 1A5C  
                                      __ptext6 2DBE                                        __ptext7 0752  
                                      __ptext8 24AE                                        __ptext9 2FA8  
                        ??_SPIISRHandlerST7540 0001                      __end_of_WindowIDBacktrack 1450  
                            _MangleSerial$2745 0064                     ForceFiringMode@forceModeUC 0062  
                      __size_of_CollisionCheck 0038                       __size_of_SetSerialNumber 010A  
                                    _T2CONbits 000FCA                                   __size_of_isr 00C8  
                           _ClearPacketNumbers 2952                            ??i2_ForceFiringMode 0003  
             __size_of_ResetSingleBoosterState 00D0                              i2_FlashEraseBlock 2D92  
                      __end_of_NewBoosterAdded 2EEA                          __size_of_MangleSerial 010C  
                   __end_ofi2_WriteFlashValues 2BD6                      AssignWindowID@newWindowUC 0018  
                  CheckCRCST7540@expectedCRCUS 0070                            _FlashUnlockSequence 2FDE  
                             _ReadEarthLeakage 2906                               _LowestIdleWindow 2CDA  
                           _commandBLCalibFlag 00D4                             ?i2_FlashEraseBlock 0001  
                     __size_of_ClearPastValues 001E                           end_of_initialization 2842  
                         __end_of_SetCommsHigh 3010                            ?_ClearPacketNumbers 0001  
                ReadKeySwitch@keySwitchValueUS 0004                                  __Lmediumconst 0000  
                     ProcessRXFrame@frameNumUC 0009                                 _CheckCRCST7540 2168  
                         __size_of_PPSLockFunc 0012                            ??i2_FlashEraseBlock 0003  
              __size_of_BoosterCommsDispatcher 00C4                      __end_ofi2_ForceFiringMode 2CDA  
               ProcessMasterComms@respSerialUS 00CC                                 _FlashWriteWord 2AAE  
             RetransmitMessageSt7540@commandUC 0082                           ?_FlashUnlockSequence 0001  
                                      postdec1 000FE5                                        postdec2 000FDD  
                                      postinc0 000FEE                                        postinc1 000FE6  
                                      postinc2 000FDE                           ??_ClearPacketNumbers 0060  
                       __size_of_GetPacketSlot 0046                               ?_DataReadyST7540 0001  
               LowestIdleWindow@boosterCountUC 0003                BoosterCommandStart@destSerialUS 0007  
                            ?_PacketDataST7540 0060                   __end_of_ReceiveNewDataST7540 2F84  
                               _ProcessRXFrame 0B4E                                   _MangleSerial 1950  
                  CheckCRCST7540@receivedCRCUS 0072                              ??_ForceFiringMode 0062  
                                    _PORTBbits 000F81                                      _PORTCbits 000F82  
             __size_of_RXReadyISRHandlerST7540 000C                                      _PORTDbits 000F83  
                       __size_of_WaitTickCount 001E                             ??_PacketDataST7540 0062  
                          _GetLastPacketNumber 2850                         CreateAndSend@dataLenUC 0081  
               __size_of_PacketReadParamST7540 00E8                      __end_ofi2_FlashEraseBlock 2DBE  
                __end_of_PacketReadParamST7540 1E4E                                 _ProcessPingCMD 2D0A  
                 __size_of_StartTransmitST7540 0018                                      _TRISAbits 000F92  
                              _statusFlagsUSLG 0036                                      _TRISBbits 000F93  
                                    _TRISCbits 000F94                              ?_ProcessSerialCMD 0086  
                                    _TRISDbits 000F95                                      _TRISEbits 000F96  
             BoosterCommandStart@destCommandUC 0009                                CheckLineFault@i 000F  
                           _TransmitBusyST7540 3010                               _commsDataModeUCG 0052  
           CheckBoosterRXParity@tmpRecvFrameUS 0003                             ??_ProcessSerialCMD 0088  
                            __CFG_SOSCSEL$HIGH 000000                              i2_ClearPastValues 2F32  
                       __end_of_CheckCRCST7540 221E                              ??_FlashEraseBlock 0062  
                             ?_ReadFlashValues 0001                                   ??_InitST7540 006D  
                  __size_of_ResetBoosterStates 001E                            ?_TransmitBusyST7540 0001  
                       CreateAndSend@commandUC 0080                           ?_GetLastPacketNumber 0060  
                           ?i2_ClearPastValues 0001                               _ReadConfigST7540 15AC  
                            __CFG_WPFP$PAGE_63 000000                               __CFG_IOL1WAY$OFF 000000  
           BoosterDataCommandComms@syncModeUCS 0049                         __end_of_FlashWriteWord 2AEE  
                         i2_ResetBoosterStates 2F48                            __CFG_MSSP7B_EN$MSK7 000000  
                 InitST7540Wrapper@initCountUC 0079                          ??_FlashUnlockSequence 0060  
                            _cableFaultCounter 0051                            ??i2_ClearPastValues 0002  
                                 ??_InitStates 0068                        __size_of_AssignWindowID 0054  
                                _nextSerialUSG 0041                   ReturnBoosterData@iscStatusUC 017E  
                     __end_ofi2_FlashWriteWord 2C0E               CheckDataCollision@boosterCountUC 0001  
                       __end_of_ProcessRXFrame 0EF6               BoosterCommandStart@destPayloadUC 000A  
                                 ??_InitSystem 0060                   QueryWinSerial@serialNumberUS 001A  
                               __end_of___wmul 2E0E                             _counterELTFailures 00D6  
                ReturnBoosterData@commandValUC 0180                    __end_of_CreateMessageST7540 1C6A  
              ReturnBoosterData@boosterCountUC 0183                           ??_TransmitBusyST7540 0060  
                            ?_SavePacketNumber 0065                         __end_of_ProcessPingCMD 2D38  
                   __size_of_WindowIDBacktrack 0168                         _BoosterCommsDispatcher 1FE8  
                    __size_ofi2_ClearPastValue 0064                             __end_of_InitST7540 1D66  
                           ??_SavePacketNumber 0068          RetransmitMessageSt7540@packetSourceUS 007C  
                        __end_of_PPSUnlockFunc 2F96                            start_initialization 27EE  
                                 _iscSerialUSG 00DC                CreateAndSend@nextPacketNumberUS 0084  
                    SavePacketNumber@saveSlotC 006A                               ?_NewBoosterAdded 0001  
                                  __end_of_isr 00D0                      __end_ofi2_ClearPastValues 2F48  
                              _counterELTTests 003F                               _FlashReadAddress 2F5E  
                                _GetPacketSlot 29E4                         __size_of_CreateAndSend 0074  
                            ??_SetSerialNumber 0088                             __end_of_InitStates 2FC4  
                           _AssignSerialNumber 2EAE                 SavePacketNumber@packetNumberUC 0067  
                              ?_CheckCRCST7540 0001                    SetWindowID@currentSerialUSS 0058  
                           __end_of_InitSystem 25C4                          ??_GetLastPacketNumber 0062  
                                _WaitTickCount 2E90                        InitST7540@frameDataRXUS 0073  
                      InitST7540@frameDataTXUS 006D                   ClearPacketNumbers@iscCountUC 0060  
                                _flagST7540UCG 0055                       ?_BoosterDataCommandComms 0001  
             UpdatePacketNumber@serialNumberUS 006B                                       CRC16@crc 006B  
                              ?_FlashWriteWord 0060                              ??_ClearPastValues 0061  
                           _BoosterCommsActive 2FC4                            ?_AssignSerialNumber 0001  
                   __end_of_ProcessMasterComms 10FE                     __size_ofi2_ForceFiringMode 0030  
                        ?i2_ResetBoosterStates 0001                               MangleSerial@b0UC 0067  
                             MangleSerial@b1UC 0068                               MangleSerial@b2UC 0069  
                             MangleSerial@b4UC 006A                               MangleSerial@b6UC 006B  
               ProcessSerialCMD@boosterCountUC 00C7                 ProcessSerialCMD@boosterIndexUC 00C6  
                 ReturnBoosterData@partRespUSA 0100         RetransmitMessageSt7540@packetDataLenUC 0084  
                    ProcessRXFrame@recvFrameUS 0007                             _bufferRXST7540UCAG 024F  
                      __size_of_QueryWinSerial 015C                    __end_of_BoosterCommandStart 24AE  
                               _CheckLineFault 1838                                   ?_SetCommsLow 0001  
                                     ??___wmul 0005                                ?_ProcessRXFrame 0007  
                              _bufferRXNextUCG 004E                 RetransmitMessageSt7540@dataBuf 0080  
                            __CFG_ADCSEL$BIT10 000000                            ?_BoosterCommsActive 0001  
                     __end_of_WriteFlashValues 2A6C                                _bufferTXNextUCG 0050  
                        __end_of_ReadKeySwitch 2D92                                 _masterFlagsUCG 00DA  
                              ?_ProcessPingCMD 0086                        ??i2_FlashUnlockSequence 0001  
                               _CollisionCheck 2B66                     CollisionCheck@delayValueUS 006F  
                   __size_ofi2_FlashEraseBlock 002C                     ?i2_ResetSingleBoosterState 0001  
                      _ResetSingleBoosterState 1E4E                           ??_AssignSerialNumber 0016  
                                  __pbssCOMRAM 0036                          __size_of_SetCommsHigh 0006  
                                __pcstackBANK0 0060                                  __pcstackBANK1 0100  
                  __size_of_UpdatePacketNumber 00A0                                 ?_GetPacketSlot 0060  
                                 ?_SetWindowID 0001                        MangleSerial@xorOutputUC 0066  
                         ??_BoosterCommsActive 0001                  __size_of_CheckBoosterRXParity 0032  
              CheckBoosterRXParity@bitParityUC 0005                                 ?_WaitTickCount 0060  
                     MangleSerial@cycleCountUC 006E                               ??_IdlePacketSlot 0060  
                         _ReceiveNewDataST7540 2F72                   ReturnBoosterData@respCountUC 017F  
          BoosterDataCommandComms@cableTestUCS 0045                                   ?_WaitNewTick 0001  
                   __end_of_CheckDataCollision 2D66                      CheckCRCST7540@packetLenUC 0074  
                    ReadConfigST7540@discardUC 0067                         __end_of_CheckLineFault 1950  
                                    __pintcode 0008                             _bufferTXST7540UCAG 0200  
                            ?_InitEarthLeakage 0001                       __end_of_ReadEarthLeakage 2952  
                                _CreateAndSend 25C4                       __end_of_LowestIdleWindow 2D0A  
                  BoosterQueryStart@queryValUC 0001                                   _SetCommsHigh 300A  
                       __end_of_CollisionCheck 2B9E                        __size_of_InitST7540Pins 003C  
                      _RXReadyISRHandlerST7540 2FEA                             ??_InitEarthLeakage 0001  
                  __end_of_LowestMissingSerial 29E4                                 __size_of_CRC16 0134  
                      __size_ofi2_SetCommsHigh 0006              __end_ofi2_ResetSingleBoosterState 2168  
                   __size_ofi2_ClearPastValues 0016                __end_of_BoosterDataCommandComms 0752  
                        ?_ReceiveNewDataST7540 0001                                    CRC16@data_p 0060  
                               ___wmul@product 0005                                       _LATAbits 000F89  
                                     _LATBbits 000F8A                                       _LATCbits 000F8B  
                                     _LATDbits 000F8C                        __size_of_ClearPastValue 006E  
                                     _LATEbits 000F8D                         ??i2_ResetBoosterStates 0002  
                                  CRC16@length 0062                                       _PIE1bits 000F9D  
                                     _PIE3bits 000FA3                             i2_WriteFlashValues 2B9E  
                              _ForceFiringMode 2C0E                  WriteConfigST7540@configDataUS 0065  
                                     i2u400_44 13D2                                       i2u400_45 13CC  
                                     i2u402_44 1414                                       i2u402_45 140E  
                              ?_CheckLineFault 0001                 ReadConfigST7540@bitsReceivedUC 0068  
                          _StartTransmitST7540 2F02                                       i2u432_45 0CD6  
                                     _PIR1bits 000F9E                                       i2u602_40 04FE  
                                     i2u610_41 05C6                                       i2u612_41 061E  
                                     i2u604_41 051A                                       _PIR3bits 000FA4  
                                     i2u437_45 0DF4                                       i2u606_41 055A  
                                     i2u470_44 1172                                       i2u374_45 242A  
                                     i2u470_45 116C                                       i2u455_40 2D86  
                                     i2u607_41 0570                                       i2u608_41 058E  
                                     i2u609_41 05AC                                       i2u562_40 0232  
                                     i2u474_44 120A                                       i2u474_45 1204  
                                     i2u395_44 1318                                       i2u395_45 1312  
                                     i2u476_44 1234                                       i2u468_44 1148  
                                     i2u476_45 122E                                       i2u468_45 1142  
                                     i2u397_44 1382                                       i2u397_45 137C  
                                     i2u549_45 0130                                       i2u558_40 01D6  
                                     i2u592_41 0484                                       i2u577_41 03A2  
                                     i2u594_41 04AA                                 _AssignWindowID 28B2  
                             __CFG_WDTPS$32768 000000                                 ?_CreateAndSend 007C  
                  __end_of_SPIISRHandlerST7540 271C                 FlashReadAddress@flashAddressUS 0060  
                          ?i2_WriteFlashValues 0001                                _packetNumberUCG 00DB  
                              ?_CollisionCheck 0001                            _missingSerialWinUCS 0056  
                    ??_ResetSingleBoosterState 0060                              _WriteConfigST7540 22CA  
                                   _ADCON0bits 000FC2                                     _ADCON1bits 000FC1  
                            ___wmul@multiplier 0001             i2ResetBoosterStates@boosterCountUC 0002  
             ResetBoosterStates@boosterCountUC 0061                       __end_of_ReadConfigST7540 1704  
                             i2_ClearPastValue 278A                                _FlashEraseBlock 2C44  
       BoosterDataCommandComms@commsADCValueUS 0014                             ?_WriteConfigST7540 0062  
                     ?_RetransmitMessageSt7540 0001                           ?_StartTransmitST7540 0001  
                              ??_GetPacketSlot 0062                              __CFG_CFGPLLEN$OFF 000000  
               PacketReadParamST7540@paramName 0079                                _commsTXBitsUSLG 00CF  
                  ProcessMasterComms@recvCmdUC 00CE                                ??_WaitTickCount 0062  
                            _ReadAnalogVoltage 2A6C                           ??i2_WriteFlashValues 0006  
                          ??_WriteConfigST7540 0068                      __size_of_PacketDataST7540 000E  
                                ??_PPSLockFunc 0060                             ?_ReadAnalogVoltage 0001  
                 ProcessSerialCMD@respSerialUS 0086                                     _EECON1bits 000FA6  
 BoosterDataCommandComms@counterCommsStatusUSS 0039                         __end_of_AssignWindowID 2906  
                                   _ANCON0bits 000F48                                     _ANCON1bits 000F49  
                 ReturnBoosterData@wordCountUC 0181                      __size_of_ProcessSerialCMD 00CA  
                                     __Hrparam 0000                            ??_ReadAnalogVoltage 0003  
                               _bufferRXLenUCG 004D                                 _QueryWinSerial 1450  
                                     __Lrparam 0000                                 _bufferTXLenUCG 004F  
                    ??_RXReadyISRHandlerST7540 0001                       __end_of_FlashReadAddress 2F72  
                            ?i2_FlashWriteWord 0001                      __end_of_WriteConfigST7540 236E  
                  __size_of_ClearPacketNumbers 004A                        ?_BoosterCommsDispatcher 0001  
                         __size_of_SetCommsLow 0006                             ??i2_FlashWriteWord 0005  
               CheckBoosterRXParity@bitCountUC 0006                    i2FlashWriteWord@intStatusUC 0005  
                              _SetSerialNumber 1A5C  BoosterDataCommandComms@framesReceivedPhaseUCS 0047  
                      __size_of_LineIdleST7540 000C                          ??_StartTransmitST7540 0060  
                     __size_of_DataReadyST7540 0006                               ??_CheckCRCST7540 006D  
                    __end_of_ReadAnalogVoltage 2AAE            RetransmitMessageSt7540@packetDestUS 007E  
                        _PacketReadParamST7540 1D66                                       __ptext10 2F72  
                                     __ptext11 1F1E                                       __ptext20 2168  
                                     __ptext12 2D0A                                       __ptext21 1B66  
                                     __ptext13 25C4                                       __ptext30 2546  
                                     __ptext22 1704                                       __ptext14 3010  
                                     __ptext31 2FB6                                       __ptext23 2B66  
                                     __ptext15 2F02                                       __ptext40 2952  
                                     __ptext32 2E72                                       __ptext24 1950  
                                     __ptext16 2638                                       __ptext41 2E0E  
                                     __ptext33 1E4E                                       __ptext25 2FD2  
                                     __ptext17 2AEE                                       __ptext42 1C6A  
                                     __ptext34 221E                                       __ptext26 2C0E  
                                     __ptext18 29E4                                       __ptext51 2CAA  
                                     __ptext43 22CA                                       __ptext35 2A2A  
                                     __ptext27 2E54                                       __ptext19 1D66  
                                     __ptext60 2F1A                                       __ptext52 26AC  
                                     __ptext44 2E90                                       __ptext36 2AAE  
                                     __ptext28 271C                                       __ptext61 1838  
                                     __ptext53 2FEA                                       __ptext45 3002  
                                     __ptext37 2C44                                       __ptext29 3016  
                                     __ptext70 2EAE                                       __ptext62 2DE8  
                                     __ptext54 00D4                                       __ptext46 15AC  
                                     __ptext38 2FDE                                       __ptext71 2B9E  
                                     __ptext63 2A6C                                       __ptext55 301C  
                                     __ptext47 2B2A                                       __ptext39 2F5E  
                                     __ptext80 2C78                                       __ptext72 2BD6  
                                     __ptext64 1FE8                                       __ptext56 3022  
                                     __ptext48 2F84                                       __ptext81 2ECC  
                                     __ptext73 2D92                                       __ptext65 2F32  
                                     __ptext57 2D66                                       __ptext49 2F96  
                                     __ptext82 2CDA                                       __ptext74 2FF6  
                                     __ptext66 10FE                                       __ptext58 2906  
                                     __ptext83 2D38                                       __ptext75 1450  
                                     __ptext67 2F48                                       __ptext59 0B4E  
                                     __ptext84 2E32                                       __ptext76 20AC  
                                     __ptext68 12E8                                       __ptext85 2FC4  
                                     __ptext77 278A                                       __ptext69 28B2  
                                     __ptext78 299C                                       __ptext79 240E  
                              _ClearPastValues 2E54                     __end_of_ResetBoosterStates 2E90  
                                 _SSP2CON1bits 000F72                         ??_ReceiveNewDataST7540 0060  
                             ??_FlashWriteWord 0064                                    _ISO_COUNTER 004A  
                      __end_of_ForceFiringMode 2C44                      __size_of_SavePacketNumber 0074  
                         __size_of_SetWindowID 01EA                                  __size_of_main 0018  
                  __end_of_FlashUnlockSequence 2FEA                   CreateMessageST7540@dataLenUC 0072  
                       __end_of_QueryWinSerial 15AC                               ??_ProcessRXFrame 000A  
              CheckBoosterRXParity@recvFrameUS 0001                                ?_AssignWindowID 0001  
                    CreateAndSend@packetDestUS 007E                                ??_CreateAndSend 0084  
                          __end_of_PPSLockFunc 2FA8                         _boosterCommsDataSerial 0184  
                         __size_of_WaitNewTick 0008                       __size_of_ReadFlashValues 00AC  
               WindowIDBacktrack@statusSetIDUC 001A                               ??_ProcessPingCMD 0088  
               __end_of_BoosterCommsDispatcher 20AC                                       int$flags 005E  
                      __end_of_FlashEraseBlock 2C78    BoosterDataCommandComms@counterSyncStatusUSS 003B  
                               _InitST7540Pins 2B2A                __end_of_RetransmitMessageSt7540 2546  
                            ?_WriteFlashValues 0001               __size_of_BoosterDataCommandComms 067E  
                                 _SSP2STATbits 000F73                    __size_of_TransmitBusyST7540 0006  
                 WriteConfigST7540@frameDataUS 0062                    SetSerialNumber@respSerialUS 0086  
                  ReturnBoosterData@allRespUSA 013E                   CreateMessageST7540@commandUC 0071  
                               i2_SetCommsHigh 301C                             _ProcessMasterComms 0EF6  
                           ??_WriteFlashValues 0065                       GetPacketSlot@srcSerialUS 0060  
               __size_ofi2_FlashUnlockSequence 000C                                    _OSCTUNEbits 000F9B  
                                   _INTCONbits 000FF2                    ??i2_ResetSingleBoosterState 0001  
                __end_ofi2_FlashUnlockSequence 3002                   __size_of_CreateMessageST7540 0104  
                    SetWindowID@statusSetIDUCS 005D                    SavePacketNumber@srcSerialUS 0065  
                  __end_of_GetLastPacketNumber 28B2                                  _dispStatusUCS 0054  
                            _SetIsolationRelay 2DBE                            ?_ProcessMasterComms 0001  
                           ?_SetIsolationRelay 0001                                       intlevel2 0000  
                  WriteConfigST7540@bitsSentUC 006C                                 _ClearPastValue 271C  
                   CreateMessageST7540@dataBuf 0073                       __size_of_NewBoosterAdded 001E  
                ReturnBoosterData@respSerialUS 0086                                ?_QueryWinSerial 0001  
                          ??_SetIsolationRelay 0060       RetransmitMessageSt7540@oldPacketNumberUC 0083  
                                   _OSCCONbits 000FD3                         __size_of_PPSUnlockFunc 0012  
                       __end_of_InitST7540Pins 2B66                           ??_ProcessMasterComms 00C8  
                      __end_of_SetSerialNumber 1B66                              _BoosterQueryStart 2E32  
                 __end_of_CheckBoosterRXParity 2CAA                       CheckLineFault@lineVoltUS 000B  
             ReturnBoosterData@windowCompareUS 017C                     __size_of_WriteConfigST7540 00A4  
                            ?_ReadEarthLeakage 0001                              ?_LowestIdleWindow 0001  
                           ?_BoosterQueryStart 0001                         __end_ofi2_SetCommsHigh 3022  
                           ??_ReadEarthLeakage 0004                             ??_LowestIdleWindow 0001  
                           _CheckDataCollision 2D38                        __end_of_ClearPastValues 2E72  
                 __size_of_BoosterCommandStart 00A0                UpdatePacketNumber@packetNumberS 006D  
                   __end_of_UpdatePacketNumber 240E                                     _PPSCONbits 000EBF  
                       GetPacketSlot@saveSlotC 0064                      __end_of_SetIsolationRelay 2DE8  
                   WriteConfigST7540@discardUC 006B                            ??_BoosterQueryStart 0001  
                       ?_PacketReadParamST7540 0075                    __size_of_AssignSerialNumber 001E  
                    MangleSerial@mangleValueUS 0060                     __size_of_ReadAnalogVoltage 0042  
                          ?_CheckDataCollision 0001                      __size_of_InitEarthLeakage 0018  
                 AssignWindowID@serialNumberUS 0016                               _PacketDataST7540 2FA8  
                       __end_of_ClearPastValue 278A                    __size_of_BoosterCommsActive 000E  
                               _commsStatusUCG 0053       i2ResetSingleBoosterState@boosterNumberUC 0001  
       ResetSingleBoosterState@boosterNumberUC 0060            UpdatePacketNumber@pastPacketNumberS 0074  
                            ??_DataReadyST7540 0060                               ?_ForceFiringMode 0001  
                                  _PPSLockFunc 2F96                          i2FlashWriteWord@lsbUC 0003  
                        i2FlashWriteWord@msbUC 0004                               ??_CheckLineFault 0007  
              CreateMessageST7540@dataBufLocUC 0079                              _packetNumbersUSAG 0400  
                       __size_of_ReadKeySwitch 002C                       __end_ofi2_ClearPastValue 27EE  
                ReceiveNewDataST7540@discardUC 0060                      i2_ResetSingleBoosterState 20AC  
                             _ProcessSerialCMD 1F1E                      __end_of_BoosterQueryStart 2E54  
                     InitST7540@configDataRXUS 0076                       InitST7540@configDataTXUS 0070  
                             ??_CollisionCheck 006F                           ??_CheckDataCollision 0001  
